<codestructure version="5.15">
<phptree>
<treenode node="ActivatorInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\ActivatorInterface.php;f0;9;1;27;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ActivatorInterface&#10;&#10;Description&#10;     Interface ActivatorInterface;;d0,10;;b0,0;;m0;;e">
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\ActivatorInterface.php;f11;25;35;25;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the error string that should be displayed to the user.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\ActivatorInterface.php;f11;18;51;18;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Send activation message to user&#10;&#10;Parameters:&#10;    User $user;;d-1,-1;;b1,0;;m0;;eUser $user;;p">
</treenode>
</treenode>
<treenode node="admin/partials/footer;PHP:PHP Include;O:\xampp\htdocs\2020\blog-4\app\Views\admin\layouts\default.php;f22;44;43;44;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="admin/partials/header;PHP:PHP Include;O:\xampp\htdocs\2020\blog-4\app\Views\admin\layouts\default.php;f21;33;42;33;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="APP_NAMESPACE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f36;13;49;13;;;;vpos;;v;;a;;r&apos;App&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="APPPATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;15;43;15;;O:\xampp\htdocs\2020\blog-4\system\bootstrap.php;f9;54;16;54;;;;vpos;;v;;a;;rrealpath($paths-&gt;appDirectory;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="AuthenticatorInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticatorInterface.php;f0;4;1;40;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="attempt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticatorInterface.php;f11;14;76;14;;;;vpos;;v;;abool;;r&#10;Description&#10;     Attempts to validate the credentials and log a user in.&#10;&#10;Parameters:&#10;    array $credentials&#10;    bool $remember - Should we remember the user (if enabled);;d-1,-1;;b1,0;;m0;;earray $credentials;;pbool $remember;;p">
</treenode>
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticatorInterface.php;f11;21;33;21;;;;vpos;;v;;abool;;r&#10;Description&#10;     Checks to see if the user is logged in or not.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="user;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticatorInterface.php;f11;39;26;39;;;;vpos;;v;;a;;r&#10;Description&#10;     Returns the User instance for the current logged in user.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="validate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticatorInterface.php;f11;32;72;32;;;;vpos;;v;;abool;;r&#10;Description&#10;     Checks the user&apos;s credentials to see if they could authenticate. Unlike `attempt()`, will not log the user into the system.&#10;&#10;Parameters:&#10;    array $credentials&#10;    bool $returnUser&#10;&#10;Return:&#10;   |User;;d-1,-1;;b1,0;;m0;;earray $credentials;;pbool $returnUser;;p">
</treenode>
</treenode>
<treenode node="AuthorizeInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f0;2;1;177;;;;vpos;;v;;a;;r;;d30,2;;b0,0;;m0;;e">
<treenode node="addPermissionToGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;67;61;67;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Adds a single permission to a single group.&#10;&#10;Parameters:&#10;    int|string $permission&#10;    int|string $group;;d-1,-1;;b1,0;;m0;;eint|string $permission;;pint|string $group;;p">
</treenode>
<treenode node="addUserToGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;47;55;47;;;;vpos;;v;;abool;;r&#10;Description&#10;     Makes a member a part of a group.&#10;&#10;Parameters:&#10;     $userid&#10;     $group - // Either ID or name;;d-1,-1;;b1,0;;m0;;e $userid;;p $group;;p">
</treenode>
<treenode node="createGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;105;69;105;;;;vpos;;v;;amixed;;r&#10;Description&#10;     &#10;&#10;Parameters:&#10;     $name&#10;    string $description;;d-1,-1;;b1,0;;m0;;e $name;;pstring $description;;p">
</treenode>
<treenode node="createPermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;155;74;155;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Creates a single permission.&#10;&#10;Parameters:&#10;     $name&#10;    string $description;;d-1,-1;;b1,0;;m0;;e $name;;pstring $description;;p">
</treenode>
<treenode node="deleteGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;114;45;114;;;;vpos;;v;;abool;;r&#10;Description&#10;     Deletes a single group.&#10;&#10;Parameters:&#10;    int $groupId;;d-1,-1;;b1,0;;m0;;eint $groupId;;p">
</treenode>
<treenode node="deletePermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;164;55;164;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Deletes a single permission and removes that permission from all groups.&#10;&#10;Parameters:&#10;     $permissionId;;d-1,-1;;b1,0;;m0;;e $permissionId;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;9;27;9;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the latest error string.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="group;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;90;33;90;;;;vpos;;v;;aobject;;r&#10;Description&#10;     Grabs the details about a single group.&#10;&#10;Parameters:&#10;     $group&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;e $group;;p">
</treenode>
<treenode node="groups;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;97;28;97;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Grabs an array of all groups.&#10;&#10;Return:&#10;   of objects;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="hasPermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;37;59;37;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Checks a user&apos;s groups to see if they have the specified permission.&#10;&#10;Parameters:&#10;    int|string $permission&#10;    int $userId;;d-1,-1;;b1,0;;m0;;eint|string $permission;;pint $userId;;p">
</treenode>
<treenode node="inGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;27;49;27;;;;vpos;;v;;abool;;r&#10;Description&#10;     Checks to see if a user is in a group.&#10;&#10;Parameters:&#10;     $groups&#10;    int $userId;;d-1,-1;;b1,0;;m0;;e $groups;;pint $userId;;p">
</treenode>
<treenode node="permission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;138;43;138;;;;vpos;;v;;aobject;;r&#10;Description&#10;     Returns the details about a single permission.&#10;&#10;Parameters:&#10;    int|string $permission&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;eint|string $permission;;p">
</treenode>
<treenode node="permissions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;145;33;145;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns an array of all permissions in the system.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="removePermissionFromGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;77;66;77;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Removes a single permission from a group.&#10;&#10;Parameters:&#10;    int|string $permission&#10;    int|string $group;;d-1,-1;;b1,0;;m0;;eint|string $permission;;pint|string $group;;p">
</treenode>
<treenode node="removeUserFromGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;57;60;57;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Removes a single user from a group.&#10;&#10;Parameters:&#10;     $userId&#10;     $group;;d-1,-1;;b1,0;;m0;;e $userId;;p $group;;p">
</treenode>
<treenode node="updateGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;125;78;125;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Updates a single group&apos;s information.&#10;&#10;Parameters:&#10;     $id&#10;     $name&#10;    string $description;;d-1,-1;;b1,0;;m0;;e $id;;p $name;;pstring $description;;p">
</treenode>
<treenode node="updatePermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\AuthorizeInterface.php;f11;175;83;175;;;;vpos;;v;;abool;;r&#10;Description&#10;     Updates the details for a single permission.&#10;&#10;Parameters:&#10;    int $id&#10;    string $name&#10;    string $description;;d-1,-1;;b1,0;;m0;;eint $id;;pstring $name;;pstring $description;;p">
</treenode>
</treenode>
<treenode node="CacheInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f0;44;1;153;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface CacheInterface&#10;&#10;Description&#10;     Cache interface;;d0,45;;b0,0;;m0;;e">
<treenode node="clean;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;118;24;118;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Will delete all items in the entire cache.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;109;56;109;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Performs atomic decrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d-1,-1;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;85;36;85;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Deletes a specific item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d-1,-1;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;61;33;61;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Attempts to fetch an item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d-1,-1;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getCacheInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;130;31;130;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns information on the entire cache.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getMetaData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;141;41;141;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns detailed information about the specific item in the cache.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d-1,-1;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;97;56;97;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Performs atomic incrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d-1,-1;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;50;29;50;;;;vpos;;v;;a;;r&#10;Description&#10;     Takes care of any handler-specific setup that must be done.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="isSupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;150;36;150;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Determines if the driver is supported on this system.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheInterface.php;f8;74;57;74;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Saves an item to the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name&#10;    mixed $value - The data to save&#10;    integer $ttl - Time To Live, in seconds (default 60);;d-1,-1;;b1,0;;m0;;estring $key;;pmixed $value;;pinteger $ttl;;p">
</treenode>
</treenode>
<treenode node="CI_DEBUG;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Boot\testing.php;f31;32;39;32;;O:\xampp\htdocs\2020\blog-4\app\Config\Boot\production.php;f31;21;39;21;;O:\xampp\htdocs\2020\blog-4\app\Config\Boot\development.php;f31;31;39;31;;;;vpos;;v;;a;;rtrue;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="CIPATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;19;42;19;;;;vpos;;v;;a;;rrealpath(SYSTEMPATH . &apos;../&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="COMPOSER_PATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;23;49;23;;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f36;23;49;23;;;;vpos;;v;;a;;rrealpath(HOMEPATH . &apos;vendor/autoload.php&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="ConnectionInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f0;46;1;224;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ConnectionInterface&#10;&#10;Description&#10;     Interface ConnectionInterface;;d0,47;;b0,0;;m0;;e">
<treenode node="callFunction;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;221;63;221;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Allows for custom calls to the database engine that are not supported through our database layer.&#10;&#10;Parameters:&#10;    string $functionName&#10;    array - ...$params;;d-1,-1;;b1,0;;m0;;estring $functionName;;parray;;p">
</treenode>
<treenode node="connect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;64;50;64;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Connect to the database.&#10;&#10;Parameters:&#10;    boolean $persistent;;d-1,-1;;b1,0;;m0;;eboolean $persistent;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;126;31;126;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the last error encountered by this connection.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="escape;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;208;29;208;;;;vpos;;v;;amixed;;r&#10;Description&#10;     &quot;Smart&quot; Escaping&#10;&#10;Parameters:&#10;    mixed $str;;d-1,-1;;b1,0;;m0;;emixed $str;;p">
</treenode>
<treenode node="getConnection;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;97;52;97;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the actual connection object. If both a &apos;read&apos; and &apos;write&apos; connection has been specified, you can pass either term in to get that connection. If you pass either alias in and only a single connection is present, it must return the sole connection.&#10;&#10;Parameters:&#10;    string|null $alias;;d-1,-1;;b1,0;;m0;;estring|null $alias;;p">
</treenode>
<treenode node="getDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;117;38;117;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the name of the current database being used.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getLastQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;194;31;194;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the last query&apos;s statement object.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getPlatform;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;135;38;135;;;;vpos;;v;;astring;;r&#10;Description&#10;     The name of the platform in use (MySQLi, mssql, etc);;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;144;37;144;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns a string containing the version of the database being used.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;54;29;54;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Initializes the database connection/settings.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="persistentConnect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;73;36;73;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Create a persistent database connection.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="query;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;161;50;161;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Orchestrates a query against the database. Queries must use Database\Statement objects to store the query and build it. This method works with the cache.&#10;&#10;Parameters:&#10;    string $sql&#10;    mixed - ...$binds;;d-1,-1;;b1,0;;m0;;estring $sql;;pmixed;;p">
</treenode>
<treenode node="reconnect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;83;28;83;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Keep or establish the connection if no queries have been sent for a length of time exceeding the server&apos;s idle timeout.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="setDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;108;50;108;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Select a specific database table to use.&#10;&#10;Parameters:&#10;    string $databaseName;;d-1,-1;;b1,0;;m0;;estring $databaseName;;p">
</treenode>
<treenode node="simpleQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;174;41;174;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Performs a basic query against the database. No binding or caching is performed, nor are transactions handled. Simply takes a raw query string and returns the database-specific result id.&#10;&#10;Parameters:&#10;    string $sql;;d-1,-1;;b1,0;;m0;;estring $sql;;p">
</treenode>
<treenode node="table;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ConnectionInterface.php;f8;185;34;185;;;;vpos;;v;;aBaseBuilder;;r&#10;Description&#10;     Returns an instance of the query builder for this connection.&#10;&#10;Parameters:&#10;    string|array $tableName - Table name&#10;&#10;Return:&#10;   Builder;;d-1,-1;;b1,0;;m0;;estring|array $tableName;;p">
</treenode>
</treenode>
<treenode node="DAY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f29;36;32;36;;;;vpos;;v;;a;;r86400;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="DECADE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f29;40;35;40;;;;vpos;;v;;a;;r315360000;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EncrypterInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\EncrypterInterface.php;f0;46;1;66;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface EncrypterInterface&#10;&#10;Description&#10;     CodeIgniter Encryption Handler;;d0,47;;b0,0;;m0;;e">
<treenode node="decrypt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\EncrypterInterface.php;f8;65;47;65;;;;vpos;;v;;astring;;r&#10;Description&#10;     Decrypt - convert ciphertext into plaintext&#10;&#10;Parameters:&#10;    string $data - Encrypted data&#10;    array $params - Over-ridden parameters, specifically the key;;d-1,-1;;b1,0;;m0;;estring $data;;parray $params;;p">
</treenode>
<treenode node="encrypt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\EncrypterInterface.php;f8;56;47;56;;;;vpos;;v;;astring;;r&#10;Description&#10;     Encrypt - convert plaintext into ciphertext&#10;&#10;Parameters:&#10;    string $data - Input data&#10;    array $params - Over-ridden parameters, specifically the key;;d-1,-1;;b1,0;;m0;;estring $data;;parray $params;;p">
</treenode>
</treenode>
<treenode node="ENVIRONMENT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f8;8;19;8;;;;vpos;;v;;a;;r&apos;testing&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EVENT_PRIORITY_HIGH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f8;45;27;45;;;;vpos;;v;;a;;r10;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EVENT_PRIORITY_LOW;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f8;43;26;43;;;;vpos;;v;;a;;r&#10;Description&#10;     CodeIgniter;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EVENT_PRIORITY_NORMAL;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f8;44;29;44;;;;vpos;;v;;a;;r100;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="ExceptionInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Exception\ExceptionInterface.php;f0;10;1;12;;O:\xampp\htdocs\2020\blog-4\system\Exceptions\ExceptionInterface.php;f0;9;1;11;;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\ExceptionInterface.php;f0;9;1;12;;O:\xampp\htdocs\2020\blog-4\system\Cache\Exceptions\ExceptionInterface.php;f0;46;1;48;;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\ExceptionInterface.php;f0;8;1;10;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ExceptionInterface&#10;&#10;Description&#10;      see       https://github.com/laminas/laminas-escaper for the canonical source repository;;d0,11;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT__AUTO_MAX;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;76;56;76;;;;vpos;;v;;a;;r125;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT__AUTO_MIN;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;75;56;75;;;;vpos;;v;;a;;r9;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT_CONFIG;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;69;53;69;;;;vpos;;v;;a;;r3;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT_DATABASE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;74;55;74;;;;vpos;;v;;a;;r8;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT_ERROR;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;68;52;68;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT_SUCCESS;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;67;54;67;;;;vpos;;v;;a;;r0;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT_UNKNOWN_CLASS;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;71;60;71;;;;vpos;;v;;a;;r5;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT_UNKNOWN_FILE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;70;59;70;;;;vpos;;v;;a;;r4;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT_UNKNOWN_METHOD;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;72;61;72;;;;vpos;;v;;a;;r6;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EXIT_USER_INPUT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f42;73;57;73;;;;vpos;;v;;a;;r7;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="FabricatorModel;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Test\Interfaces\FabricatorModel.php;f0;54;1;108;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface FabricatorModel&#10;&#10;Description&#10;     FabricatorModel;;d0,55;;b0,0;;m0;;e">
<treenode node="find;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Interfaces\FabricatorModel.php;f8;64;33;64;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Fetches the row of database from $this-&gt;table with a primary key matching $id.&#10;&#10;Parameters:&#10;    mixed|array|null $id - One primary key or an array of primary keys&#10;&#10;Return:&#10;   |object|null    The resulting row of data, or null;;d-1,-1;;b1,0;;m0;;emixed|array|null $id;;p">
</treenode>
<treenode node="insert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Interfaces\FabricatorModel.php;f8;76;60;76;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Inserts data into the current table. If an object is provided, it will attempt to convert it to an array.&#10;&#10;Parameters:&#10;    array|object $data&#10;    boolean $returnID - Whether insert ID should be returned or not&#10;&#10;Return:&#10;   |string|boolean;;d-1,-1;;b1,0;;m0;;earray|object $data;;pboolean $returnID;;p">
</treenode>
</treenode>
<treenode node="FCPATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;20;42;20;;O:\xampp\htdocs\2020\blog-4\public\index.php;f8;11;14;11;;O:\xampp\htdocs\2020\blog-4\index.php;f8;11;14;11;;;;vpos;;v;;a;;rrealpath(PUBLICPATH;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="FilterInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Filters\FilterInterface.php;f0;47;1;84;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface FilterInterface&#10;&#10;Description&#10;     Filter interface;;d0,48;;b0,0;;m0;;e">
<treenode node="after;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\FilterInterface.php;f8;81;97;81;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Allows After filters to inspect and modify the response object as needed. This method does not allow any way to stop execution of other after filters, short of throwing an Exception or Error.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    \CodeIgniter\HTTP\ResponseInterface $response&#10;    null $arguments;;d-1,-1;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;p\CodeIgniter\HTTP\ResponseInterface $response;;pnull $arguments;;p">
</treenode>
<treenode node="before;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\FilterInterface.php;f8;65;69;65;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Do whatever processing this filter needs to do. By default it should not return anything during normal execution. However, when an abnormal state is found, it should return an instance of CodeIgniter\HTTP\Response. If it does, script execution will end and that Response will be sent back to the client, allowing for error pages, redirects, etc.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    null $arguments;;d-1,-1;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;pnull $arguments;;p">
</treenode>
</treenode>
<treenode node="FormatterInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Format\FormatterInterface.php;f0;44;1;55;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface FormatterInterface&#10;&#10;Description&#10;     Formatter interface;;d0,45;;b0,0;;m0;;e">
<treenode node="format;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Format\FormatterInterface.php;f8;54;30;54;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Takes the given data and formats it.&#10;&#10;Parameters:&#10;    string|array $data;;d-1,-1;;b1,0;;m0;;estring|array $data;;p">
</treenode>
</treenode>
<treenode node="HandlerInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\HandlerInterface.php;f0;44;1;84;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface HandlerInterface&#10;&#10;Description&#10;     Expected behavior for a Log handler;;d0,45;;b0,0;;m0;;e">
<treenode node="canHandle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\HandlerInterface.php;f8;70;47;70;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Checks whether the Handler will handle logging items of this log Level.&#10;&#10;Parameters:&#10;    string $level;;d-1,-1;;b1,0;;m0;;estring $level;;p">
</treenode>
<treenode node="handle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\HandlerInterface.php;f8;58;47;58;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Handles logging the message. If the handler returns false, then execution of handlers will stop. Any handlers that have not run, yet, will not be run.&#10;&#10;Parameters:&#10;     $level&#10;     $message;;d-1,-1;;b1,0;;m0;;e $level;;p $message;;p">
</treenode>
<treenode node="setDateFormat;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\HandlerInterface.php;f8;81;46;81;;;;vpos;;v;;aHandlerInterface;;r&#10;Description&#10;     Sets the preferred date format to use when logging.&#10;&#10;Parameters:&#10;    string $format;;d-1,-1;;b1,0;;m0;;estring $format;;p">
</treenode>
</treenode>
<treenode node="HOUR;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f29;35;33;35;;;;vpos;;v;;a;;r3600;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="ImageHandlerInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f0;44;1;209;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ImageHandlerInterface&#10;&#10;Description&#10;     Expected behavior of an Image handler;;d0,45;;b0,0;;m0;;e">
<treenode node="convert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;87;40;87;;;;vpos;;v;;a;;r&#10;Description&#10;     Changes the stored image type to indicate the new file format to use when saving. Does not touch the actual resource.&#10;&#10;Parameters:&#10;    integer|null $imageType - A PHP imagetype constant, e;;d-1,-1;;b1,0;;m0;;einteger|null $imageType;;p">
</treenode>
<treenode node="crop;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;75;147;75;;;;vpos;;v;;a;;r&#10;Description&#10;     Crops the image to the desired height and width. If one of the height/width values is not provided, that value will be set the appropriate value based on offsets and image dimensions.&#10;&#10;Parameters:&#10;    integer|null $width&#10;    integer|null $height&#10;    integer|null $x - X-axis coord to start cropping from the left of image&#10;    integer|null $y - Y-axis coord to start cropping from the top of image&#10;    boolean $maintainRatio&#10;    string $masterDim;;d-1,-1;;b1,0;;m0;;einteger|null $width;;pinteger|null $height;;pinteger|null $x;;pinteger|null $y;;pboolean $maintainRatio;;pstring $masterDim;;p">
</treenode>
<treenode node="fit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;168;63;168;;;;vpos;;v;;a;;r&#10;Description&#10;     Combine cropping and resizing into a single command.&#10;&#10;Parameters:&#10;    integer $width&#10;    integer $height&#10;    string $position;;d-1,-1;;b1,0;;m0;;einteger $width;;pinteger $height;;pstring $position;;p">
</treenode>
<treenode node="flatten;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;111;75;111;;;;vpos;;v;;a;;r&#10;Description&#10;     Flattens transparencies, default white background&#10;&#10;Parameters:&#10;    integer $red&#10;    integer $green&#10;    integer $blue;;d-1,-1;;b1,0;;m0;;einteger $red;;pinteger $green;;pinteger $blue;;p">
</treenode>
<treenode node="flip;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;144;47;144;;;;vpos;;v;;a;;r&#10;Description&#10;     Flip an image horizontally or vertically&#10;&#10;Parameters:&#10;    string $dir - Direction to flip, either &apos;vertical&apos; or &apos;horizontal&apos;;;d-1,-1;;b1,0;;m0;;estring $dir;;p">
</treenode>
<treenode node="getEXIF;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;133;44;133;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Retrieve the EXIF information from the image, if possible. Returns an array of the information, or null if nothing can be found.&#10;&#10;Parameters:&#10;    string|null $key - If specified, will only return this piece of EXIF data;;d-1,-1;;b1,0;;m0;;estring|null $key;;p">
</treenode>
<treenode node="reorient;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;121;27;121;;;;vpos;;v;;aImageHandlerInterface;;r&#10;Description&#10;     Reads the EXIF information from the image and modifies the orientation so that displays correctly in the browser.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="resize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;57;105;57;;;;vpos;;v;;a;;r&#10;Description&#10;     Resize the image&#10;&#10;Parameters:&#10;    integer $width&#10;    integer $height&#10;    boolean $maintainRatio - If true, will get the closest match possible while keeping aspect ratio true&#10;    string $masterDim;;d-1,-1;;b1,0;;m0;;einteger $width;;pinteger $height;;pboolean $maintainRatio;;pstring $masterDim;;p">
</treenode>
<treenode node="rotate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;98;37;98;;;;vpos;;v;;a;;r&#10;Description&#10;     Rotates the image on the current canvas.&#10;&#10;Parameters:&#10;    float $angle;;d-1,-1;;b1,0;;m0;;efloat $angle;;p">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;208;63;208;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Saves any changes that have been made to file.&#10;&#10;Parameters:&#10;    string $target&#10;    integer $quality;;d-1,-1;;b1,0;;m0;;estring $target;;pinteger $quality;;p">
</treenode>
<treenode node="text;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\ImageHandlerInterface.php;f8;192;56;192;;;;vpos;;v;;a;;r&#10;Description&#10;     Overlays a string of text over the image.&#10;&#10;Parameters:&#10;    string $text&#10;    array $options;;d-1,-1;;b1,0;;m0;;estring $text;;parray $options;;p">
</treenode>
</treenode>
<treenode node="KINT_DIR;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\init.php;f9;36;17;36;;;;vpos;;v;;a;;r__DIR__;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="KINT_PHP56;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\init.php;f9;38;19;38;;;;vpos;;v;;a;;r(\version_compare(PHP_VERSION, &apos;5.6&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="KINT_PHP70;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\init.php;f9;39;19;39;;;;vpos;;v;;a;;r(\version_compare(PHP_VERSION, &apos;7.0&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="KINT_PHP72;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\init.php;f9;40;19;40;;;;vpos;;v;;a;;r(\version_compare(PHP_VERSION, &apos;7.2&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="KINT_PHP73;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\init.php;f9;41;19;41;;;;vpos;;v;;a;;r(\version_compare(PHP_VERSION, &apos;7.3&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="KINT_PHP74;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\init.php;f9;42;19;42;;;;vpos;;v;;a;;r(\version_compare(PHP_VERSION, &apos;7.4&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="KINT_WIN;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\init.php;f9;37;17;37;;;;vpos;;v;;a;;rDIRECTORY_SEPARATOR !== &apos;/&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="LoggerAwareInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerAwareInterface.php;f0;7;1;16;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface LoggerAwareInterface&#10;&#10;Description&#10;     Describes a logger-aware instance;;d0,8;;b0,0;;m0;;e">
<treenode node="setLogger;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerAwareInterface.php;f11;15;54;15;;;;vpos;;v;;anull;;r&#10;Description&#10;     Sets a logger instance on the object&#10;&#10;Parameters:&#10;    LoggerInterface $logger;;d-1,-1;;b1,0;;m0;;eLoggerInterface $logger;;p">
</treenode>
</treenode>
<treenode node="LoggerInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f0;17;1;111;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface LoggerInterface&#10;&#10;Description&#10;     Describes a logger instance;;d0,18;;b0,0;;m0;;e">
<treenode node="alert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f11;38;56;38;;;;vpos;;v;;anull;;r&#10;Description&#10;     Action must be taken immediately.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="critical;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f11;49;59;49;;;;vpos;;v;;anull;;r&#10;Description&#10;     Critical conditions.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="debug;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f11;100;56;100;;;;vpos;;v;;anull;;r&#10;Description&#10;     Detailed debug information.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="emergency;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f11;26;60;26;;;;vpos;;v;;anull;;r&#10;Description&#10;     System is unusable.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f11;59;56;59;;;;vpos;;v;;anull;;r&#10;Description&#10;     Runtime errors that do not require immediate action but should typically be logged and monitored.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="info;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f11;91;55;91;;;;vpos;;v;;anull;;r&#10;Description&#10;     Interesting events.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="log;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f11;110;62;110;;;;vpos;;v;;anull;;r&#10;Description&#10;     Logs with an arbitrary level.&#10;&#10;Parameters:&#10;    mixed $level&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;emixed $level;;pstring $message;;parray $context;;p">
</treenode>
<treenode node="notice;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f11;80;57;80;;;;vpos;;v;;anull;;r&#10;Description&#10;     Normal but significant events.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="warning;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerInterface.php;f11;71;58;71;;;;vpos;;v;;anull;;r&#10;Description&#10;     Exceptional occurrences that are not errors.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
</treenode>
<treenode node="MINUTE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f29;34;35;34;;;;vpos;;v;;a;;r60;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="MONTH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f29;38;34;38;;;;vpos;;v;;a;;r2592000;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="ObjectPluginInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\ObjectPluginInterface.php;f0;29;1;32;;;;vpos;;v;;aPluginInterface;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="renderObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\ObjectPluginInterface.php;f11;31;48;31;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="PagerInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f0;44;1;227;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface PagerInterface&#10;&#10;Description&#10;     Expected behavior for a Pager;;d0,45;;b0,0;;m0;;e">
<treenode node="getCurrentPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;131;63;131;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Returns the number of the current page of results.&#10;&#10;Parameters:&#10;    string|null $group;;d-1,-1;;b1,0;;m0;;estring|null $group;;p">
</treenode>
<treenode node="getDetails;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;224;61;224;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Returns an array with details about the results, including total, per_page, current_page, last_page, next_url, prev_url, from, to. Does not include the actual data. This data is suitable for adding a &apos;data&apos; object to with the result set and converting to JSON.&#10;&#10;Parameters:&#10;    string $group;;d-1,-1;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getFirstPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;166;56;166;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Returns the first page.&#10;&#10;Parameters:&#10;    string $group;;d-1,-1;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getLastPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;177;55;177;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Returns the last page, if we have a total that we can calculate with.&#10;&#10;Parameters:&#10;    string $group&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getNextPageURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;188;58;188;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the full URI to the next page of results, or null.&#10;&#10;Parameters:&#10;    string $group&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getPageCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;120;61;120;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Returns the total number of pages.&#10;&#10;Parameters:&#10;    string|null $group;;d-1,-1;;b1,0;;m0;;estring|null $group;;p">
</treenode>
<treenode node="getPageURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;144;100;144;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the URI for a specific page for the specified group.&#10;&#10;Parameters:&#10;    integer|null $page&#10;    string $group&#10;    boolean $returnObject&#10;&#10;Return:&#10;   |\CodeIgniter\HTTP\URI;;d-1,-1;;b1,0;;m0;;einteger|null $page;;pstring $group;;pboolean $returnObject;;p">
</treenode>
<treenode node="getPerPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;210;59;210;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Returns the number of results per page that should be shown.&#10;&#10;Parameters:&#10;    string $group;;d-1,-1;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getPreviousPageURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;199;62;199;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the full URL to the previous page of results, or null.&#10;&#10;Parameters:&#10;    string $group&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="hasMore;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;155;57;155;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Tells whether this group of results has any more pages of results.&#10;&#10;Parameters:&#10;    string|null $group;;d-1,-1;;b1,0;;m0;;estring|null $group;;p">
</treenode>
<treenode node="links;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;55;87;55;;;;vpos;;v;;astring;;r&#10;Description&#10;     Handles creating and displaying the&#10;&#10;Parameters:&#10;    string $group&#10;    string $template - The output template alias to render;;d-1,-1;;b1,0;;m0;;estring $group;;pstring $template;;p">
</treenode>
<treenode node="makeLinks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;82;101;82;;;;vpos;;v;;astring;;r&#10;Description&#10;     Allows for a simple, manual, form of pagination where all of the data is provided by the user. The URL is the current URI.&#10;&#10;Parameters:&#10;    integer $page&#10;    integer $perPage&#10;    integer $total&#10;    string $template - The output template alias to render;;d-1,-1;;b1,0;;m0;;einteger $page;;pinteger $perPage;;pinteger $total;;pstring $template;;p">
</treenode>
<treenode node="setPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;109;65;109;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Sets the path that an aliased group of links will use.&#10;&#10;Parameters:&#10;    string $path&#10;    string $group;;d-1,-1;;b1,0;;m0;;estring $path;;pstring $group;;p">
</treenode>
<treenode node="simpleLinks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;67;93;67;;;;vpos;;v;;astring;;r&#10;Description&#10;     Creates simple Next/Previous links, instead of full pagination.&#10;&#10;Parameters:&#10;    string $group&#10;    string $template;;d-1,-1;;b1,0;;m0;;estring $group;;pstring $template;;p">
</treenode>
<treenode node="store;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerInterface.php;f8;97;74;97;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Stores a set of pagination data for later display. Most commonly used by the model to automate the process.&#10;&#10;Parameters:&#10;    string $group&#10;    integer $page&#10;    integer $perPage&#10;    integer $total;;d-1,-1;;b1,0;;m0;;estring $group;;pinteger $page;;pinteger $perPage;;pinteger $total;;p">
</treenode>
</treenode>
<treenode node="PluginInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\PluginInterface.php;f0;29;1;32;;;;vpos;;v;;a;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\PluginInterface.php;f11;31;48;31;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;er;;p">
</treenode>
</treenode>
<treenode node="PreparedQueryInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Database\PreparedQueryInterface.php;f0;44;1;105;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface PreparedQueryInterface&#10;&#10;Description&#10;     Prepared query interface;;d0,45;;b0,0;;m0;;e">
<treenode node="close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\PreparedQueryInterface.php;f8;75;24;75;;;;vpos;;v;;a;;r&#10;Description&#10;     Explicity closes the statement.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="execute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\PreparedQueryInterface.php;f8;55;34;55;;;;vpos;;v;;aResultInterface;;r&#10;Description&#10;     Takes a new set of data and runs it against the currently prepared query. Upon success, will return a Results object.&#10;&#10;Parameters:&#10;    array $data;;d-1,-1;;b1,0;;m0;;earray $data;;p">
</treenode>
<treenode node="getErrorCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\PreparedQueryInterface.php;f8;93;36;93;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Returns the error code created while executing this statement.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getErrorMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\PreparedQueryInterface.php;f8;102;42;102;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the error message created while executing this statement.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getQueryString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\PreparedQueryInterface.php;f8;84;41;84;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the SQL that has been prepared.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="prepare;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\PreparedQueryInterface.php;f8;68;58;68;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Prepares the query against the database, and saves the connection info necessary to execute the query later.&#10;&#10;Parameters:&#10;    string $sql&#10;    array $options - Passed to the connection&apos;s prepare statement;;d-1,-1;;b1,0;;m0;;estring $sql;;parray $options;;p">
</treenode>
</treenode>
<treenode node="QueryInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f0;49;1;158;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface QueryInterface&#10;&#10;Description&#10;     Interface QueryInterface;;d0,50;;b0,0;;m0;;e">
<treenode node="getDuration;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;97;55;97;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the duration of this query during execution, or null if the query has not been executed yet.&#10;&#10;Parameters:&#10;    integer $decimals - The accuracy of the returned time;;d-1,-1;;b1,0;;m0;;einteger $decimals;;p">
</treenode>
<treenode node="getErrorCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;125;36;125;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Returns the error code created while executing this statement.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getErrorMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;134;42;134;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the error message created while executing this statement.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;71;27;71;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the final, processed query string after binding, etal has been performed.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="hasError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;116;33;116;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Reports whether this statement created an error not.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="isWriteType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;143;36;143;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Determines if the statement is a write-type query or not.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="setDuration;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;85;61;85;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Records the execution time of the statement using microtime(true) for it&apos;s start and end values. If no end value is present, will use the current time to determine total duration.&#10;&#10;Parameters:&#10;    float $start&#10;    float $end;;d-1,-1;;b1,0;;m0;;efloat $start;;pfloat $end;;p">
</treenode>
<treenode node="setError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;107;51;107;;;;vpos;;v;;a;;r&#10;Description&#10;     Stores the error description that happened for this query.&#10;&#10;Parameters:&#10;    integer $code&#10;    string $error;;d-1,-1;;b1,0;;m0;;einteger $code;;pstring $error;;p">
</treenode>
<treenode node="setQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;61;77;61;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Sets the raw query string to use for this statement.&#10;&#10;Parameters:&#10;    string $sql&#10;    mixed $binds&#10;    boolean $setEscape;;d-1,-1;;b1,0;;m0;;estring $sql;;pmixed $binds;;pboolean $setEscape;;p">
</treenode>
<treenode node="swapPrefix;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\QueryInterface.php;f8;155;55;155;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Swaps out one table prefix for a new one.&#10;&#10;Parameters:&#10;    string $orig&#10;    string $swap;;d-1,-1;;b1,0;;m0;;estring $orig;;pstring $swap;;p">
</treenode>
</treenode>
<treenode node="RendererInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\View\RendererInterface.php;f0;48;1;122;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface RendererInterface&#10;&#10;Description&#10;     Interface RendererInterface;;d0,49;;b0,0;;m0;;e">
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\RendererInterface.php;f8;65;92;65;;;;vpos;;v;;astring;;r&#10;Description&#10;     Builds the output based upon a file name and any data that has already been set.&#10;&#10;Parameters:&#10;    string $view&#10;    array $options - Reserved for 3rd-party uses since&#10;    boolean $saveData - If true, will save data for use with any other calls,;;d-1,-1;;b1,0;;m0;;estring $view;;parray $options;;pboolean $saveData;;p">
</treenode>
<treenode node="renderString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\RendererInterface.php;f8;83;98;83;;;;vpos;;v;;astring;;r&#10;Description&#10;     Builds the output based upon a string and any data that has already been set.&#10;&#10;Parameters:&#10;    string $view - The view contents&#10;    array $options - Reserved for 3rd-party uses since&#10;    boolean $saveData - If true, will save data for use with any other calls,;;d-1,-1;;b1,0;;m0;;estring $view;;parray $options;;pboolean $saveData;;p">
</treenode>
<treenode node="resetData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\RendererInterface.php;f8;119;28;119;;;;vpos;;v;;aRendererInterface;;r&#10;Description&#10;     Removes all of the view data from the system.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="setData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\RendererInterface.php;f8;96;66;96;;;;vpos;;v;;aRendererInterface;;r&#10;Description&#10;     Sets several pieces of view data at once.&#10;&#10;Parameters:&#10;    array $data&#10;    string $context - The context to escape it for: html, css, js, url;;d-1,-1;;b1,0;;m0;;earray $data;;pstring $context;;p">
</treenode>
<treenode node="setVar;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\RendererInterface.php;f8;110;76;110;;;;vpos;;v;;aRendererInterface;;r&#10;Description&#10;     Sets a single piece of view data.&#10;&#10;Parameters:&#10;    string $name&#10;    mixed $value&#10;    string $context - The context to escape it for: html, css, js, url;;d-1,-1;;b1,0;;m0;;estring $name;;pmixed $value;;pstring $context;;p">
</treenode>
</treenode>
<treenode node="RequestInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RequestInterface.php;f0;48;1;93;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface RequestInterface&#10;&#10;Description&#10;     Expected behavior of an HTTP request;;d0,49;;b0,0;;m0;;e">
<treenode node="getIPAddress;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RequestInterface.php;f8;56;39;56;;;;vpos;;v;;astring;;r&#10;Description&#10;     Gets the user&apos;s IP address.&#10;&#10;Return:&#10;   IP address;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RequestInterface.php;f8;79;55;79;;;;vpos;;v;;astring;;r&#10;Description&#10;     Get the request method.&#10;&#10;Parameters:&#10;    boolean $upper - Whether to return in upper or lower case;;d-1,-1;;b1,0;;m0;;eboolean $upper;;p">
</treenode>
<treenode node="getServer;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RequestInterface.php;f8;90;57;90;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Fetch an item from the $_SERVER array.&#10;&#10;Parameters:&#10;    string $index - Index for item to be fetched from $_SERVER&#10;    null $filter - A filter name to be applied;;d-1,-1;;b1,0;;m0;;estring $index;;pnull $filter;;p">
</treenode>
<treenode node="isValidIP;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RequestInterface.php;f8;68;66;68;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Validate an IP address&#10;&#10;Parameters:&#10;    string $ip - IP Address&#10;    string $which - IP protocol: &apos;ipv4&apos; or &apos;ipv6&apos;;;d-1,-1;;b1,0;;m0;;estring $ip;;pstring $which;;p">
</treenode>
</treenode>
<treenode node="ResetterInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\ResetterInterface.php;f0;9;1;27;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ResetterInterface&#10;&#10;Description&#10;     Interface ResetterInterface;;d0,10;;b0,0;;m0;;e">
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\ResetterInterface.php;f11;25;35;25;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the error string that should be displayed to the user.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\ResetterInterface.php;f11;18;51;18;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Send reset message to user&#10;&#10;Parameters:&#10;    User $user;;d-1,-1;;b1,0;;m0;;eUser $user;;p">
</treenode>
</treenode>
<treenode node="ResponseInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f0;55;1;273;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ResponseInterface&#10;&#10;Description&#10;     Representation of an outgoing, getServer-side response.;;d0,56;;b0,0;;m0;;e">
<treenode node="HTTP_ACCEPTED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;70;20;70;;;;vpos;;v;;a;;r202;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_ALREADY_REPORTED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;76;28;76;;;;vpos;;v;;a;;r208;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_BAD_GATEWAY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;122;23;122;;;;vpos;;v;;a;;r502;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_BAD_REQUEST;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;89;23;89;;;;vpos;;v;;a;;r400;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_CLIENT_CLOSED_REQUEST;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;118;33;118;;;;vpos;;v;;a;;r499;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_CONFLICT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;98;20;98;;;;vpos;;v;;a;;r409;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_CONTINUE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;63;20;63;;;;vpos;;v;;a;;r&#10;Description&#10;     Constants for status codes. From  https://en.wikipedia.org/wiki/List_of_HTTP_status_codes;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_CREATED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;69;19;69;;;;vpos;;v;;a;;r201;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_EARLY_HINTS;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;66;23;66;;;;vpos;;v;;a;;r103;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_EXPECTATION_FAILED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;106;30;106;;;;vpos;;v;;a;;r417;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_FAILED_DEPENDENCY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;111;29;111;;;;vpos;;v;;a;;r424;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_FORBIDDEN;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;92;21;92;;;;vpos;;v;;a;;r403;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_FOUND;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;81;17;81;;;;vpos;;v;;a;;r302;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_GATEWAY_TIMEOUT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;124;27;124;;;;vpos;;v;;a;;r504;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_GONE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;99;16;99;;;;vpos;;v;;a;;r410;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_HTTP_VERSION_NOT_SUPPORTED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;125;38;125;;;;vpos;;v;;a;;r505;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_IM_A_TEAPOT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;107;23;107;;;;vpos;;v;;a;;r418;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_IM_USED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;77;19;77;;;;vpos;;v;;a;;r226;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_INSUFFICIENT_STORAGE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;127;32;127;;;;vpos;;v;;a;;r507;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_INTERNAL_SERVER_ERROR;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;120;33;120;;;;vpos;;v;;a;;r500;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_LENGTH_REQUIRED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;100;27;100;;;;vpos;;v;;a;;r411;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_LOCKED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;110;18;110;;;;vpos;;v;;a;;r423;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_LOOP_DETECTED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;128;25;128;;;;vpos;;v;;a;;r508;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_METHOD_NOT_ALLOWED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;94;30;94;;;;vpos;;v;;a;;r405;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_MISDIRECTED_REQUEST;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;108;31;108;;;;vpos;;v;;a;;r421;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_MOVED_PERMANENTLY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;80;29;80;;;;vpos;;v;;a;;r301;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_MULTI_STATUS;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;75;24;75;;;;vpos;;v;;a;;r207;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_MULTIPLE_CHOICES;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;79;28;79;;;;vpos;;v;;a;;r300;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_NETWORK_AUTHENTICATION_REQUIRED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;130;43;130;;;;vpos;;v;;a;;r511;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_NETWORK_CONNECT_TIMEOUT_ERROR;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;131;41;131;;;;vpos;;v;;a;;r599;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_NO_CONTENT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;72;22;72;;;;vpos;;v;;a;;r204;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_NONAUTHORITATIVE_INFORMATION;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;71;40;71;;;;vpos;;v;;a;;r203;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_NOT_ACCEPTABLE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;95;26;95;;;;vpos;;v;;a;;r406;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_NOT_EXTENDED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;129;24;129;;;;vpos;;v;;a;;r510;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_NOT_FOUND;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;93;21;93;;;;vpos;;v;;a;;r404;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_NOT_IMPLEMENTED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;121;27;121;;;;vpos;;v;;a;;r501;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_NOT_MODIFIED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;83;24;83;;;;vpos;;v;;a;;r304;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_OK;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;68;14;68;;;;vpos;;v;;a;;r200;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_PARTIAL_CONTENT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;74;27;74;;;;vpos;;v;;a;;r206;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_PAYLOAD_TOO_LARGE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;102;29;102;;;;vpos;;v;;a;;r413;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_PAYMENT_REQUIRED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;91;28;91;;;;vpos;;v;;a;;r402;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_PERMANENT_REDIRECT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;87;30;87;;;;vpos;;v;;a;;r308;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_PRECONDITION_FAILED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;101;31;101;;;;vpos;;v;;a;;r412;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_PRECONDITION_REQUIRED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;114;33;114;;;;vpos;;v;;a;;r428;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_PROCESSING;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;65;22;65;;;;vpos;;v;;a;;r102;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_PROXY_AUTHENTICATION_REQUIRED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;96;41;96;;;;vpos;;v;;a;;r407;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_RANGE_NOT_SATISFIABLE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;105;33;105;;;;vpos;;v;;a;;r416;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;116;43;116;;;;vpos;;v;;a;;r431;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_REQUEST_TIMEOUT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;97;27;97;;;;vpos;;v;;a;;r408;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_RESET_CONTENT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;73;25;73;;;;vpos;;v;;a;;r205;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_SEE_OTHER;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;82;21;82;;;;vpos;;v;;a;;r303;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_SERVICE_UNAVAILABLE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;123;31;123;;;;vpos;;v;;a;;r503;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_SWITCH_PROXY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;85;24;85;;;;vpos;;v;;a;;r306;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_SWITCHING_PROTOCOLS;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;64;31;64;;;;vpos;;v;;a;;r101;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_TEMPORARY_REDIRECT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;86;30;86;;;;vpos;;v;;a;;r307;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_TOO_EARLY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;112;21;112;;;;vpos;;v;;a;;r425;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_TOO_MANY_REQUESTS;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;115;29;115;;;;vpos;;v;;a;;r429;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_UNAUTHORIZED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;90;24;90;;;;vpos;;v;;a;;r401;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_UNAVAILABLE_FOR_LEGAL_REASONS;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;117;41;117;;;;vpos;;v;;a;;r451;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_UNPROCESSABLE_ENTITY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;109;32;109;;;;vpos;;v;;a;;r422;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_UNSUPPORTED_MEDIA_TYPE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;104;34;104;;;;vpos;;v;;a;;r415;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_UPGRADE_REQUIRED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;113;28;113;;;;vpos;;v;;a;;r426;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_URI_TOO_LONG;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;103;24;103;;;;vpos;;v;;a;;r414;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_USE_PROXY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;84;21;84;;;;vpos;;v;;a;;r305;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="HTTP_VARIANT_ALSO_NEGOTIATES;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f6;126;35;126;;;;vpos;;v;;a;;r506;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="getReason;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f8;174;36;174;;;;vpos;;v;;astring;;r&#10;Description&#10;     Gets the response response phrase associated with the status code.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getStatusCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f8;141;37;141;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Gets the response status code.&#10;&#10;Return:&#10;   Status code;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="noCache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f8;214;26;214;;;;vpos;;v;;a;;r&#10;Description&#10;     Sets the appropriate headers to ensure this response is not cached by the browsers.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f8;270;23;270;;;;vpos;;v;;aResponseInterface;;r&#10;Description&#10;     Sends the output to the browser.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="setCache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f8;246;46;246;;;;vpos;;v;;aResponseInterface;;r&#10;Description&#10;     A shortcut method that allows the developer to set all of the cache-control headers in one method call.&#10;&#10;Parameters:&#10;    array $options;;d-1,-1;;b1,0;;m0;;earray $options;;p">
</treenode>
<treenode node="setContentType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f8;201;72;201;;;;vpos;;v;;aResponseInterface;;r&#10;Description&#10;     Sets the Content Type header for this response with the mime type and, optionally, the charset.&#10;&#10;Parameters:&#10;    string $mime&#10;    string $charset;;d-1,-1;;b1,0;;m0;;estring $mime;;pstring $charset;;p">
</treenode>
<treenode node="setDate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f8;188;41;188;;;;vpos;;v;;aResponseInterface;;r&#10;Description&#10;     Sets the date header&#10;&#10;Parameters:&#10;    \DateTime $date;;d-1,-1;;b1,0;;m0;;e\DateTime $date;;p">
</treenode>
<treenode node="setLastModified;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f8;258;39;258;;;;vpos;;v;;a;;r&#10;Description&#10;     Sets the Last-Modified date header.&#10;&#10;Parameters:&#10;    string|\DateTime $date;;d-1,-1;;b1,0;;m0;;estring|\DateTime $date;;p">
</treenode>
<treenode node="setStatusCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ResponseInterface.php;f8;162;62;162;;;;vpos;;v;;aself;;r&#10;Description&#10;     Return an instance with the specified status code and, optionally, reason phrase.&#10;&#10;Parameters:&#10;    integer $code - The 3-digit integer result code to set&#10;    string $reason - The reason phrase to use with the;;d-1,-1;;b1,0;;m0;;einteger $code;;pstring $reason;;p">
</treenode>
</treenode>
<treenode node="ResultInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f0;44;1;263;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ResultInterface&#10;&#10;Description&#10;     Interface ResultInterface;;d0,45;;b0,0;;m0;;e">
<treenode node="dataSeek;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;260;37;260;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Moves the internal pointer to the desired offset. This is called internally before fetching results to make sure the result set starts at zero.&#10;&#10;Parameters:&#10;    integer $n;;d-1,-1;;b1,0;;m0;;einteger $n;;p">
</treenode>
<treenode node="freeResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;247;29;247;;;;vpos;;v;;avoid;;r&#10;Description&#10;     Frees the current result.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getCustomResultObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;67;57;67;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the results as an array of custom objects.&#10;&#10;Parameters:&#10;    string $className - The name of the class to use;;d-1,-1;;b1,0;;m0;;estring $className;;p">
</treenode>
<treenode node="getCustomRowObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;118;62;118;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns a row as a custom class instance.&#10;&#10;Parameters:&#10;    integer $n&#10;    string $className;;d-1,-1;;b1,0;;m0;;einteger $n;;pstring $className;;p">
</treenode>
<treenode node="getFieldCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;220;37;220;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Gets the number of fields in the result set.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;238;38;238;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Generates an array of objects representing field meta-data.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldNames;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;229;39;229;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Generates an array of column names in the result set.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getFirstRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;167;53;167;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the &quot;first&quot; row of the current results.&#10;&#10;Parameters:&#10;    string $type;;d-1,-1;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getLastRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;178;52;178;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the &quot;last&quot; row of the current results.&#10;&#10;Parameters:&#10;    string $type;;d-1,-1;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getNextRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;189;52;189;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the &quot;next&quot; row of the current results.&#10;&#10;Parameters:&#10;    string $type;;d-1,-1;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getPreviousRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;200;56;200;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the &quot;previous&quot; row of the current results.&#10;&#10;Parameters:&#10;    string $type;;d-1,-1;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;56;58;56;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Retrieve the results of the query. Typically an array of individual data rows, which can be either an &apos;array&apos;, an &apos;object&apos;, or a custom class name.&#10;&#10;Parameters:&#10;    string $type - The row type;;d-1,-1;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getResultArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;78;40;78;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Returns the results as an array of arrays.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getResultObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;89;41;89;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Returns the results as an array of objects.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;104;56;104;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Wrapper object to return a row as either an array, an object, or a custom class.&#10;&#10;Parameters:&#10;    mixed $n - The index of the results to return&#10;    string $type - The type of result object;;d-1,-1;;b1,0;;m0;;emixed $n;;pstring $type;;p">
</treenode>
<treenode node="getRowArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;131;40;131;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns a single row from the results as an array.&#10;&#10;Parameters:&#10;    integer $n;;d-1,-1;;b1,0;;m0;;einteger $n;;p">
</treenode>
<treenode node="getRowObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;144;41;144;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns a single row from the results as an object.&#10;&#10;Parameters:&#10;    integer $n;;d-1,-1;;b1,0;;m0;;einteger $n;;p">
</treenode>
<treenode node="getUnbufferedRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;211;58;211;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns an unbuffered row and move the pointer to the next row.&#10;&#10;Parameters:&#10;    string $type;;d-1,-1;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="setRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ResultInterface.php;f8;156;44;156;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Assigns an item into a particular column slot.&#10;&#10;Parameters:&#10;     $key&#10;    null $value;;d-1,-1;;b1,0;;m0;;e $key;;pnull $value;;p">
</treenode>
</treenode>
<treenode node="ROOTPATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;18;44;18;;O:\xampp\htdocs\2020\blog-4\system\bootstrap.php;f9;62;17;62;;;;vpos;;v;;a;;rrealpath(APPPATH . &apos;../&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="RouteCollectionInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f0;53;1;275;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface RouteCollectionInterface&#10;&#10;Description&#10;     Interface RouteCollectionInterface;;d0,54;;b0,0;;m0;;e">
<treenode node="add;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;65;62;65;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Adds a single route to the collection.&#10;&#10;Parameters:&#10;    string $from&#10;    array|string $to&#10;    array $options;;d-1,-1;;b1,0;;m0;;estring $from;;parray|string $to;;parray $options;;p">
</treenode>
<treenode node="addPlaceholder;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;82;69;82;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Registers a new constraint with the system. Constraints are used by the routes as placeholders for regular expressions to make defining the routes more human-friendly.&#10;&#10;Parameters:&#10;    string|array $placeholder&#10;    string $pattern;;d-1,-1;;b1,0;;m0;;estring|array $placeholder;;pstring $pattern;;p">
</treenode>
<treenode node="get404Override;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;174;33;174;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the 404 Override setting, which can be null, a closure or the controller/string.&#10;&#10;Return:&#10;   |\Closure|null;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getDefaultController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;183;39;183;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the name of the default controller. With Namespace.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getDefaultMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;192;35;192;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the name of the default method to use within the controller.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getHTTPVerb;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;228;30;228;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the current HTTP Verb being used.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getRedirectCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;272;51;272;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Grabs the HTTP status code from a redirecting Route.&#10;&#10;Parameters:&#10;    string $from;;d-1,-1;;b1,0;;m0;;estring $from;;p">
</treenode>
<treenode node="getRoutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;219;28;219;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the raw array of available routes.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="isRedirect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;261;47;261;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Determines if the route is a redirecting route.&#10;&#10;Parameters:&#10;    string $from;;d-1,-1;;b1,0;;m0;;estring $from;;p">
</treenode>
<treenode node="reverseRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;250;57;250;;;;vpos;;v;;astring;;r&#10;Description&#10;     Attempts to look up a route based on it&apos;s destination.&#10;&#10;Parameters:&#10;    string $search&#10;    array - ...$params&#10;&#10;Return:&#10;   |false;;d-1,-1;;b1,0;;m0;;estring $search;;parray;;p">
</treenode>
<treenode node="set404Override;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;164;55;164;;;;vpos;;v;;aRouteCollectionInterface;;r&#10;Description&#10;     Sets the class/method that should be called if routing doesn&apos;t find a match. It can be either a closure or the controller/method name exactly like a route is defined: Users::index&#10;&#10;Parameters:&#10;    callable|null $callable;;d-1,-1;;b1,0;;m0;;ecallable|null $callable;;p">
</treenode>
<treenode node="setAutoRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;149;48;149;;;;vpos;;v;;aRouteCollectionInterface;;r&#10;Description&#10;     If TRUE, the system will attempt to match the URI against Controllers by matching each segment against folders/files in APPPATH/Controllers, when a match wasn&apos;t found against defined routes.&#10;&#10;Parameters:&#10;    boolean $value;;d-1,-1;;b1,0;;m0;;eboolean $value;;p">
</treenode>
<treenode node="setDefaultController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;106;52;106;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Sets the default controller to use when no other controller has been specified.&#10;&#10;Parameters:&#10;     $value;;d-1,-1;;b1,0;;m0;;e $value;;p">
</treenode>
<treenode node="setDefaultMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;118;48;118;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Sets the default method to call on the controller when no other method has been set in the route.&#10;&#10;Parameters:&#10;     $value;;d-1,-1;;b1,0;;m0;;e $value;;p">
</treenode>
<treenode node="setDefaultNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;94;51;94;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Sets the default namespace to use for Controllers when no other namespace has been specified.&#10;&#10;Parameters:&#10;     $value;;d-1,-1;;b1,0;;m0;;e $value;;p">
</treenode>
<treenode node="setTranslateURIDashes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;133;51;133;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Tells the system whether to convert dashes in URI strings into underscores. In some search engines, including Google, dashes create more meaning and make it easier for the search engine to find words and meaning in the URI for better SEO. But it doesn&apos;t work well with PHP method names....&#10;&#10;Parameters:&#10;    boolean $value;;d-1,-1;;b1,0;;m0;;eboolean $value;;p">
</treenode>
<treenode node="shouldAutoRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;210;34;210;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Returns the flag that tells whether to autoRoute URI against Controllers.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="shouldTranslateURIDashes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollectionInterface.php;f8;201;43;201;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the current value of the translateURIDashes setting.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="RouterInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouterInterface.php;f0;46;1;114;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface RouterInterface&#10;&#10;Description&#10;     Expected behavior of a Router.;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouterInterface.php;f8;55;87;55;;;;vpos;;v;;a;;r&#10;Description&#10;     Stores a reference to the RouteCollection object.&#10;&#10;Parameters:&#10;    RouteCollectionInterface $routes&#10;    \CodeIgniter\HTTP\Request $request;;d-1,-1;;b1,0;;m0;;eRouteCollectionInterface $routes;;p\CodeIgniter\HTTP\Request $request;;p">
</treenode>
<treenode node="controllerName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouterInterface.php;f8;76;33;76;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the name of the matched controller.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="handle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouterInterface.php;f8;67;43;67;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Scans the URI and attempts to match the current URI to the one of the defined routes in the RouteCollection.&#10;&#10;Parameters:&#10;    string $uri;;d-1,-1;;b1,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="methodName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouterInterface.php;f8;86;29;86;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the name of the method to run in the chosen container.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="params;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouterInterface.php;f8;97;25;97;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the binds that have been matched and collected during the parsing process as an array, ready to send to instance-&gt;method(...$params).;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="setIndexPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouterInterface.php;f8;111;36;111;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Sets the value that should be used to match the index.php file. Defaults to index.php but this allows you to modify it in case your are using something like mod_rewrite to remove the page. This allows you to set it a blank.&#10;&#10;Parameters:&#10;     $page;;d-1,-1;;b1,0;;m0;;e $page;;p">
</treenode>
</treenode>
<treenode node="SECOND;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f29;33;35;33;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="SessionInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f0;44;1;250;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface SessionInterface&#10;&#10;Description&#10;     Expected behavior of a session container used with CodeIgniter.;;d0,45;;b0,0;;m0;;e">
<treenode node="destroy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;59;26;59;;;;vpos;;v;;a;;r&#10;Description&#10;     Destroys the current session.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;92;40;92;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Get user data that has been set in the session.&#10;&#10;Parameters:&#10;    string $key - Identifier of the session property to retrieve&#10;&#10;Return:&#10;   |null    The property value(s);;d-1,-1;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;145;49;145;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Retrieve one or more items of flash data from the session.&#10;&#10;Parameters:&#10;    string $key - Property identifier&#10;&#10;Return:&#10;   |null The requested property value, or an associative;;d-1,-1;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getFlashKeys;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;183;38;183;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Retrieve all of the keys for session data marked as flashdata.&#10;&#10;Return:&#10;   The property names of all flashdata;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;206;48;206;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns either a single piece of tempdata, or all temp data currently in the session.&#10;&#10;Parameters:&#10;    string $key - Session data key&#10;&#10;Return:&#10;   Session data value or null if not found;;d-1,-1;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getTempKeys;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;247;37;247;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Retrieve the keys of all session data that have been marked as temporary data.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="has;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;103;39;103;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Returns whether an index exists in the session array.&#10;&#10;Parameters:&#10;    string $key - Identifier of the session property we are interested in;;d-1,-1;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="keepFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;154;36;154;;;;vpos;;v;;a;;r&#10;Description&#10;     Keeps a single piece of flash data alive for one more request.&#10;&#10;Parameters:&#10;    array|string $key - Property identifier or array of them;;d-1,-1;;b1,0;;m0;;earray|string $key;;p">
</treenode>
<treenode node="markAsFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;165;38;165;;;;vpos;;v;;aFalse;;r&#10;Description&#10;     Mark a session property or properties as flashdata.&#10;&#10;Parameters:&#10;    string|array $key - Property identifier or array of them&#10;&#10;Return:&#10;   if any of the properties are not already set;;d-1,-1;;b1,0;;m0;;estring|array $key;;p">
</treenode>
<treenode node="markAsTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;228;53;228;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Mark one of more pieces of data as being temporary, meaning that it has a set lifespan within the session.&#10;&#10;Parameters:&#10;    string|array $key - Property identifier or array of them&#10;    integer $ttl - Time to live, in seconds&#10;&#10;Return:&#10;   False if any of the properties were not set;;d-1,-1;;b1,0;;m0;;estring|array $key;;pinteger $ttl;;p">
</treenode>
<treenode node="regenerate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;52;50;52;;;;vpos;;v;;a;;r&#10;Description&#10;     Regenerates the session ID.&#10;&#10;Parameters:&#10;    boolean $destroy - Should old session data be destroyed?;;d-1,-1;;b1,0;;m0;;eboolean $destroy;;p">
</treenode>
<treenode node="remove;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;116;29;116;;;;vpos;;v;;a;;r&#10;Description&#10;     Remove one or more session properties.&#10;&#10;Parameters:&#10;    string|array $key - Identifier of the session property or properties to remove;;d-1,-1;;b1,0;;m0;;estring|array $key;;p">
</treenode>
<treenode node="removeTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;215;44;215;;;;vpos;;v;;a;;r&#10;Description&#10;     Removes a single piece of temporary data from the session.&#10;&#10;Parameters:&#10;    string $key - Session data key;;d-1,-1;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="set;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;75;42;75;;;;vpos;;v;;a;;r&#10;Description&#10;     Sets user data into the session.&#10;&#10;Parameters:&#10;    string|array $data - Property name or associative array of properties&#10;    string|array $value - Property value if single key provided;;d-1,-1;;b1,0;;m0;;estring|array $data;;pstring|array $value;;p">
</treenode>
<treenode node="setFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;132;51;132;;;;vpos;;v;;a;;r&#10;Description&#10;     Sets data into the session that will only last for a single request. Perfect for use with single-use status update messages.&#10;&#10;Parameters:&#10;    string|array $data - Property identifier or associative array of properties&#10;    string|array $value - Property value if $data is a scalar;;d-1,-1;;b1,0;;m0;;estring|array $data;;pstring|array $value;;p">
</treenode>
<treenode node="setTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;195;66;195;;;;vpos;;v;;a;;r&#10;Description&#10;     Sets new data into the session, and marks it as temporary data with a set lifespan.&#10;&#10;Parameters:&#10;    string|array $data - Session data key or associative array of items&#10;    mixed $value - Value to store&#10;    integer $ttl - Time-to-live in seconds;;d-1,-1;;b1,0;;m0;;estring|array $data;;pmixed $value;;pinteger $ttl;;p">
</treenode>
<treenode node="unmarkFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;174;38;174;;;;vpos;;v;;a;;r&#10;Description&#10;     Unmark data in the session as flashdata.&#10;&#10;Parameters:&#10;    string|array $key - Property identifier or array of them;;d-1,-1;;b1,0;;m0;;estring|array $key;;p">
</treenode>
<treenode node="unmarkTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\SessionInterface.php;f8;238;37;238;;;;vpos;;v;;a;;r&#10;Description&#10;     Unmarks temporary data in the session, effectively removing its lifespan and allowing it to live as long as the session does.&#10;&#10;Parameters:&#10;    string|array $key - Property identifier or array of them;;d-1,-1;;b1,0;;m0;;estring|array $key;;p">
</treenode>
</treenode>
<treenode node="SHOW_DEBUG_BACKTRACE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Boot\testing.php;f43;21;63;21;;O:\xampp\htdocs\2020\blog-4\app\Config\Boot\development.php;f43;20;63;20;;;;vpos;;v;;a;;rtrue;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="SUPPORTPATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;22;47;22;;;;vpos;;v;;a;;rrealpath(TESTPATH . &apos;_support/&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="SYSTEMPATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;17;46;17;;O:\xampp\htdocs\2020\blog-4\system\bootstrap.php;f9;70;19;70;;;;vpos;;v;;a;;rrealpath($paths-&gt;systemDirectory;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="TabPluginInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\TabPluginInterface.php;f0;29;1;32;;;;vpos;;v;;aPluginInterface;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="renderTab;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\TabPluginInterface.php;f11;31;48;31;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="templates/10262020/partials/footer;PHP:PHP Include;O:\xampp\htdocs\2020\blog-4\app\Views\templates\10262020\layouts\default.php;f20;40;54;40;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="templates/10262020/partials/form_default;PHP:PHP Include;O:\xampp\htdocs\2020\blog-4\app\Views\templates\10262020\index.php;f19;4;59;4;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="templates/10262020/partials/header;PHP:PHP Include;O:\xampp\htdocs\2020\blog-4\app\Views\templates\10262020\layouts\default.php;f20;26;54;26;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="templates/10262020/partials/sidebar.php;PHP:PHP Include;O:\xampp\htdocs\2020\blog-4\app\Views\templates\10262020\layouts\default.php;f24;35;63;35;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="TESTPATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;21;44;21;;O:\xampp\htdocs\2020\blog-4\system\bootstrap.php;f9;86;17;86;;;;vpos;;v;;a;;rrealpath(HOMEPATH . &apos;tests/&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="ThrottlerInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Throttle\ThrottlerInterface.php;f0;43;1;75;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ThrottlerInterface&#10;&#10;Description&#10;     Expected behavior of a Throttler;;d0,44;;b0,0;;m0;;e">
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Throttle\ThrottlerInterface.php;f8;64;75;64;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Restricts the number of requests made by a single key within a set number of seconds.&#10;&#10;Parameters:&#10;    string $key - The name to use as the &quot;bucket&quot; name&#10;    integer $capacity - The number of requests the &quot;bucket&quot; can hold&#10;    integer $seconds - The time it takes the &quot;bucket&quot; to completely refill&#10;    integer $cost - The number of tokens this action uses;;d-1,-1;;b1,0;;m0;;estring $key;;pinteger $capacity;;pinteger $seconds;;pinteger $cost;;p">
</treenode>
<treenode node="getTokenTime;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Throttle\ThrottlerInterface.php;f8;74;36;74;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Returns the number of seconds until the next available token will be released for usage.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="UploadedFileInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f0;50;1;202;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface UploadedFileInterface&#10;&#10;Description&#10;     Value object representing a single file uploaded through an HTTP request. Used by the IncomingRequest class to provide files.;;d0,51;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;62;126;62;;;;vpos;;v;;a;;r&#10;Description&#10;     Accepts the file information as would be filled in from the $_FILES array.&#10;&#10;Parameters:&#10;    string $path - The temporary location of the uploaded file&#10;    string $originalName - The client-provided filename&#10;    string $mimeType - The type of file as provided by PHP&#10;    integer $size - The size of the file, in bytes&#10;    integer $error - The error constant of the upload (one of PHP&apos;s UPLOADERRXXX constants);;d-1,-1;;b1,0;;m0;;estring $path;;pstring $originalName;;pstring $mimeType;;pinteger $size;;pinteger $error;;p">
</treenode>
<treenode node="getClientExtension;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;161;45;161;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the original file extension, based on the file name that was uploaded. This is NOT a trusted source. For a trusted version, use guessExtension() instead.&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getClientMimeType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;172;44;172;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the mime type as provided by the client. This is NOT a trusted value. For a trusted version, use getMimeType() instead.&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getDestination;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;199;97;199;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the destination path for the move operation where overwriting is not expected.&#10;&#10;Parameters:&#10;    string $destination&#10;    string $delimiter&#10;    integer $i;;d-1,-1;;b1,0;;m0;;estring $destination;;pstring $delimiter;;pinteger $i;;p">
</treenode>
<treenode node="getError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;124;32;124;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Retrieve the error associated with the uploaded file.&#10;&#10;Return:&#10;   One of PHP&apos;s UPLOAD_ERR_XXX constants;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;141;34;141;;;;vpos;;v;;astring;;r&#10;Description&#10;     Retrieve the filename sent by the client.&#10;&#10;Return:&#10;   |null The filename sent by the client or null if none;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getTempName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;150;38;150;;;;vpos;;v;;astring;;r&#10;Description&#10;     Gets the temporary filename where the file was uploaded to.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="hasMoved;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;106;33;106;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Returns whether the file has been moved or not. If it has, the move() method will not work and certain properties, like the tempName, will no longer be available.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="isValid;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;182;32;182;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Returns whether the file was uploaded successfully, based on whether it was uploaded via HTTP and has no errors.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="move;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFileInterface.php;f8;95;62;95;;;;vpos;;v;;a;;r&#10;Description&#10;     Move the uploaded file to a new location.&#10;&#10;Parameters:&#10;    string $targetPath - Path to which to move the uploaded file&#10;    string $name - the name to rename the file to;;d-1,-1;;b1,0;;m0;;estring $targetPath;;pstring $name;;p">
</treenode>
</treenode>
<treenode node="ValidationInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f0;46;1;165;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ValidationInterface&#10;&#10;Description&#10;     Expected behavior of a validator;;d0,47;;b0,0;;m0;;e">
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f8;72;70;72;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Check;s runs the validation process, returning true or false determining whether or not validation was successful.&#10;&#10;Parameters:&#10;    mixed $value - Value to validation&#10;    string $rule - Rule&#10;    string[] $errors - Errors&#10;&#10;Return:&#10;   True if valid, else false;;d-1,-1;;b1,0;;m0;;emixed $value;;pstring $rule;;pstring[] $errors;;p">
</treenode>
<treenode node="getError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f8;123;48;123;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the error for a specified $field (or empty string if not set).&#10;&#10;Parameters:&#10;    string $field;;d-1,-1;;b1,0;;m0;;estring $field;;p">
</treenode>
<treenode node="getErrors;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f8;138;35;138;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Returns the array of errors that were encountered during a run() call. The array should be in the following format:;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="hasRule;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f8;109;45;109;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Checks to see if the rule for key $field has been set or not.&#10;&#10;Parameters:&#10;    string $field;;d-1,-1;;b1,0;;m0;;estring $field;;p">
</treenode>
<treenode node="reset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f8;162;45;162;;;;vpos;;v;;a;;r&#10;Description&#10;     Resets the class to a blank slate. Should be called whenever you need to process more than one array.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f8;58;68;58;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Runs the validation process, returning true/false determining whether or not validation was successful.&#10;&#10;Parameters:&#10;    array $data - The array of data to validate&#10;    string $group - The pre-defined group of rules to apply;;d-1,-1;;b1,0;;m0;;earray $data;;pstring $group;;p">
</treenode>
<treenode node="setError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f8;150;76;150;;;;vpos;;v;;a;;r&#10;Description&#10;     Sets the error for a specific field. Used by custom validation methods.&#10;&#10;Parameters:&#10;    string $alias&#10;    string $error;;d-1,-1;;b1,0;;m0;;estring $alias;;pstring $error;;p">
</treenode>
<treenode node="setRules;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f8;98;82;98;;;;vpos;;v;;a;;r&#10;Description&#10;     Stores the rules that should be used to validate the items.&#10;&#10;Parameters:&#10;    array $rules&#10;    array $messages;;d-1,-1;;b1,0;;m0;;earray $rules;;parray $messages;;p">
</treenode>
<treenode node="withRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\ValidationInterface.php;f8;84;76;84;;;;vpos;;v;;a;;r&#10;Description&#10;     Takes a Request object and grabs the input data to use from its array values.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request;;d-1,-1;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;p">
</treenode>
</treenode>
<treenode node="ValidatorInterface;PHP:Interface Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\ValidatorInterface.php;f0;11;1;43;;;;vpos;;v;;a;;r&#10;Definition&#10;    interface ValidatorInterface&#10;&#10;Description&#10;     Interface ValidatorInterface;;d0,12;;b0,0;;m0;;e">
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\ValidatorInterface.php;f11;25;68;25;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Checks the password and returns true/false if it passes muster. Must return either true/false. True means the password passes this test and the password will be passed to any remaining validators. False will immediately stop validation process&#10;&#10;Parameters:&#10;    string $password&#10;    Entity $user;;d-1,-1;;b1,0;;m0;;estring $password;;pEntity $user;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\ValidatorInterface.php;f11;32;35;32;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the error string that should be displayed to the user.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="suggestion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\ValidatorInterface.php;f11;42;40;42;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns a suggestion that may be displayed to the user to help them choose a better password. The method is required, but a suggestion is optional. May return an empty string instead.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="VENDORPATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;24;46;24;;O:\xampp\htdocs\2020\blog-4\system\bootstrap.php;f10;151;20;151;;;;vpos;;v;;a;;rrealpath(HOMEPATH . &apos;vendor&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="WEEK;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f29;37;33;37;;;;vpos;;v;;a;;r604800;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="WRITEPATH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Test\bootstrap.php;f36;16;45;16;;O:\xampp\htdocs\2020\blog-4\system\bootstrap.php;f9;78;18;78;;;;vpos;;v;;a;;rrealpath($paths-&gt;writableDirectory;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="YEAR;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\app\Config\Constants.php;f29;39;33;39;;;;vpos;;v;;a;;r31536000;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="AbstractLogger;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\AbstractLogger.php;f9;11;1;119;;;;vpos;;v;;aLoggerInterface;;c;;r&#10;Definition&#10;    class AbstractLogger implements LoggerInterface&#10;&#10;Description&#10;     This is a simple Logger implementation that other Loggers can inherit from.;;d0,12;;b0,0;;m0;;e">
<treenode node="alert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\AbstractLogger.php;f11;35;5;38;;;;vpos;;v;;anull;;r&#10;Definition&#10;    alert($message, array $context = [])&#10;&#10;Description&#10;     Action must be taken immediately.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,36;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="critical;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\AbstractLogger.php;f11;49;5;52;;;;vpos;;v;;anull;;r&#10;Definition&#10;    critical($message, array $context = [])&#10;&#10;Description&#10;     Critical conditions.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,50;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="debug;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\AbstractLogger.php;f11;115;5;118;;;;vpos;;v;;anull;;r&#10;Definition&#10;    debug($message, array $context = [])&#10;&#10;Description&#10;     Detailed debug information.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,116;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="emergency;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\AbstractLogger.php;f11;20;5;23;;;;vpos;;v;;anull;;r&#10;Definition&#10;    emergency($message, array $context = [])&#10;&#10;Description&#10;     System is unusable.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,21;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\AbstractLogger.php;f11;62;5;65;;;;vpos;;v;;anull;;r&#10;Definition&#10;    error($message, array $context = [])&#10;&#10;Description&#10;     Runtime errors that do not require immediate action but should typically be logged and monitored.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,63;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="info;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\AbstractLogger.php;f11;103;5;106;;;;vpos;;v;;anull;;r&#10;Definition&#10;    info($message, array $context = [])&#10;&#10;Description&#10;     Interesting events.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,104;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="notice;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\AbstractLogger.php;f11;89;5;92;;;;vpos;;v;;anull;;r&#10;Definition&#10;    notice($message, array $context = [])&#10;&#10;Description&#10;     Normal but significant events.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,90;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="warning;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\AbstractLogger.php;f11;77;5;80;;;;vpos;;v;;anull;;r&#10;Definition&#10;    warning($message, array $context = [])&#10;&#10;Description&#10;     Exceptional occurrences that are not errors.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,78;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
</treenode>
<treenode node="Adminhtmlbuilder;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Libraries\Adminhtmlbuilder.php;f0;9;1;21;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Adminhtmlbuilder&#10;&#10;Description&#10;     Class Adminhtmlbuilder;;d0,10;;b0,0;;m0;;e">
<treenode node="generate_admin_sidebar;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Libraries\Adminhtmlbuilder.php;f8;16;2;19;;;;vpos;;v;;a;;r&#10;Definition&#10;    generate_admin_sidebar(array $par = [])&#10;&#10;Description&#10;     Class properties go here. ------------------------------------------------------------------- public, private, protected, static and const.;;d56,16;;b1,0;;m0;;epar;;p">
</treenode>
</treenode>
<treenode node="AlertError;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\AlertError.php;f0;6;1;9;;;;vpos;;v;;aError;;c;;r&#10;Definition&#10;    class AlertError extends \Error&#10;&#10;Description&#10;     Error: Action must be taken immediately (system/db down, etc);;d0,7;;b0,0;;m0;;e">
</treenode>
<treenode node="App;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\App.php;f0;4;1;267;;;;vpos;;v;;aBaseConfig;;c;;r;;d0,5;;b0,0;;m0;;e">
</treenode>
<treenode node="ArrayHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\ArrayHandler.php;f0;47;1;149;;;;vpos;;v;;aBaseHandler;;cSessionHandlerInterface;;c;;r&#10;Definition&#10;    class ArrayHandler extends BaseHandler implements \SessionHandlerInterface&#10;&#10;Description&#10;     Session handler using static array for storage. Intended only for use during testing.;;d0,48;;b0,0;;m0;;e">
<treenode node="close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\ArrayHandler.php;f8;111;2;114;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    close(): bool&#10;&#10;Description&#10;     Close;;d1,112;;b1,0;;m0;;e">
</treenode>
<treenode node="destroy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\ArrayHandler.php;f8;127;2;130;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    destroy($sessionID): bool&#10;&#10;Description&#10;     Destroy&#10;&#10;Parameters:&#10;    string $sessionID;;d1,128;;b1,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="gc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\ArrayHandler.php;f8;143;2;146;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    gc($maxlifetime): bool&#10;&#10;Description&#10;     Garbage Collector&#10;&#10;Parameters:&#10;    integer $maxlifetime - Maximum lifetime of sessions;;d1,144;;b1,0;;m0;;einteger $maxlifetime;;p">
</treenode>
<treenode node="open;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\ArrayHandler.php;f8;64;2;67;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    open($savePath, $name): bool&#10;&#10;Description&#10;     Open&#10;&#10;Parameters:&#10;    string $savePath - Path to session files&apos; directory&#10;    string $name - Session cookie name;;d1,65;;b1,0;;m0;;estring $savePath;;pstring $name;;p">
</treenode>
<treenode node="read;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\ArrayHandler.php;f8;80;2;83;;;;vpos;;v;;astring;;r&#10;Definition&#10;    read($sessionID): string&#10;&#10;Description&#10;     Read&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;&#10;Return:&#10;   Serialized session data;;d1,81;;b1,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="write;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\ArrayHandler.php;f8;97;2;100;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    write($sessionID, $sessionData): bool&#10;&#10;Description&#10;     Write&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;    string $sessionData - Serialized session data;;d1,98;;b1,0;;m0;;estring $sessionID;;pstring $sessionData;;p">
</treenode>
</treenode>
<treenode node="ArrayObjectPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ArrayObjectPlugin.php;f0;30;1;62;;;;vpos;;v;;aPlugin;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ArrayObjectPlugin.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ArrayObjectPlugin.php;f11;32;5;35;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ArrayObjectPlugin.php;f11;42;5;61;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="Auth;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Auth.php;f0;2;1;19;;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Config\Auth.php;f0;4;1;336;;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Collectors\Auth.php;f0;8;1;106;;;;vpos;;v;;aBaseController;;c;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Auth.php;f1;5;2;7;;;;vpos;;v;;a;;r;;d23,5;;b0,0;;m0;;e">
</treenode>
<treenode node="display;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Collectors\Auth.php;f8;59;2;83;;;;vpos;;v;;astring;;r&#10;Definition&#10;    display(): string&#10;&#10;Description&#10;     Returns the data of this collector to be formatted in the toolbar;;d1,60;;b1,0;;m0;;e">
</treenode>
<treenode node="forgoten_password;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Auth.php;f8;14;2;16;;;;vpos;;v;;a;;r;;d36,14;;b1,0;;m0;;e">
</treenode>
<treenode node="getBadgeValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Collectors\Auth.php;f8;90;33;90;;;;vpos;;v;;aint;;r&#10;Description&#10;     Gets the &quot;badge&quot; value for the button.&#10;&#10;Return:&#10;   |null ID of the current User, or null when not logged in;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getTitleDetails;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Collectors\Auth.php;f8;49;2;52;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getTitleDetails(): string&#10;&#10;Description&#10;     Returns any information that should be shown next to the title.;;d1,50;;b1,0;;m0;;e">
</treenode>
<treenode node="icon;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Collectors\Auth.php;f8;102;2;105;;;;vpos;;v;;astring;;r&#10;Definition&#10;    icon(): string&#10;&#10;Description&#10;     Display the icon.;;d1,103;;b1,0;;m0;;e">
</treenode>
<treenode node="login;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Auth.php;f8;9;2;12;;;;vpos;;v;;a;;r;;d1,10;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="AuthController;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f0;7;1;420;;;;vpos;;v;;aController;;c;;r;;d0,8;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;20;2;28;;;;vpos;;v;;a;;r;;d1,21;;b1,0;;m0;;e">
</treenode>
<treenode node="_render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f11;416;2;419;;;;vpos;;v;;a;;r;;d1,417;;b2,0;;m0;;eview;;pdata;;p">
</treenode>
<treenode node="activateAccount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;336;2;368;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    activateAccount()&#10;&#10;Description&#10;     Activate account.;;d1,337;;b1,0;;m0;;e">
</treenode>
<treenode node="attemptForgot;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;221;2;250;;;;vpos;;v;;a;;r&#10;Definition&#10;    attemptForgot()&#10;&#10;Description&#10;     Attempts to find a user account with that password and send password reset instructions to them.;;d1,222;;b1,0;;m0;;e">
</treenode>
<treenode node="attemptLogin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;61;2;100;;;;vpos;;v;;a;;r&#10;Definition&#10;    attemptLogin()&#10;&#10;Description&#10;     Attempts to verify the user&apos;s credentials through a POST request.;;d1,62;;b1,0;;m0;;e">
</treenode>
<treenode node="attemptRegister;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;142;2;198;;;;vpos;;v;;a;;r&#10;Definition&#10;    attemptRegister()&#10;&#10;Description&#10;     Attempt to register a new user.;;d1,143;;b1,0;;m0;;e">
</treenode>
<treenode node="attemptReset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;276;2;329;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    attemptReset()&#10;&#10;Description&#10;     Verifies the code with the email and saves the new password, if they all pass validation.;;d1,277;;b1,0;;m0;;e">
</treenode>
<treenode node="forgotPassword;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;207;2;215;;;;vpos;;v;;a;;r&#10;Definition&#10;    forgotPassword()&#10;&#10;Description&#10;     Displays the forgot password form.;;d1,208;;b1,0;;m0;;e">
</treenode>
<treenode node="login;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;39;2;55;;;;vpos;;v;;a;;r&#10;Definition&#10;    login()&#10;&#10;Description&#10;     Displays the login form, or redirects the user to their destination/home if they are already logged in.;;d1,40;;b1,0;;m0;;e">
</treenode>
<treenode node="logout;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;105;2;113;;;;vpos;;v;;a;;r&#10;Definition&#10;    logout()&#10;&#10;Description&#10;     Log the user out.;;d1,106;;b1,0;;m0;;e">
</treenode>
<treenode node="register;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;122;2;137;;;;vpos;;v;;a;;r&#10;Definition&#10;    register()&#10;&#10;Description&#10;     Displays the user registration page.;;d1,123;;b1,0;;m0;;e">
</treenode>
<treenode node="resendActivateAccount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;375;2;414;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    resendActivateAccount()&#10;&#10;Description&#10;     Resend activation account.;;d1,376;;b1,0;;m0;;e">
</treenode>
<treenode node="resetPassword;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Controllers\AuthController.php;f8;255;2;268;;;;vpos;;v;;a;;r&#10;Definition&#10;    resetPassword()&#10;&#10;Description&#10;     Displays the Reset Password form.;;d1,256;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="AuthenticationBase;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f0;11;1;380;;;;vpos;;v;;a;;r;;d0,12;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;38;5;41;;;;vpos;;v;;a;;r;;d4,39;;b1,0;;m0;;econfig;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;48;5;51;;;;vpos;;v;;astring;;r&#10;Definition&#10;    error()&#10;&#10;Description&#10;     Returns the current error, if any.;;d4,49;;b1,0;;m0;;e">
</treenode>
<treenode node="id;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;308;5;311;;;;vpos;;v;;aint;;r&#10;Definition&#10;    id()&#10;&#10;Description&#10;     Returns the User ID for the current logged in user.&#10;&#10;Return:&#10;   |null;;d4,309;;b1,0;;m0;;e">
</treenode>
<treenode node="isLoggedIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;126;5;143;;;;vpos;;v;;abool;;r&#10;Definition&#10;    isLoggedIn(): bool&#10;&#10;Description&#10;     Checks to see if the user is logged in.;;d4,127;;b1,0;;m0;;e">
</treenode>
<treenode node="login;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;76;5;119;;;;vpos;;v;;abool;;r&#10;Definition&#10;    login(User $user=null, bool $remember = false): bool&#10;&#10;Description&#10;     Logs a user into the system. NOTE: does not perform validation. All validation should be done prior to using the login method.&#10;&#10;Parameters:&#10;    \Myth\Auth\Entities\User $user&#10;    bool $remember;;d4,77;;b1,0;;m0;;e\Myth\Auth\Entities\User $user;;pbool $remember;;p">
</treenode>
<treenode node="loginByID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;152;5;162;;;;vpos;;v;;a;;r&#10;Definition&#10;    loginByID(int $id, bool $remember = false)&#10;&#10;Description&#10;     Logs a user into the system by their ID.&#10;&#10;Parameters:&#10;    int $id&#10;    bool $remember;;d4,153;;b1,0;;m0;;eint $id;;pbool $remember;;p">
</treenode>
<treenode node="logout;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;167;5;199;;;;vpos;;v;;a;;r&#10;Definition&#10;    logout()&#10;&#10;Description&#10;     Logs a user out of the system.;;d4,168;;b1,0;;m0;;e">
</treenode>
<treenode node="recordLoginAttempt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;212;5;221;;;;vpos;;v;;abool;;r&#10;Definition&#10;    recordLoginAttempt(string $email, string $ipAddress=null, int $userID=null, bool $success)&#10;&#10;Description&#10;     Record a login attempt&#10;&#10;Parameters:&#10;    string $email&#10;    string|null $ipAddress&#10;    int|null $userID&#10;    bool $success&#10;&#10;Return:&#10;   |int|string;;d4,213;;b1,0;;m0;;estring $email;;pstring|null $ipAddress;;pint|null $userID;;pbool $success;;p">
</treenode>
<treenode node="refreshRemember;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;269;5;300;;;;vpos;;v;;a;;r&#10;Definition&#10;    refreshRemember(int $userID, string $selector)&#10;&#10;Description&#10;     Sets a new validator for this user/selector. This allows a one-time use of remember-me tokens, but still allows a user to be remembered on multiple browsers/devices.&#10;&#10;Parameters:&#10;    int $userID&#10;    string $selector;;d4,270;;b1,0;;m0;;eint $userID;;pstring $selector;;p">
</treenode>
<treenode node="rememberUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;233;5;259;;;;vpos;;v;;a;;r&#10;Definition&#10;    rememberUser(int $userID)&#10;&#10;Description&#10;     Generates a timing-attack safe remember me token and stores the necessary info in the db and a cookie.&#10;&#10;Parameters:&#10;    int $userID;;d4,234;;b1,0;;m0;;eint $userID;;p">
</treenode>
<treenode node="retrieveUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;331;5;343;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    retrieveUser(array $wheres)&#10;&#10;Description&#10;     Grabs the current user from the database.&#10;&#10;Parameters:&#10;    array $wheres&#10;&#10;Return:&#10;   |null|object;;d4,332;;b1,0;;m0;;earray $wheres;;p">
</treenode>
<treenode node="setLoginModel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;373;5;378;;;;vpos;;v;;a;;r&#10;Definition&#10;    setLoginModel(Model $model)&#10;&#10;Description&#10;     Sets the model that should be used to record login attempts (but failed and successful).&#10;&#10;Parameters:&#10;    Model $model;;d4,374;;b1,0;;m0;;eModel $model;;p">
</treenode>
<treenode node="setUserModel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;358;5;363;;;;vpos;;v;;a;;r&#10;Definition&#10;    setUserModel(Model $model)&#10;&#10;Description&#10;     Sets the model that should be used to work with user accounts.&#10;&#10;Parameters:&#10;    \CodeIgniter\Model $model;;d4,359;;b1,0;;m0;;e\CodeIgniter\Model $model;;p">
</treenode>
<treenode node="silent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;59;5;62;;;;vpos;;v;;astring;;r&#10;Definition&#10;    silent()&#10;&#10;Description&#10;     Whether to continue instead of throwing exceptions, as defined in config.;;d4,60;;b1,0;;m0;;e">
</treenode>
<treenode node="user;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\AuthenticationBase.php;f11;319;5;322;;;;vpos;;v;;a;;r&#10;Definition&#10;    user()&#10;&#10;Description&#10;     Returns the User instance for the current logged in user.;;d4,320;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="AuthException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\AuthException.php;f0;4;1;67;;;;vpos;;v;;aDomainException;;cExceptionInterface;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="forHIBPCurlFail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\AuthException.php;f18;52;5;55;;;;vpos;;v;;aAuthException;;r&#10;Definition&#10;    forHIBPCurlFail(HTTPException $e)&#10;&#10;Description&#10;     When the cURL request (to Have I Been Pwned) in PwnedValidator throws a HTTPException it is re-thrown as this one;;d4,53;;b1,5;;m0;;ee;;p">
</treenode>
<treenode node="forInvalidFields;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\AuthException.php;f18;30;5;33;;;;vpos;;v;;aAuthException;;r&#10;Definition&#10;    forInvalidFields(string $key)&#10;&#10;Description&#10;     For when the developer passed invalid field along with &apos;password&apos; when attempting to validate a user.&#10;&#10;Parameters:&#10;    string $key;;d4,31;;b1,5;;m0;;estring $key;;p">
</treenode>
<treenode node="forInvalidModel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\AuthException.php;f18;6;5;9;;;;vpos;;v;;a;;r;;d4,7;;b1,5;;m0;;emodel;;p">
</treenode>
<treenode node="forNoEntityProvided;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\AuthException.php;f18;62;5;65;;;;vpos;;v;;aAuthException;;r&#10;Definition&#10;    forNoEntityProvided()&#10;&#10;Description&#10;     When no User Entity is passed into PasswordValidator::check();;d4,63;;b1,5;;m0;;e">
</treenode>
<treenode node="forTooManyCredentials;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\AuthException.php;f18;17;5;20;;;;vpos;;v;;aAuthException;;r&#10;Definition&#10;    forTooManyCredentials()&#10;&#10;Description&#10;     For when the developer attempts to authenticate with too many credentials.;;d4,18;;b1,5;;m0;;e">
</treenode>
<treenode node="forUnsetPasswordLength;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\AuthException.php;f18;41;5;44;;;;vpos;;v;;aAuthException;;r&#10;Definition&#10;    forUnsetPasswordLength()&#10;&#10;Description&#10;     Fires when no minimumPasswordLength has been set in the Auth config file.;;d4,42;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="AuthTestTrait;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Test\AuthTestTrait.php;f0;13;1;64;;;;vpos;;v;;a;;r&#10;Definition&#10;    trait AuthTestTrait&#10;&#10;Description&#10;     Trait AuthTestTrait;;d0,14;;b0,0;;m0;;e">
<treenode node="createAuthUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Test\AuthTestTrait.php;f11;24;2;52;;;;vpos;;v;;aUser;;r&#10;Definition&#10;    createAuthUser(bool $login = true, array $overrides = []): User&#10;&#10;Description&#10;     Creates a new faked User, optionally logging them in.&#10;&#10;Parameters:&#10;    bool $login - Whether to log in the new User&#10;    array $overrides - Overriding data for the Fabricator;;d1,25;;b2,0;;m0;;ebool $login;;parray $overrides;;p">
</treenode>
<treenode node="resetAuthServices;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Test\AuthTestTrait.php;f11;58;2;63;;;;vpos;;v;;a;;r&#10;Definition&#10;    resetAuthServices()&#10;&#10;Description&#10;     Resets the Authentication and Authorization services. Particularly helpful between feature tests.;;d1,59;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="AuthTrait;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\AuthTrait.php;f0;5;1;183;;;;vpos;;v;;a;;r;;d16,5;;b0,0;;m0;;e">
<treenode node="restrict;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\AuthTrait.php;f11;38;5;63;;;;vpos;;v;;abool;;r&#10;Definition&#10;    restrict(string $uri=null, bool $returnOnly=false)&#10;&#10;Description&#10;     Verifies that a user is logged in&#10;&#10;Parameters:&#10;    string $uri&#10;    bool $returnOnly;;d4,39;;b1,0;;m0;;estring $uri;;pbool $returnOnly;;p">
</treenode>
<treenode node="restrictToGroups;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\AuthTrait.php;f11;87;5;110;;;;vpos;;v;;abool;;r&#10;Definition&#10;    restrictToGroups($groups, $uri=null)&#10;&#10;Description&#10;     Ensures that the current user is in at least one of the passed in groups. The groups can be passed in as either ID&apos;s or group names. You can pass either a single item or an array of items.&#10;&#10;Parameters:&#10;    mixed $groups&#10;    string $uri - The URI to redirect to on fail;;d4,88;;b1,0;;m0;;emixed $groups;;pstring $uri;;p">
</treenode>
<treenode node="restrictWithPermissions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\AuthTrait.php;f11;127;5;150;;;;vpos;;v;;abool;;r&#10;Definition&#10;    restrictWithPermissions($permissions, $uri=null)&#10;&#10;Description&#10;     Ensures that the current user has at least one of the passed in permissions. The permissions can be passed in either as ID&apos;s or names. You can pass either a single item or an array of items.&#10;&#10;Parameters:&#10;     $permissions&#10;    string $uri - The URI to redirect to on fail;;d4,128;;b1,0;;m0;;e $permissions;;pstring $uri;;p">
</treenode>
<treenode node="setupAuthClasses;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\AuthTrait.php;f11;160;5;181;;;;vpos;;v;;a;;r&#10;Definition&#10;    setupAuthClasses()&#10;&#10;Description&#10;     Ensures that the Authentication and Authorization libraries are loaded and ready to go, if they are not already.;;d4,161;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Autoload;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\Autoload.php;f0;16;1;67;;;;vpos;;v;;aAutoloadConfig;;c;;r&#10;Definition&#10;    class Autoload extends AutoloadConfig&#10;&#10;Description&#10;     ------------------------------------------------------------------- AUTO-LOADER ------------------------------------------------------------------- This file defines the namespaces and class maps so the Autoloader can find the files as needed.;;d0,17;;b0,0;;m0;;e">
</treenode>
<treenode node="AutoloadConfig;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Config\AutoloadConfig.php;f0;47;1;112;;;;vpos;;v;;a;;r&#10;Definition&#10;    class AutoloadConfig&#10;&#10;Description&#10;     AUTO-LOADER;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\AutoloadConfig.php;f8;100;2;111;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct()&#10;&#10;Description&#10;     Constructor.;;d1,101;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Autoloader;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f0;79;1;434;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Autoloader&#10;&#10;Description&#10;     CodeIgniter Autoloader;;d0,80;;b0,0;;m0;;e">
<treenode node="addNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f8;176;2;203;;;;vpos;;v;;aAutoloader;;r&#10;Definition&#10;    addNamespace($namespace, string $path = null)&#10;&#10;Description&#10;     Registers namespaces with the autoloader.&#10;&#10;Parameters:&#10;    array|string $namespace&#10;    string $path;;d1,177;;b1,0;;m0;;earray|string $namespace;;pstring $path;;p">
</treenode>
<treenode node="discoverComposerNamespaces;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f11;407;2;433;;;;vpos;;v;;a;;r&#10;Definition&#10;    discoverComposerNamespaces()&#10;&#10;Description&#10;     Locates all PSR4 compatible namespaces from Composer.;;d1,408;;b2,0;;m0;;e">
</treenode>
<treenode node="getNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f8;216;2;224;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getNamespace(string $prefix = null)&#10;&#10;Description&#10;     Get namespaces with prefixes as keys and paths as values.;;d1,217;;b1,0;;m0;;eprefix;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f8;106;2;132;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize(\Config\Autoload $config, \Config\Modules $moduleConfig)&#10;&#10;Description&#10;     Reads in the configuration array (described above) and stores the valid parts that we&apos;ll need.&#10;&#10;Parameters:&#10;    \Config\Autoload $config&#10;    \Config\Modules $moduleConfig;;d1,107;;b1,0;;m0;;e\Config\Autoload $config;;p\Config\Modules $moduleConfig;;p">
</treenode>
<treenode node="loadClass;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f8;252;2;267;;;;vpos;;v;;astring;;r&#10;Definition&#10;    loadClass(string $class)&#10;&#10;Description&#10;     Loads the class file for a given class name.&#10;&#10;Parameters:&#10;    string $class - The fully qualified class name&#10;&#10;Return:&#10;   |false The mapped file on success, or boolean false;;d1,253;;b1,0;;m0;;estring $class;;p">
</treenode>
<treenode node="loadInNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f11;278;2;307;;;;vpos;;v;;astring;;r&#10;Definition&#10;    loadInNamespace(string $class)&#10;&#10;Description&#10;     Loads the class file for a given class name.&#10;&#10;Parameters:&#10;    string $class - The fully-qualified class name&#10;&#10;Return:&#10;   |false The mapped file name on success, or boolean false on fail;;d1,279;;b2,0;;m0;;estring $class;;p">
</treenode>
<treenode node="loadLegacy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f11;320;2;346;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    loadLegacy(string $class)&#10;&#10;Description&#10;     Attempts to load the class from common locations in previous version of CodeIgniter, namely &apos;app/Libraries&apos;, and &apos;app/Models&apos;.&#10;&#10;Parameters:&#10;    string $class - The class name&#10;&#10;Return:&#10;   The mapped file name on success, or boolean false on failure;;d1,321;;b2,0;;m0;;estring $class;;p">
</treenode>
<treenode node="register;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f8;139;2;164;;;;vpos;;v;;a;;r&#10;Definition&#10;    register()&#10;&#10;Description&#10;     Register the loader with the SPL autoloader stack.;;d1,140;;b1,0;;m0;;e">
</treenode>
<treenode node="removeNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f8;235;2;240;;;;vpos;;v;;aAutoloader;;r&#10;Definition&#10;    removeNamespace(string $namespace)&#10;&#10;Description&#10;     Removes a single namespace from the psr4 settings.&#10;&#10;Parameters:&#10;    string $namespace;;d1,236;;b1,0;;m0;;estring $namespace;;p">
</treenode>
<treenode node="requireFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f11;358;2;370;;;;vpos;;v;;astring;;r&#10;Definition&#10;    requireFile(string $file)&#10;&#10;Description&#10;     A central way to require a file is loaded. Split out primarily for testing purposes.&#10;&#10;Parameters:&#10;    string $file&#10;&#10;Return:&#10;   |false The filename on success, false if the file is not loaded;;d1,359;;b2,0;;m0;;estring $file;;p">
</treenode>
<treenode node="sanitizeFilename;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\Autoloader.php;f8;387;2;400;;;;vpos;;v;;astring;;r&#10;Definition&#10;    sanitizeFilename(string $filename): string&#10;&#10;Description&#10;     Sanitizes a filename, replacing spaces with dashes.&#10;&#10;Parameters:&#10;    string $filename&#10;&#10;Return:&#10;   The sanitized filename;;d1,388;;b1,0;;m0;;estring $filename;;p">
</treenode>
</treenode>
<treenode node="Base64Plugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Base64Plugin.php;f0;30;1;94;;;;vpos;;v;;aPlugin;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Base64Plugin.php;f11;51;5;54;;;;vpos;;v;;a;;r;;d4,52;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Base64Plugin.php;f11;46;5;49;;;;vpos;;v;;a;;r;;d4,47;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Base64Plugin.php;f11;56;5;93;;;;vpos;;v;;a;;r;;d4,57;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="BaseActivator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\BaseActivator.php;f0;2;1;30;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="getActivatorSettings;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\BaseActivator.php;f11;25;5;28;;;;vpos;;v;;a;;r&#10;Definition&#10;    getActivatorSettings()&#10;&#10;Description&#10;     Gets a config settings for current Activator.;;d4,26;;b1,0;;m0;;e">
</treenode>
<treenode node="setConfig;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\BaseActivator.php;f11;13;5;18;;;;vpos;;v;;a;;r&#10;Definition&#10;    setConfig($config)&#10;&#10;Description&#10;     Allows for setting a config file on the Activator.&#10;&#10;Parameters:&#10;     $config;;d4,14;;b1,0;;m0;;e $config;;p">
</treenode>
</treenode>
<treenode node="BaseBuilder;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f0;55;1;3491;;;;vpos;;v;;a;;r&#10;Definition&#10;    class BaseBuilder&#10;&#10;Description&#10;     Class BaseBuilder;;d0,56;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;278;2;299;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($tableName, ConnectionInterface &amp;$db, array $options = null)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    string|array $tableName&#10;    \CodeIgniter\Database\ConnectionInterface $db&#10;    array $options;;d1,279;;b1,0;;m0;;estring|array $tableName;;p\CodeIgniter\Database\ConnectionInterface $db;;parray $options;;p">
</treenode>
<treenode node="_delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2904;2;2907;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _delete(string $table): string&#10;&#10;Description&#10;     Delete statement&#10;&#10;Parameters:&#10;    string $table - The table name;;d1,2905;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_fromTables;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2374;2;2377;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _fromTables(): string&#10;&#10;Description&#10;     FROM tables;;d1,2375;;b2,0;;m0;;e">
</treenode>
<treenode node="_insert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2300;2;2303;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _insert(string $table, array $keys, array $unescapedKeys): string&#10;&#10;Description&#10;     Insert statement&#10;&#10;Parameters:&#10;    string $table - The table name&#10;    array $keys - The insert keys&#10;    array $unescapedKeys - The insert values;;d1,2301;;b2,0;;m0;;estring $table;;parray $keys;;parray $unescapedKeys;;p">
</treenode>
<treenode node="_insertBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2116;2;2119;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _insertBatch(string $table, array $keys, array $values): string&#10;&#10;Description&#10;     Insert batch statement&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    array $keys - INSERT keys&#10;    array $values - INSERT values;;d1,2117;;b2,0;;m0;;estring $table;;parray $keys;;parray $values;;p">
</treenode>
<treenode node="_like;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;1255;2;1308;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    _like($field, string $match = &apos;&apos;, string $type = &apos;AND &apos;, string $side = &apos;both&apos;, string $not = &apos;&apos;, bool $escape = null, bool $insensitiveSearch = false, string $clause = &apos;QBWhere&apos;)&#10;&#10;Description&#10;     Internal LIKE&#10;&#10;Parameters:&#10;    mixed $field&#10;    string $match&#10;    string $type&#10;    string $side&#10;    string $not&#10;    boolean $escape&#10;    boolean $insensitiveSearch - IF true, will force a case-insensitive search&#10;    string $clause - (Internal use only);;d1,1256;;b2,0;;m0;;emixed $field;;pstring $match;;pstring $type;;pstring $side;;pstring $not;;pboolean $escape;;pboolean $insensitiveSearch;;pstring $clause;;p">
</treenode>
<treenode node="_like_statement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;1323;2;1333;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _like_statement(string $prefix = null, string $column, string $not = null, string $bind, bool $insensitiveSearch = false): string&#10;&#10;Description&#10;     Platform independent LIKE statement builder.&#10;&#10;Parameters:&#10;    string $prefix&#10;    string $column&#10;    string $not&#10;    string $bind&#10;    boolean $insensitiveSearch&#10;&#10;Return:&#10;   $like_statement;;d1,1324;;b2,0;;m0;;estring $prefix;;pstring $column;;pstring $not;;pstring $bind;;pboolean $insensitiveSearch;;p">
</treenode>
<treenode node="_limit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;1725;2;1728;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _limit(string $sql, bool $offsetIgnore = false): string&#10;&#10;Description&#10;     LIMIT string&#10;&#10;Parameters:&#10;    string $sql - SQL Query;;d1,1726;;b2,0;;m0;;esql;;poffsetIgnore;;p">
</treenode>
<treenode node="_replace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2357;2;2360;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _replace(string $table, array $keys, array $values): string&#10;&#10;Description&#10;     Replace statement&#10;&#10;Parameters:&#10;    string $table - The table name&#10;    array $keys - The insert keys&#10;    array $values - The insert values;;d1,2358;;b2,0;;m0;;estring $table;;parray $keys;;parray $values;;p">
</treenode>
<treenode node="_truncate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2771;2;2774;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _truncate(string $table): string&#10;&#10;Description&#10;     Truncate statement&#10;&#10;Parameters:&#10;    string $table - The table name;;d1,2772;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_update;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2483;2;2496;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _update(string $table, array $values): string&#10;&#10;Description&#10;     Update statement&#10;&#10;Parameters:&#10;    string $table - the Table name&#10;    array $values - the Update data;;d1,2484;;b2,0;;m0;;estring $table;;parray $values;;p">
</treenode>
<treenode node="_updateBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2624;2;2653;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _updateBatch(string $table, array $values, string $index): string&#10;&#10;Description&#10;     Update_Batch statement&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    array $values - Update data&#10;    string $index - WHERE key;;d1,2625;;b2,0;;m0;;estring $table;;parray $values;;pstring $index;;p">
</treenode>
<treenode node="_whereIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;1008;2;1064;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    _whereIn(string $key = null, $values = null, bool $not = false, string $type = &apos;AND &apos;, bool $escape = null, string $clause = &apos;QBWhere&apos;)&#10;&#10;Description&#10;     Internal WHERE IN&#10;&#10;Parameters:&#10;    string $key - The field to search&#10;    array|Closure $values - The values searched on, or anonymous function with subquery&#10;    boolean $not - If the statement would be IN or NOT IN&#10;    string $type&#10;    boolean $escape&#10;    string $clause - (Internal use only);;d1,1009;;b2,0;;m0;;estring $key;;parray|Closure $values;;pboolean $not;;pstring $type;;pboolean $escape;;pstring $clause;;p">
</treenode>
<treenode node="batchObjectToArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3243;2;3268;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    batchObjectToArray($object)&#10;&#10;Description&#10;     Object to Array&#10;&#10;Parameters:&#10;    mixed $object;;d1,3244;;b2,0;;m0;;emixed $object;;p">
</treenode>
<treenode node="cleanClone;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3485;2;3488;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    cleanClone()&#10;&#10;Description&#10;     Returns a clone of a Base Builder with reset query builder values.;;d1,3486;;b2,0;;m0;;e">
</treenode>
<treenode node="compileFinalQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;1825;2;1836;;;;vpos;;v;;astring;;r&#10;Definition&#10;    compileFinalQuery(string $sql): string&#10;&#10;Description&#10;     Returns a finalized, compiled query string with the bindings inserted and prefixes swapped out.&#10;&#10;Parameters:&#10;    string $sql;;d1,1826;;b2,0;;m0;;estring $sql;;p">
</treenode>
<treenode node="compileGroupBy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3142;2;3162;;;;vpos;;v;;astring;;r&#10;Definition&#10;    compileGroupBy(): string&#10;&#10;Description&#10;     Compile GROUP BY&#10;&#10;Return:&#10;   SQL statement;;d1,3143;;b2,0;;m0;;e">
</treenode>
<treenode node="compileIgnore;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3031;2;3043;;;;vpos;;v;;astring;;r&#10;Definition&#10;    compileIgnore(string $statement)&#10;&#10;Description&#10;     Compile Ignore Statement&#10;&#10;Parameters:&#10;    string $statement;;d1,3032;;b2,0;;m0;;estring $statement;;p">
</treenode>
<treenode node="compileOrderBy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3177;2;3199;;;;vpos;;v;;astring;;r&#10;Definition&#10;    compileOrderBy(): string&#10;&#10;Description&#10;     Compile ORDER BY&#10;&#10;Return:&#10;   SQL statement;;d1,3178;;b2,0;;m0;;e">
</treenode>
<treenode node="compileSelect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2964;2;3017;;;;vpos;;v;;astring;;r&#10;Definition&#10;    compileSelect($select_override = false): string&#10;&#10;Description&#10;     Compile the SELECT statement&#10;&#10;Parameters:&#10;    mixed $select_override;;d1,2965;;b2,0;;m0;;emixed $select_override;;p">
</treenode>
<treenode node="compileWhereHaving;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3060;2;3127;;;;vpos;;v;;astring;;r&#10;Definition&#10;    compileWhereHaving(string $qb_key): string&#10;&#10;Description&#10;     Compile WHERE, HAVING statements&#10;&#10;Parameters:&#10;    string $qb_key - &apos;QBWhere&apos; or &apos;QBHaving&apos;&#10;&#10;Return:&#10;   SQL statement;;d1,3061;;b2,0;;m0;;estring $qb_key;;p">
</treenode>
<treenode node="countAll;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1884;2;1910;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    countAll(bool $reset = true)&#10;&#10;Description&#10;     &quot;Count All&quot; query&#10;&#10;Parameters:&#10;    boolean $reset - Are we want to clear query builder values?&#10;&#10;Return:&#10;   |string when $test = true;;d1,1885;;b1,0;;m0;;eboolean $reset;;p">
</treenode>
<treenode node="countAllResults;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1924;2;1976;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    countAllResults(bool $reset = true)&#10;&#10;Description&#10;     &quot;Count All Results&quot; query&#10;&#10;Parameters:&#10;    boolean $reset&#10;&#10;Return:&#10;   |string when $test = true;;d1,1925;;b1,0;;m0;;eboolean $reset;;p">
</treenode>
<treenode node="createAliasFromTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;542;2;552;;;;vpos;;v;;astring;;r&#10;Definition&#10;    createAliasFromTable(string $item): string&#10;&#10;Description&#10;     Determines the alias name based on the table&#10;&#10;Parameters:&#10;    string $item;;d1,543;;b2,0;;m0;;estring $item;;p">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2884;2;2891;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    decrement(string $column, int $value = 1)&#10;&#10;Description&#10;     Decrements a numeric column by the specified value.&#10;&#10;Parameters:&#10;    string $column&#10;    integer $value;;d1,2885;;b1,0;;m0;;estring $column;;pinteger $value;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2810;2;2853;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    delete($where = &apos;&apos;, int $limit = null, bool $reset_data = true)&#10;&#10;Description&#10;     Delete&#10;&#10;Parameters:&#10;    mixed $where - The where clause&#10;    integer $limit - The limit clause&#10;    boolean $reset_data;;d1,2811;;b1,0;;m0;;emixed $where;;pinteger $limit;;pboolean $reset_data;;p">
</treenode>
<treenode node="distinct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;565;2;570;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    distinct(bool $val = true)&#10;&#10;Description&#10;     DISTINCT&#10;&#10;Parameters:&#10;    boolean $val;;d1,566;;b1,0;;m0;;eboolean $val;;p">
</treenode>
<treenode node="emptyTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2714;2;2728;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    emptyTable()&#10;&#10;Description&#10;     Empty Table&#10;&#10;Return:&#10;   TRUE on success, FALSE on failure;;d1,2715;;b1,0;;m0;;e">
</treenode>
<treenode node="from;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;584;2;617;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    from($from, bool $overwrite = false)&#10;&#10;Description&#10;     From&#10;&#10;Parameters:&#10;    mixed $from - can be a string or array&#10;    boolean $overwrite - Should we remove the first table existing?;;d1,585;;b1,0;;m0;;emixed $from;;pboolean $overwrite;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1850;2;1870;;;;vpos;;v;;aResultInterface;;r&#10;Definition&#10;    get(int $limit = null, int $offset = 0, bool $reset = true)&#10;&#10;Description&#10;     Get&#10;&#10;Parameters:&#10;    integer $limit - The limit clause&#10;    integer $offset - The offset clause&#10;    boolean $reset - Are we want to clear query builder values?;;d1,1851;;b1,0;;m0;;einteger $limit;;pinteger $offset;;pboolean $reset;;p">
</treenode>
<treenode node="getBinds;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;325;2;328;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getBinds(): array&#10;&#10;Description&#10;     Returns an array of bind values and their named parameters for binding in the Query object later.;;d1,326;;b1,0;;m0;;e">
</treenode>
<treenode node="getCompiledDelete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2787;2;2794;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getCompiledDelete(bool $reset = true): string&#10;&#10;Description&#10;     Get DELETE query string&#10;&#10;Parameters:&#10;    boolean $reset - TRUE: reset QB values;s FALSE: leave QB values alone;;d1,2788;;b1,0;;m0;;eboolean $reset;;p">
</treenode>
<treenode node="getCompiledInsert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2191;2;2210;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getCompiledInsert(bool $reset = true): string&#10;&#10;Description&#10;     Get INSERT query string&#10;&#10;Parameters:&#10;    boolean $reset - TRUE: reset QB values;s FALSE: leave QB values alone;;d1,2192;;b1,0;;m0;;eboolean $reset;;p">
</treenode>
<treenode node="getCompiledQBWhere;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1986;2;1989;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getCompiledQBWhere()&#10;&#10;Description&#10;     Get compiled &apos;where&apos; condition string;;d1,1987;;b1,0;;m0;;e">
</treenode>
<treenode node="getCompiledSelect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1803;2;1813;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getCompiledSelect(bool $reset = true): string&#10;&#10;Description&#10;     Get SELECT query string&#10;&#10;Parameters:&#10;    boolean $reset - TRUE: resets QB values;s FALSE: leave QB values alone;;d1,1804;;b1,0;;m0;;eboolean $reset;;p">
</treenode>
<treenode node="getCompiledUpdate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2390;2;2405;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getCompiledUpdate(bool $reset = true): string&#10;&#10;Description&#10;     Get UPDATE query string&#10;&#10;Parameters:&#10;    boolean $reset - TRUE: reset QB values;s FALSE: leave QB values alone;;d1,2391;;b1,0;;m0;;eboolean $reset;;p">
</treenode>
<treenode node="getOperator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3412;2;3436;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getOperator(string $str, bool $list = false)&#10;&#10;Description&#10;     Returns the SQL string operator&#10;&#10;Parameters:&#10;    string $str&#10;    boolean $list;;d1,3413;;b2,0;;m0;;estring $str;;pboolean $list;;p">
</treenode>
<treenode node="getSetData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1780;2;1790;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getSetData(bool $clean = false): array&#10;&#10;Description&#10;     Returns the previously set() data, alternatively resetting it if needed.&#10;&#10;Parameters:&#10;    boolean $clean;;d1,1781;;b1,0;;m0;;eboolean $clean;;p">
</treenode>
<treenode node="getWhere;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2004;2;2029;;;;vpos;;v;;aResultInterface;;r&#10;Definition&#10;    getWhere($where = null, int $limit = null, ?int $offset = 0, bool $reset = true)&#10;&#10;Description&#10;     Get_Where&#10;&#10;Parameters:&#10;    string|array $where - Where condition&#10;    integer $limit - Limit value&#10;    integer $offset - Offset value&#10;    boolean $reset - Are we want to clear query builder values?;;d1,2005;;b1,0;;m0;;estring|array $where;;pinteger $limit;;pinteger $offset;;pboolean $reset;;p">
</treenode>
<treenode node="groupBy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1540;2;1565;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    groupBy($by, bool $escape = null)&#10;&#10;Description&#10;     GROUP BY&#10;&#10;Parameters:&#10;    string|array $by&#10;    boolean $escape;;d1,1541;;b1,0;;m0;;estring|array $by;;pboolean $escape;;p">
</treenode>
<treenode node="groupEnd;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1390;2;1393;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    groupEnd()&#10;&#10;Description&#10;     Ends a query group;;d1,1391;;b1,0;;m0;;e">
</treenode>
<treenode node="groupEndPrepare;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;1491;2;1502;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    groupEndPrepare(string $clause = &apos;QBWhere&apos;)&#10;&#10;Description&#10;     Prepate a query group end.&#10;&#10;Parameters:&#10;    string $clause;;d1,1492;;b2,0;;m0;;estring $clause;;p">
</treenode>
<treenode node="groupGetType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;1519;2;1528;;;;vpos;;v;;astring;;r&#10;Definition&#10;    groupGetType(string $type): string&#10;&#10;Description&#10;     Group_get_type&#10;&#10;Parameters:&#10;    string $type;;d1,1520;;b2,0;;m0;;estring $type;;p">
</treenode>
<treenode node="groupStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1342;2;1345;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    groupStart()&#10;&#10;Description&#10;     Starts a query group.;;d1,1343;;b1,0;;m0;;e">
</treenode>
<treenode node="groupStartPrepare;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;1466;2;1480;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    groupStartPrepare(string $not = &apos;&apos;, string $type = &apos;AND &apos;, string $clause = &apos;QBWhere&apos;)&#10;&#10;Description&#10;     Prepate a query group start.&#10;&#10;Parameters:&#10;    string $not&#10;    string $type&#10;    string $clause;;d1,1467;;b2,0;;m0;;estring $not;;pstring $type;;pstring $clause;;p">
</treenode>
<treenode node="hasOperator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3397;2;3400;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasOperator(string $str): bool&#10;&#10;Description&#10;     Tests whether the string has an SQL operator&#10;&#10;Parameters:&#10;    string $str;;d1,3398;;b2,0;;m0;;estring $str;;p">
</treenode>
<treenode node="having;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1580;2;1583;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    having($key, $value = null, bool $escape = null)&#10;&#10;Description&#10;     HAVING&#10;&#10;Parameters:&#10;    string|array $key&#10;    mixed $value&#10;    boolean $escape;;d1,1581;;b1,0;;m0;;estring|array $key;;pmixed $value;;pboolean $escape;;p">
</treenode>
<treenode node="havingGroupEnd;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1450;2;1453;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    havingGroupEnd()&#10;&#10;Description&#10;     Ends a query group for HAVING clause.;;d1,1451;;b1,0;;m0;;e">
</treenode>
<treenode node="havingGroupStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1402;2;1405;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    havingGroupStart()&#10;&#10;Description&#10;     Starts a query group for HAVING clause.;;d1,1403;;b1,0;;m0;;e">
</treenode>
<treenode node="havingIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;926;2;929;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    havingIn(string $key = null, $values = null, bool $escape = null)&#10;&#10;Description&#10;     HAVING IN&#10;&#10;Parameters:&#10;    string $key - The field to search&#10;    array|string|Closure $values - The values searched on, or anonymous function with subquery&#10;    boolean $escape;;d1,927;;b1,0;;m0;;estring $key;;parray|string|Closure $values;;pboolean $escape;;p">
</treenode>
<treenode node="havingLike;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1165;2;1168;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    havingLike($field, string $match = &apos;&apos;, string $side = &apos;both&apos;, bool $escape = null, bool $insensitiveSearch = false)&#10;&#10;Description&#10;     LIKE with HAVING clause&#10;&#10;Parameters:&#10;    mixed $field&#10;    string $match&#10;    string $side&#10;    boolean $escape;;d1,1166;;b1,0;;m0;;efield;;pmatch;;pside;;pescape;;pinsensitiveSearch;;p">
</treenode>
<treenode node="havingNotIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;964;2;967;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    havingNotIn(string $key = null, $values = null, bool $escape = null)&#10;&#10;Description&#10;     HAVING NOT IN&#10;&#10;Parameters:&#10;    string $key - The field to search&#10;    array|string|Closure $values - The values searched on, or anonymous function with subquery&#10;    boolean $escape;;d1,965;;b1,0;;m0;;estring $key;;parray|string|Closure $values;;pboolean $escape;;p">
</treenode>
<treenode node="ignore;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;342;2;347;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    ignore(bool $ignore = true)&#10;&#10;Description&#10;     Ignore&#10;&#10;Parameters:&#10;    boolean $ignore;;d1,343;;b1,0;;m0;;eboolean $ignore;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2865;2;2872;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    increment(string $column, int $value = 1)&#10;&#10;Description&#10;     Increments a numeric column by the specified value.&#10;&#10;Parameters:&#10;    string $column&#10;    integer $value;;d1,2866;;b1,0;;m0;;estring $column;;pinteger $value;;p">
</treenode>
<treenode node="insert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2226;2;2257;;;;vpos;;v;;aBaseResult;;r&#10;Definition&#10;    insert(array $set = null, bool $escape = null)&#10;&#10;Description&#10;     Insert&#10;&#10;Parameters:&#10;    array $set - An associative array of insert values&#10;    boolean $escape - Whether to escape values and identifiers&#10;&#10;Return:&#10;   |Query|false;;d1,2227;;b1,0;;m0;;earray $set;;pboolean $escape;;p">
</treenode>
<treenode node="insertBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2045;2;2101;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    insertBatch(array $set = null, bool $escape = null, int $batchSize = 100)&#10;&#10;Description&#10;     Insert_Batch&#10;&#10;Parameters:&#10;    array $set - An associative array of insert values&#10;    boolean $escape - Whether to escape values and identifiers&#10;    integer $batchSize - Batch size&#10;&#10;Return:&#10;   Number of rows inserted or FALSE on failure;;d1,2046;;b1,0;;m0;;earray $set;;pboolean $escape;;pinteger $batchSize;;p">
</treenode>
<treenode node="isLiteral;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3281;2;3300;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isLiteral(string $str): bool&#10;&#10;Description&#10;     Is literal&#10;&#10;Parameters:&#10;    string $str;;d1,3282;;b2,0;;m0;;estring $str;;p">
</treenode>
<treenode node="join;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;633;2;706;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    join(string $table, string $cond, string $type = &apos;&apos;, bool $escape = null)&#10;&#10;Description&#10;     JOIN&#10;&#10;Parameters:&#10;    string $table&#10;    string $cond - The join condition&#10;    string $type - The type of join&#10;    boolean $escape - Whether not to try to escape identifiers;;d1,634;;b1,0;;m0;;estring $table;;pstring $cond;;pstring $type;;pboolean $escape;;p">
</treenode>
<treenode node="like;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1082;2;1085;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    like($field, string $match = &apos;&apos;, string $side = &apos;both&apos;, bool $escape = null, bool $insensitiveSearch = false)&#10;&#10;Description&#10;     LIKE&#10;&#10;Parameters:&#10;    mixed $field&#10;    string $match&#10;    string $side&#10;    boolean $escape&#10;    boolean $insensitiveSearch - IF true, will force a case-insensitive search;;d1,1083;;b1,0;;m0;;emixed $field;;pstring $match;;pstring $side;;pboolean $escape;;pboolean $insensitiveSearch;;p">
</treenode>
<treenode node="limit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1680;2;1693;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    limit(int $value = null, ?int $offset = 0)&#10;&#10;Description&#10;     LIMIT&#10;&#10;Parameters:&#10;    integer $value - LIMIT value&#10;    integer $offset - OFFSET value;;d1,1681;;b1,0;;m0;;einteger $value;;pinteger $offset;;p">
</treenode>
<treenode node="maxMinAvgSum;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;501;2;531;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    maxMinAvgSum(string $select = &apos;&apos;, string $alias = &apos;&apos;, string $type = &apos;MAX&apos;)&#10;&#10;Description&#10;     SELECT [MAX|MIN|AVG|SUM|COUNT]()&#10;&#10;Parameters:&#10;    string $select - Field name&#10;    string $alias&#10;    string $type;;d1,502;;b2,0;;m0;;estring $select;;pstring $alias;;pstring $type;;p">
</treenode>
<treenode node="notGroupStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1366;2;1369;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    notGroupStart()&#10;&#10;Description&#10;     Starts a query group, but NOTs the group;;d1,1367;;b1,0;;m0;;e">
</treenode>
<treenode node="notHavingGroupStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1426;2;1429;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    notHavingGroupStart()&#10;&#10;Description&#10;     Starts a query group for HAVING clause, but NOTs the group.;;d1,1427;;b1,0;;m0;;e">
</treenode>
<treenode node="notHavingLike;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1185;2;1188;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    notHavingLike($field, string $match = &apos;&apos;, string $side = &apos;both&apos;, bool $escape = null, bool $insensitiveSearch = false)&#10;&#10;Description&#10;     NOT LIKE with HAVING clause&#10;&#10;Parameters:&#10;    mixed $field&#10;    string $match&#10;    string $side&#10;    boolean $escape;;d1,1186;;b1,0;;m0;;efield;;pmatch;;pside;;pescape;;pinsensitiveSearch;;p">
</treenode>
<treenode node="notLike;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1103;2;1106;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    notLike($field, string $match = &apos;&apos;, string $side = &apos;both&apos;, bool $escape = null, bool $insensitiveSearch = false)&#10;&#10;Description&#10;     NOT LIKE&#10;&#10;Parameters:&#10;    mixed $field&#10;    string $match&#10;    string $side&#10;    boolean $escape&#10;    boolean $insensitiveSearch - IF true, will force a case-insensitive search;;d1,1104;;b1,0;;m0;;emixed $field;;pstring $match;;pstring $side;;pboolean $escape;;pboolean $insensitiveSearch;;p">
</treenode>
<treenode node="objectToArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3212;2;3230;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    objectToArray($object)&#10;&#10;Description&#10;     Object to Array&#10;&#10;Parameters:&#10;    mixed $object;;d1,3213;;b2,0;;m0;;emixed $object;;p">
</treenode>
<treenode node="offset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1704;2;1712;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    offset(int $offset)&#10;&#10;Description&#10;     Sets the OFFSET value&#10;&#10;Parameters:&#10;    integer $offset - OFFSET value;;d1,1705;;b1,0;;m0;;einteger $offset;;p">
</treenode>
<treenode node="orderBy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1614;2;1668;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orderBy(string $orderBy, string $direction = &apos;&apos;, bool $escape = null)&#10;&#10;Description&#10;     ORDER BY&#10;&#10;Parameters:&#10;    string $orderBy&#10;    string $direction - ASC, DESC or RANDOM&#10;    boolean $escape;;d1,1615;;b1,0;;m0;;estring $orderBy;;pstring $direction;;pboolean $escape;;p">
</treenode>
<treenode node="orGroupStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1354;2;1357;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orGroupStart()&#10;&#10;Description&#10;     Starts a query group, but ORs the group;;d1,1355;;b1,0;;m0;;e">
</treenode>
<treenode node="orHaving;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1598;2;1601;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orHaving($key, $value = null, bool $escape = null)&#10;&#10;Description&#10;     OR HAVING&#10;&#10;Parameters:&#10;    string|array $key&#10;    mixed $value&#10;    boolean $escape;;d1,1599;;b1,0;;m0;;estring|array $key;;pmixed $value;;pboolean $escape;;p">
</treenode>
<treenode node="orHavingGroupStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1414;2;1417;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orHavingGroupStart()&#10;&#10;Description&#10;     Starts a query group for HAVING clause, but ORs the group.;;d1,1415;;b1,0;;m0;;e">
</treenode>
<treenode node="orHavingIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;945;2;948;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orHavingIn(string $key = null, $values = null, bool $escape = null)&#10;&#10;Description&#10;     OR HAVING IN&#10;&#10;Parameters:&#10;    string $key - The field to search&#10;    array|string|Closure $values - The values searched on, or anonymous function with subquery&#10;    boolean $escape;;d1,946;;b1,0;;m0;;estring $key;;parray|string|Closure $values;;pboolean $escape;;p">
</treenode>
<treenode node="orHavingLike;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1205;2;1208;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orHavingLike($field, string $match = &apos;&apos;, string $side = &apos;both&apos;, bool $escape = null, bool $insensitiveSearch = false)&#10;&#10;Description&#10;     OR LIKE with HAVING clause&#10;&#10;Parameters:&#10;    mixed $field&#10;    string $match&#10;    string $side&#10;    boolean $escape;;d1,1206;;b1,0;;m0;;efield;;pmatch;;pside;;pescape;;pinsensitiveSearch;;p">
</treenode>
<treenode node="orHavingNotIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;983;2;986;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orHavingNotIn(string $key = null, $values = null, bool $escape = null)&#10;&#10;Description&#10;     OR HAVING NOT IN&#10;&#10;Parameters:&#10;    string $key - The field to search&#10;    array|string|Closure $values - The values searched on, or anonymous function with subquery&#10;    boolean $escape;;d1,984;;b1,0;;m0;;estring $key;;parray|string|Closure $values;;pboolean $escape;;p">
</treenode>
<treenode node="orLike;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1124;2;1127;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orLike($field, string $match = &apos;&apos;, string $side = &apos;both&apos;, bool $escape = null, bool $insensitiveSearch = false)&#10;&#10;Description&#10;     OR LIKE&#10;&#10;Parameters:&#10;    mixed $field&#10;    string $match&#10;    string $side&#10;    boolean $escape&#10;    boolean $insensitiveSearch - IF true, will force a case-insensitive search;;d1,1125;;b1,0;;m0;;emixed $field;;pstring $match;;pstring $side;;pboolean $escape;;pboolean $insensitiveSearch;;p">
</treenode>
<treenode node="orNotGroupStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1378;2;1381;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orNotGroupStart()&#10;&#10;Description&#10;     Starts a query group, but OR NOTs the group;;d1,1379;;b1,0;;m0;;e">
</treenode>
<treenode node="orNotHavingGroupStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1438;2;1441;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orNotHavingGroupStart()&#10;&#10;Description&#10;     Starts a query group for HAVING clause, but OR NOTs the group.;;d1,1439;;b1,0;;m0;;e">
</treenode>
<treenode node="orNotHavingLike;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1225;2;1228;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orNotHavingLike($field, string $match = &apos;&apos;, string $side = &apos;both&apos;, bool $escape = null, bool $insensitiveSearch = false)&#10;&#10;Description&#10;     OR NOT LIKE with HAVING clause&#10;&#10;Parameters:&#10;    mixed $field&#10;    string $match&#10;    string $side&#10;    boolean $escape;;d1,1226;;b1,0;;m0;;efield;;pmatch;;pside;;pescape;;pinsensitiveSearch;;p">
</treenode>
<treenode node="orNotLike;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1145;2;1148;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orNotLike($field, string $match = &apos;&apos;, string $side = &apos;both&apos;, bool $escape = null, bool $insensitiveSearch = false)&#10;&#10;Description&#10;     OR NOT LIKE&#10;&#10;Parameters:&#10;    mixed $field&#10;    string $match&#10;    string $side&#10;    boolean $escape&#10;    boolean $insensitiveSearch - IF true, will force a case-insensitive search;;d1,1146;;b1,0;;m0;;emixed $field;;pstring $match;;pstring $side;;pboolean $escape;;pboolean $insensitiveSearch;;p">
</treenode>
<treenode node="orWhere;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;741;2;744;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orWhere($key, $value = null, bool $escape = null)&#10;&#10;Description&#10;     OR WHERE&#10;&#10;Parameters:&#10;    mixed $key&#10;    mixed $value&#10;    boolean $escape;;d1,742;;b1,0;;m0;;emixed $key;;pmixed $value;;pboolean $escape;;p">
</treenode>
<treenode node="orWhereIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;869;2;872;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orWhereIn(string $key = null, $values = null, bool $escape = null)&#10;&#10;Description&#10;     OR WHERE IN&#10;&#10;Parameters:&#10;    string $key - The field to search&#10;    array|string|Closure $values - The values searched on, or anonymous function with subquery&#10;    boolean $escape;;d1,870;;b1,0;;m0;;estring $key;;parray|string|Closure $values;;pboolean $escape;;p">
</treenode>
<treenode node="orWhereNotIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;907;2;910;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orWhereNotIn(string $key = null, $values = null, bool $escape = null)&#10;&#10;Description&#10;     OR WHERE NOT IN&#10;&#10;Parameters:&#10;    string $key - The field to search&#10;    array|string|Closure $values - The values searched on, or anonymous function with subquery&#10;    boolean $escape;;d1,908;;b1,0;;m0;;estring $key;;parray|string|Closure $values;;pboolean $escape;;p">
</treenode>
<treenode node="replace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2317;2;2342;;;;vpos;;v;;aBaseResult;;r&#10;Definition&#10;    replace(array $set = null)&#10;&#10;Description&#10;     Replace&#10;&#10;Parameters:&#10;    array $set - An associative array of insert values&#10;&#10;Return:&#10;   |Query|string|false;;d1,2318;;b1,0;;m0;;earray $set;;p">
</treenode>
<treenode node="resetQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;3311;2;3317;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    resetQuery()&#10;&#10;Description&#10;     Reset Query Builder values.;;d1,3312;;b1,0;;m0;;e">
</treenode>
<treenode node="resetRun;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3328;2;3334;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    resetRun(array $qb_reset_items)&#10;&#10;Description&#10;     Resets the query builder values.  Called by the get() function&#10;&#10;Parameters:&#10;    array $qb_reset_items - An array of fields to reset;;d1,3329;;b2,0;;m0;;earray $qb_reset_items;;p">
</treenode>
<treenode node="resetSelect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3341;2;3366;;;;vpos;;v;;a;;r&#10;Definition&#10;    resetSelect()&#10;&#10;Description&#10;     Resets the query builder values.  Called by the get() function;;d1,3342;;b2,0;;m0;;e">
</treenode>
<treenode node="resetWrite;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3375;2;3386;;;;vpos;;v;;a;;r&#10;Definition&#10;    resetWrite()&#10;&#10;Description&#10;     Resets the query builder &quot;write&quot; values.;;d1,3376;;b2,0;;m0;;e">
</treenode>
<treenode node="select;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;361;2;396;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    select($select = &apos;*&apos;, bool $escape = null)&#10;&#10;Description&#10;     Select&#10;&#10;Parameters:&#10;    string|array $select&#10;    boolean $escape;;d1,362;;b1,0;;m0;;estring|array $select;;pboolean $escape;;p">
</treenode>
<treenode node="selectAvg;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;444;2;447;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    selectAvg(string $select = &apos;&apos;, string $alias = &apos;&apos;)&#10;&#10;Description&#10;     Select Average&#10;&#10;Parameters:&#10;    string $select - The field&#10;    string $alias - An alias;;d1,445;;b1,0;;m0;;estring $select;;pstring $alias;;p">
</treenode>
<treenode node="selectCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;478;2;481;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    selectCount(string $select = &apos;&apos;, string $alias = &apos;&apos;)&#10;&#10;Description&#10;     Select Count&#10;&#10;Parameters:&#10;    string $select - The field&#10;    string $alias - An alias;;d1,479;;b1,0;;m0;;estring $select;;pstring $alias;;p">
</treenode>
<treenode node="selectMax;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;410;2;413;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    selectMax(string $select = &apos;&apos;, string $alias = &apos;&apos;)&#10;&#10;Description&#10;     Select Max&#10;&#10;Parameters:&#10;    string $select - The field&#10;    string $alias - An alias;;d1,411;;b1,0;;m0;;estring $select;;pstring $alias;;p">
</treenode>
<treenode node="selectMin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;427;2;430;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    selectMin(string $select = &apos;&apos;, string $alias = &apos;&apos;)&#10;&#10;Description&#10;     Select Min&#10;&#10;Parameters:&#10;    string $select - The field&#10;    string $alias - An alias;;d1,428;;b1,0;;m0;;estring $select;;pstring $alias;;p">
</treenode>
<treenode node="selectSum;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;461;2;464;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    selectSum(string $select = &apos;&apos;, string $alias = &apos;&apos;)&#10;&#10;Description&#10;     Select Sum&#10;&#10;Parameters:&#10;    string $select - The field&#10;    string $alias - An alias;;d1,462;;b1,0;;m0;;estring $select;;pstring $alias;;p">
</treenode>
<treenode node="set;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;1743;2;1768;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    set($key, ?string $value = &apos;&apos;, bool $escape = null)&#10;&#10;Description&#10;     The &quot;set&quot; function.&#10;&#10;Parameters:&#10;    string|array|object $key - Field name, or an array of field/value pairs&#10;    string $value - Field value, if $key is a single field&#10;    boolean $escape - Whether to escape values and identifiers;;d1,1744;;b1,0;;m0;;estring|array|object $key;;pstring $value;;pboolean $escape;;p">
</treenode>
<treenode node="setBind;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;3452;2;3476;;;;vpos;;v;;astring;;r&#10;Definition&#10;    setBind(string $key, $value = null, bool $escape = true): string&#10;&#10;Description&#10;     Stores a bind value after ensuring that it&apos;s unique. While it might be nicer to have named keys for our binds array with PHP 7+ we get a huge memory/performance gain with indexed arrays instead, so lets take advantage of that here.&#10;&#10;Parameters:&#10;    string $key&#10;    mixed $value&#10;    boolean $escape;;d1,3453;;b2,0;;m0;;estring $key;;pmixed $value;;pboolean $escape;;p">
</treenode>
<treenode node="setInsertBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2132;2;2176;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    setInsertBatch($key, string $value = &apos;&apos;, bool $escape = null)&#10;&#10;Description&#10;     The &quot;setInsertBatch&quot; function.  Allows key/value pairs to be set for batch inserts&#10;&#10;Parameters:&#10;    mixed $key&#10;    string $value&#10;    boolean $escape&#10;&#10;Return:&#10;   |null;;d1,2133;;b1,0;;m0;;emixed $key;;pstring $value;;pboolean $escape;;p">
</treenode>
<treenode node="setUpdateBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2667;2;2703;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    setUpdateBatch($key, string $index = &apos;&apos;, bool $escape = null)&#10;&#10;Description&#10;     The &quot;setUpdateBatch&quot; function.  Allows key/value pairs to be set for batch updating&#10;&#10;Parameters:&#10;    array|object $key&#10;    string $index&#10;    boolean $escape&#10;&#10;Return:&#10;   |null;;d1,2668;;b1,0;;m0;;earray|object $key;;pstring $index;;pboolean $escape;;p">
</treenode>
<treenode node="testMode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;310;2;315;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    testMode(bool $mode = true)&#10;&#10;Description&#10;     Sets a test mode status.&#10;&#10;Parameters:&#10;    boolean $mode - Mode to set;;d1,311;;b1,0;;m0;;eboolean $mode;;p">
</treenode>
<treenode node="trackAliases;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2920;2;2950;;;;vpos;;v;;astring;;r&#10;Definition&#10;    trackAliases($table)&#10;&#10;Description&#10;     Track Aliases&#10;&#10;Parameters:&#10;    string|array $table - The table to inspect&#10;&#10;Return:&#10;   |void;;d1,2921;;b2,0;;m0;;estring|array $table;;p">
</treenode>
<treenode node="truncate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2741;2;2755;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    truncate()&#10;&#10;Description&#10;     Truncate&#10;&#10;Return:&#10;   TRUE on success, FALSE on failure;;d1,2742;;b1,0;;m0;;e">
</treenode>
<treenode node="update;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2422;2;2469;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    update(array $set = null, $where = null, int $limit = null): bool&#10;&#10;Description&#10;     UPDATE&#10;&#10;Parameters:&#10;    array $set - An associative array of update values&#10;    mixed $where&#10;    integer $limit&#10;&#10;Return:&#10;   TRUE on success, FALSE on failure;;d1,2423;;b1,0;;m0;;earray $set;;pmixed $where;;pinteger $limit;;p">
</treenode>
<treenode node="updateBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;2540;2;2609;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    updateBatch(array $set = null, string $index = null, int $batchSize = 100)&#10;&#10;Description&#10;     Update_Batch&#10;&#10;Parameters:&#10;    array $set - An associative array of update values&#10;    string $index - The where key&#10;    integer $batchSize - The size of the batch to run&#10;&#10;Return:&#10;   Number of rows affected, SQL string, or FALSE on failure;;d1,2541;;b1,0;;m0;;earray $set;;pstring $index;;pinteger $batchSize;;p">
</treenode>
<treenode node="validateInsert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2271;2;2285;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    validateInsert(): bool&#10;&#10;Description&#10;     Validate Insert;;d1,2272;;b2,0;;m0;;e">
</treenode>
<treenode node="validateUpdate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;2510;2;2524;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    validateUpdate(): bool&#10;&#10;Description&#10;     Validate Update;;d1,2511;;b2,0;;m0;;e">
</treenode>
<treenode node="where;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;722;2;725;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    where($key, $value = null, bool $escape = null)&#10;&#10;Description&#10;     WHERE&#10;&#10;Parameters:&#10;    mixed $key&#10;    mixed $value&#10;    boolean $escape;;d1,723;;b1,0;;m0;;emixed $key;;pmixed $value;;pboolean $escape;;p">
</treenode>
<treenode node="whereHaving;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f11;764;2;834;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    whereHaving(string $qb_key, $key, $value = null, string $type = &apos;AND &apos;, bool $escape = null)&#10;&#10;Description&#10;     WHERE, HAVING&#10;&#10;Parameters:&#10;    string $qb_key - &apos;QBWhere&apos; or &apos;QBHaving&apos;&#10;    mixed $key&#10;    mixed $value&#10;    string $type&#10;    boolean $escape;;d1,765;;b2,0;;m0;;estring $qb_key;;pmixed $key;;pmixed $value;;pstring $type;;pboolean $escape;;p">
</treenode>
<treenode node="whereIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;850;2;853;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    whereIn(string $key = null, $values = null, bool $escape = null)&#10;&#10;Description&#10;     WHERE IN&#10;&#10;Parameters:&#10;    string $key - The field to search&#10;    array|string|Closure $values - The values searched on, or anonymous function with subquery&#10;    boolean $escape;;d1,851;;b1,0;;m0;;estring $key;;parray|string|Closure $values;;pboolean $escape;;p">
</treenode>
<treenode node="whereNotIn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseBuilder.php;f8;888;2;891;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    whereNotIn(string $key = null, $values = null, bool $escape = null)&#10;&#10;Description&#10;     WHERE NOT IN&#10;&#10;Parameters:&#10;    string $key - The field to search&#10;    array|string|Closure $values - The values searched on, or anonymous function with subquery&#10;    boolean $escape;;d1,889;;b1,0;;m0;;estring $key;;parray|string|Closure $values;;pboolean $escape;;p">
</treenode>
</treenode>
<treenode node="BaseCollector;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f0;45;1;317;;;;vpos;;v;;a;;r&#10;Definition&#10;    class BaseCollector&#10;&#10;Description&#10;     Base Toolbar collector;;d0,46;;b0,0;;m0;;e">
<treenode node="cleanPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;255;2;258;;;;vpos;;v;;astring;;r&#10;Definition&#10;    cleanPath(string $file): string&#10;&#10;Description&#10;     Clean Path&#10;&#10;Parameters:&#10;    string $file;;d1,256;;b1,0;;m0;;estring $file;;p">
</treenode>
<treenode node="display;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;239;2;242;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    display()&#10;&#10;Description&#10;     Returns the data of this collector to be formatted in the toolbar&#10;&#10;Return:&#10;   |string;;d1,240;;b1,0;;m0;;e">
</treenode>
<treenode node="formatTimelineData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f11;227;2;230;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    formatTimelineData(): array&#10;&#10;Description&#10;     Child classes should implement this to return the timeline data formatted for correct usage.;;d1,228;;b2,0;;m0;;e">
</treenode>
<treenode node="getAsArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;300;2;315;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getAsArray(): array&#10;&#10;Description&#10;     Return settings as an array.;;d1,301;;b1,0;;m0;;e">
</treenode>
<treenode node="getBadgeValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;265;2;268;;;;vpos;;v;;anull;;r&#10;Definition&#10;    getBadgeValue()&#10;&#10;Description&#10;     Gets the &quot;badge&quot; value for the button.;;d1,266;;b1,0;;m0;;e">
</treenode>
<treenode node="getTitle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;96;2;104;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getTitle(bool $safe = false): string&#10;&#10;Description&#10;     Gets the Collector&apos;s title.&#10;&#10;Parameters:&#10;    boolean $safe;;d1,97;;b1,0;;m0;;eboolean $safe;;p">
</treenode>
<treenode node="getTitleDetails;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;113;2;116;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getTitleDetails(): string&#10;&#10;Description&#10;     Returns any information that should be shown next to the title.;;d1,114;;b1,0;;m0;;e">
</treenode>
<treenode node="getVarData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;205;2;208;;;;vpos;;v;;anull;;r&#10;Definition&#10;    getVarData()&#10;&#10;Description&#10;     Gets a collection of data that should be shown in the &apos;Vars&apos; tab. The format is an array of sections, each with their own array of key/value pairs:;;d1,206;;b1,0;;m0;;e">
</treenode>
<treenode node="hasLabel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;137;2;140;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasLabel(): bool&#10;&#10;Description&#10;     Does this collector have a label?;;d1,138;;b1,0;;m0;;e">
</treenode>
<treenode node="hasTabContent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;125;2;128;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasTabContent(): bool&#10;&#10;Description&#10;     Does this collector need it&apos;s own tab?;;d1,126;;b1,0;;m0;;e">
</treenode>
<treenode node="hasTimelineData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;149;2;152;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasTimelineData(): bool&#10;&#10;Description&#10;     Does this collector have information for the timeline?;;d1,150;;b1,0;;m0;;e">
</treenode>
<treenode node="hasVarData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;180;2;183;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasVarData(): bool&#10;&#10;Description&#10;     Does this Collector have data that should be shown in the &apos;Vars&apos; tab?;;d1,181;;b1,0;;m0;;e">
</treenode>
<treenode node="icon;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;290;2;293;;;;vpos;;v;;astring;;r&#10;Definition&#10;    icon(): string&#10;&#10;Description&#10;     Returns the HTML to display the icon. Should either be SVG, or a base-64 encoded.;;d1,291;;b1,0;;m0;;e">
</treenode>
<treenode node="isEmpty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;277;2;280;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isEmpty(): bool&#10;&#10;Description&#10;     Does this collector have any data collected?;;d1,278;;b1,0;;m0;;e">
</treenode>
<treenode node="timelineData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\BaseCollector.php;f8;162;2;170;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    timelineData(): array&#10;&#10;Description&#10;     Grabs the data for the timeline, properly formatted, or returns an empty array.;;d1,163;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="BaseCommand;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\CLI\BaseCommand.php;f9;52;1;268;;;;vpos;;v;;a;;r&#10;Definition&#10;    class BaseCommand&#10;&#10;Description&#10;     Class BaseCommand;;d0,53;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\BaseCommand.php;f8;121;2;125;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(LoggerInterface $logger, Commands $commands)&#10;&#10;Description&#10;     BaseCommand constructor.&#10;&#10;Parameters:&#10;    \Psr\Log\LoggerInterface $logger&#10;    \CodeIgniter\CLI\Commands $commands;;d1,122;;b1,0;;m0;;e\Psr\Log\LoggerInterface $logger;;p\CodeIgniter\CLI\Commands $commands;;p">
</treenode>
<treenode node="__get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\BaseCommand.php;f8;182;2;190;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __get(string $key)&#10;&#10;Description&#10;     Makes it simple to access our protected properties.&#10;&#10;Parameters:&#10;    string $key;;d1,183;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="__isset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\BaseCommand.php;f8;201;2;204;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    __isset(string $key): bool&#10;&#10;Description&#10;     Makes it simple to check our protected properties.&#10;&#10;Parameters:&#10;    string $key;;d1,202;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="call;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\BaseCommand.php;f11;148;2;155;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    call(string $command, array $params = [])&#10;&#10;Description&#10;     Can be used by a command to run other commands.&#10;&#10;Parameters:&#10;    string $command&#10;    array $params;;d1,149;;b2,0;;m0;;estring $command;;parray $params;;p">
</treenode>
<treenode node="getPad;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\BaseCommand.php;f8;257;2;265;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getPad(array $array, int $pad): int&#10;&#10;Description&#10;     Get pad for $key =&gt; $value array output&#10;&#10;Parameters:&#10;    array $array&#10;    integer $pad;;d1,258;;b1,0;;m0;;earray $array;;pinteger $pad;;p">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\BaseCommand.php;f17;135;44;135;;;;vpos;;v;;a;;r&#10;Description&#10;     Actually execute a command. This has to be over-ridden in any concrete implementation.&#10;&#10;Parameters:&#10;    array $params;;d-1,-1;;b1,0;;m0;;earray $params;;p">
</treenode>
<treenode node="showError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\BaseCommand.php;f11;165;2;171;;;;vpos;;v;;a;;r&#10;Definition&#10;    showError(\Exception $e)&#10;&#10;Description&#10;     A simple method to display an error with line/file, in child commands.&#10;&#10;Parameters:&#10;    \Exception $e;;d1,166;;b2,0;;m0;;e\Exception $e;;p">
</treenode>
<treenode node="showHelp;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\BaseCommand.php;f8;211;2;245;;;;vpos;;v;;a;;r&#10;Definition&#10;    showHelp()&#10;&#10;Description&#10;     show Help include (usage,arguments,description,options);;d1,212;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="BaseConfig;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseConfig.php;f0;51;1;246;;;;vpos;;v;;a;;r&#10;Definition&#10;    class BaseConfig&#10;&#10;Description&#10;     Class BaseConfig;;d0,52;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseConfig.php;f8;82;2;109;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct()&#10;&#10;Description&#10;     Will attempt to get environment variables with names that match the properties of the child class.;;d1,83;;b1,0;;m0;;e">
</treenode>
<treenode node="getEnvValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseConfig.php;f11;165;2;182;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getEnvValue(string $property, string $prefix, string $shortPrefix)&#10;&#10;Description&#10;     Retrieve an environment-specific configuration setting&#10;&#10;Parameters:&#10;    string $property&#10;    string $prefix&#10;    string $shortPrefix;;d1,166;;b2,0;;m0;;estring $property;;pstring $prefix;;pstring $shortPrefix;;p">
</treenode>
<treenode node="initEnvValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseConfig.php;f11;123;2;152;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    initEnvValue(&amp;$property, string $name, string $prefix, string $shortPrefix)&#10;&#10;Description&#10;     Initialization an environment-specific configuration setting&#10;&#10;Parameters:&#10;    mixed - &amp;$property&#10;    string $name&#10;    string $prefix&#10;    string $shortPrefix;;d1,124;;b2,0;;m0;;emixed;;pstring $name;;pstring $prefix;;pstring $shortPrefix;;p">
</treenode>
<treenode node="registerProperties;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseConfig.php;f11;192;2;243;;;;vpos;;v;;a;;r&#10;Definition&#10;    registerProperties()&#10;&#10;Description&#10;     Provides external libraries a simple way to register one or more options into a config file.;;d1,193;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="BaseConnection;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f9;47;1;1882;;;;vpos;;v;;aConnectionInterface;;c;;r&#10;Definition&#10;    class BaseConnection implements ConnectionInterface&#10;&#10;Description&#10;     Class BaseConnection;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;339;2;348;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(array $params)&#10;&#10;Description&#10;     Saves our connection settings.&#10;&#10;Parameters:&#10;    array $params;;d1,340;;b1,0;;m0;;earray $params;;p">
</treenode>
<treenode node="__get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1856;2;1864;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __get(string $key)&#10;&#10;Description&#10;     Accessor for properties if they exist.&#10;&#10;Parameters:&#10;    string $key;;d1,1857;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="__isset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1875;2;1878;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    __isset(string $key): bool&#10;&#10;Description&#10;     Checker for properties existence.&#10;&#10;Parameters:&#10;    string $key;;d1,1876;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="_close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;464;37;464;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Platform dependent way method for closing the connection.;;d-1,-1;;b2,0;;m0;;e">
</treenode>
<treenode node="_escapeString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f11;1476;2;1479;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _escapeString(string $str): string&#10;&#10;Description&#10;     Platform independent string escape.&#10;&#10;Parameters:&#10;    string $str;;d1,1477;;b2,0;;m0;;estring $str;;p">
</treenode>
<treenode node="_fieldData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;1823;61;1823;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Platform-specific field data information.&#10;&#10;Parameters:&#10;    string $table;;d-1,-1;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_foreignKeyData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;1845;66;1845;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Platform-specific foreign keys data.&#10;&#10;Parameters:&#10;    string $table;;d-1,-1;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_indexData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;1834;61;1834;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Platform-specific index data.&#10;&#10;Parameters:&#10;    string $table;;d-1,-1;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_listColumns;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;1812;69;1812;;;;vpos;;v;;astring;;r&#10;Description&#10;     Generates a platform-specific query string so that the column names can be fetched.&#10;&#10;Parameters:&#10;    string $table;;d-1,-1;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_listTables;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;1801;81;1801;;;;vpos;;v;;astring;;r&#10;Description&#10;     Generates the SQL for listing tables in a platform-dependent manner.&#10;&#10;Parameters:&#10;    boolean $constrainByPrefix;;d-1,-1;;b2,0;;m0;;eboolean $constrainByPrefix;;p">
</treenode>
<treenode node="_transBegin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;937;48;937;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Begin Transaction;;d-1,-1;;b2,0;;m0;;e">
</treenode>
<treenode node="_transCommit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;946;49;946;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Commit Transaction;;d-1,-1;;b2,0;;m0;;e">
</treenode>
<treenode node="_transRollback;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;955;51;955;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Rollback Transaction;;d-1,-1;;b2,0;;m0;;e">
</treenode>
<treenode node="addTableAlias;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;605;2;613;;;;vpos;;v;;a;;r&#10;Definition&#10;    addTableAlias(string $table)&#10;&#10;Description&#10;     Add a table alias to our list.&#10;&#10;Parameters:&#10;    string $table;;d1,606;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="affectedRows;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f17;1368;45;1368;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the total number of rows affected by this query.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="callFunction;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1493;2;1513;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    callFunction(string $functionName, ...$params): bool&#10;&#10;Description&#10;     This function enables you to call PHP database functions that are not natively included in CodeIgniter, in a platform independent manner.&#10;&#10;Parameters:&#10;    string $functionName&#10;    array - ...$params;;d1,1494;;b1,0;;m0;;estring $functionName;;parray;;p">
</treenode>
<treenode node="close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;448;2;455;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    close()&#10;&#10;Description&#10;     Close the database connection.;;d1,449;;b1,0;;m0;;e">
</treenode>
<treenode node="connect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f17;439;59;439;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Connect to the database.&#10;&#10;Parameters:&#10;    boolean $persistent;;d-1,-1;;b1,0;;m0;;eboolean $persistent;;p">
</treenode>
<treenode node="disableForeignKeyChecks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1718;2;1723;;;;vpos;;v;;a;;r&#10;Definition&#10;    disableForeignKeyChecks()&#10;&#10;Description&#10;     Disables foreign key checks temporarily.;;d1,1719;;b1,0;;m0;;e">
</treenode>
<treenode node="enableForeignKeyChecks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1730;2;1735;;;;vpos;;v;;a;;r&#10;Definition&#10;    enableForeignKeyChecks()&#10;&#10;Description&#10;     Enables foreign key checks temporarily.;;d1,1731;;b1,0;;m0;;e">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f17;1781;40;1781;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Returns the last error code and message.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="escape;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1382;2;1406;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    escape($str)&#10;&#10;Description&#10;     &quot;Smart&quot; Escape String&#10;&#10;Parameters:&#10;    mixed $str;;d1,1383;;b1,0;;m0;;emixed $str;;p">
</treenode>
<treenode node="escapeIdentifiers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1285;2;1337;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    escapeIdentifiers($item)&#10;&#10;Description&#10;     Escape the SQL Identifiers&#10;&#10;Parameters:&#10;    mixed $item;;d1,1286;;b1,0;;m0;;emixed $item;;p">
</treenode>
<treenode node="escapeLikeString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1460;2;1463;;;;vpos;;v;;astring;;r&#10;Definition&#10;    escapeLikeString($str)&#10;&#10;Description&#10;     Escape LIKE String&#10;&#10;Parameters:&#10;    string|string[]&#10;&#10;Return:&#10;   |string[];;d1,1461;;b1,0;;m0;;estring|string[];;p">
</treenode>
<treenode node="escapeString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1417;2;1447;;;;vpos;;v;;astring;;r&#10;Definition&#10;    escapeString($str, bool $like = false)&#10;&#10;Description&#10;     Escape String&#10;&#10;Parameters:&#10;    string|string[] $str - Input string&#10;    boolean $like - Whether or not the string will be used in a LIKE condition&#10;&#10;Return:&#10;   |string[];;d1,1418;;b1,0;;m0;;estring|string[] $str;;pboolean $like;;p">
</treenode>
<treenode node="execute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f20;622;49;622;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Executes the query against the database.&#10;&#10;Parameters:&#10;     $sql;;d-1,-1;;b2,0;;m0;;e $sql;;p">
</treenode>
<treenode node="fieldExists;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1663;2;1666;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    fieldExists(string $fieldName, string $tableName): bool&#10;&#10;Description&#10;     Determine if a particular field exists&#10;&#10;Parameters:&#10;    string $fieldName&#10;    string $tableName;;d1,1664;;b1,0;;m0;;estring $fieldName;;pstring $tableName;;p">
</treenode>
<treenode node="getConnectDuration;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1078;2;1081;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getConnectDuration(int $decimals = 6): string&#10;&#10;Description&#10;     Returns the number of seconds with microseconds that it took to connect to the database.&#10;&#10;Parameters:&#10;    integer $decimals;;d1,1079;;b1,0;;m0;;einteger $decimals;;p">
</treenode>
<treenode node="getConnection;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;500;2;504;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getConnection(string $alias = null)&#10;&#10;Description&#10;     Returns the actual connection object. If both a &apos;read&apos; and &apos;write&apos; connection has been specified, you can pass either term in to get that connection. If you pass either alias in and only a single connection is present, it must return the sole connection.&#10;&#10;Parameters:&#10;    string|null $alias;;d1,501;;b1,0;;m0;;estring|null $alias;;p">
</treenode>
<treenode node="getConnectStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1061;35;1061;;;;vpos;;v;;afloat;;r&#10;Description&#10;     Returns the time we started to connect to this database in seconds with microseconds.&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;524;2;527;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDatabase(): string&#10;&#10;Description&#10;     Returns the name of the current database being used.;;d1,525;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1676;2;1681;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFieldData(string $table)&#10;&#10;Description&#10;     Returns an object with field data&#10;&#10;Parameters:&#10;    string $table - the table name&#10;&#10;Return:&#10;   |false;;d1,1677;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="getFieldNames;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1603;2;1652;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFieldNames(string $table)&#10;&#10;Description&#10;     Fetch Field Names&#10;&#10;Parameters:&#10;    string $table - Table name&#10;&#10;Return:&#10;   |false;;d1,1604;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="getForeignKeyData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1706;2;1711;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getForeignKeyData(string $table)&#10;&#10;Description&#10;     Returns an object with foreign key data&#10;&#10;Parameters:&#10;    string $table - the table name&#10;&#10;Return:&#10;   |false;;d1,1707;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="getIndexData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1691;2;1696;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getIndexData(string $table)&#10;&#10;Description&#10;     Returns an object with key data&#10;&#10;Parameters:&#10;    string $table - the table name&#10;&#10;Return:&#10;   |false;;d1,1692;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="getLastQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1034;2;1037;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getLastQuery()&#10;&#10;Description&#10;     Returns the last query&apos;s statement object.;;d1,1035;;b1,0;;m0;;e">
</treenode>
<treenode node="getPlatform;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;564;2;567;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getPlatform(): string&#10;&#10;Description&#10;     The name of the platform in use (MySQLi, mssql, etc);;d1,565;;b1,0;;m0;;e">
</treenode>
<treenode node="getPrefix;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;552;2;555;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getPrefix(): string&#10;&#10;Description&#10;     Returns the database prefix.;;d1,553;;b1,0;;m0;;e">
</treenode>
<treenode node="getVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f17;576;46;576;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns a string containing the version of the database being used.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;358;2;429;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Initializes the database connection/settings.&#10;&#10;Return:&#10;   |void;;d1,359;;b1,0;;m0;;e">
</treenode>
<treenode node="insertID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f17;1790;41;1790;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Insert ID;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="listTables;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1527;2;1578;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    listTables(bool $constrainByPrefix = false)&#10;&#10;Description&#10;     Returns an array of table names&#10;&#10;Parameters:&#10;    boolean $constrainByPrefix - = FALSE&#10;&#10;Return:&#10;   |array;;d1,1528;;b1,0;;m0;;eboolean $constrainByPrefix;;p">
</treenode>
<treenode node="persistentConnect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;473;2;476;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    persistentConnect()&#10;&#10;Description&#10;     Create a persistent database connection.;;d1,474;;b1,0;;m0;;e">
</treenode>
<treenode node="prefixTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1351;2;1359;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prefixTable(string $table = &apos;&apos;): string&#10;&#10;Description&#10;     DB Prefix&#10;&#10;Parameters:&#10;    string $table - the table;;d1,1352;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="prepare;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1000;2;1025;;;;vpos;;v;;aBasePreparedQuery;;r&#10;Definition&#10;    prepare(\Closure $func, array $options = [])&#10;&#10;Description&#10;     Creates a prepared statement with the database that can then be used to execute multiple statements against. Within the closure, you would build the query in any normal way, though the Query Builder is the expected manner.&#10;&#10;Parameters:&#10;    \Closure $func&#10;    array $options - Passed to the prepare() method&#10;&#10;Return:&#10;   |null;;d1,1001;;b1,0;;m0;;e\Closure $func;;parray $options;;p">
</treenode>
<treenode node="pretend;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1749;2;1754;;;;vpos;;v;;a;;r&#10;Definition&#10;    pretend(bool $pretend = true)&#10;&#10;Description&#10;     Allows the engine to be set into a mode where queries are not actually executed, but they are still generated, timed, etc.&#10;&#10;Parameters:&#10;    boolean $pretend;;d1,1750;;b1,0;;m0;;eboolean $pretend;;p">
</treenode>
<treenode node="protectIdentifiers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1112;2;1272;;;;vpos;;v;;astring;;r&#10;Definition&#10;    protectIdentifiers($item, bool $prefixSingle = false, bool $protectIdentifiers = null, bool $fieldExists = true)&#10;&#10;Description&#10;     Protect Identifiers&#10;&#10;Parameters:&#10;    string|array $item&#10;    boolean $prefixSingle&#10;    boolean $protectIdentifiers&#10;    boolean $fieldExists&#10;&#10;Return:&#10;   |array;;d1,1113;;b1,0;;m0;;estring|array $item;;pboolean $prefixSingle;;pboolean $protectIdentifiers;;pboolean $fieldExists;;p">
</treenode>
<treenode node="query;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;641;2;720;;;;vpos;;v;;aBaseResult;;r&#10;Definition&#10;    query(string $sql, $binds = null, bool $setEscapeFlags = true, string $queryClass = &apos;CodeIgniter\\Database\\Query&apos;)&#10;&#10;Description&#10;     Orchestrates a query against the database. Queries must use Database\Statement objects to store the query and build it. This method works with the cache.&#10;&#10;Parameters:&#10;    string $sql&#10;    mixed - ...$binds&#10;    boolean $setEscapeFlags&#10;    string $queryClass&#10;&#10;Return:&#10;   |Query|false;;d1,642;;b1,0;;m0;;estring $sql;;pmixed;;pboolean $setEscapeFlags;;pstring $queryClass;;p">
</treenode>
<treenode node="reconnect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f17;486;37;486;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Keep or establish the connection if no queries have been sent for a length of time exceeding the server&apos;s idle timeout.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="resetDataCache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1763;2;1768;;;;vpos;;v;;a;;r&#10;Definition&#10;    resetDataCache()&#10;&#10;Description&#10;     Empties our data cache. Especially helpful during testing.;;d1,1764;;b1,0;;m0;;e">
</treenode>
<treenode node="setAliasedTables;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;589;2;594;;;;vpos;;v;;a;;r&#10;Definition&#10;    setAliasedTables(array $aliases)&#10;&#10;Description&#10;     Sets the Table Aliases to use. These are typically collected during use of the Builder, and set here so queries are built correctly.&#10;&#10;Parameters:&#10;    array $aliases;;d1,590;;b1,0;;m0;;earray $aliases;;p">
</treenode>
<treenode node="setDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f17;515;59;515;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Select a specific database table to use.&#10;&#10;Parameters:&#10;    string $databaseName;;d-1,-1;;b1,0;;m0;;estring $databaseName;;p">
</treenode>
<treenode node="setPrefix;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;540;2;543;;;;vpos;;v;;astring;;r&#10;Definition&#10;    setPrefix(string $prefix = &apos;&apos;): string&#10;&#10;Description&#10;     Set DB Prefix&#10;&#10;Parameters:&#10;    string $prefix - The prefix;;d1,541;;b1,0;;m0;;estring $prefix;;p">
</treenode>
<treenode node="showLastQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1046;2;1049;;;;vpos;;v;;astring;;r&#10;Definition&#10;    showLastQuery(): string&#10;&#10;Description&#10;     Returns a string representation of the last query&apos;s statement object.;;d1,1047;;b1,0;;m0;;e">
</treenode>
<treenode node="simpleQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;733;2;741;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    simpleQuery(string $sql)&#10;&#10;Description&#10;     Performs a basic query against the database. No binding or caching is performed, nor are transactions handled. Simply takes a raw query string and returns the database-specific result id.&#10;&#10;Parameters:&#10;    string $sql;;d1,734;;b1,0;;m0;;estring $sql;;p">
</treenode>
<treenode node="table;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;967;2;977;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    table($tableName)&#10;&#10;Description&#10;     Returns an instance of the query builder for this connection.&#10;&#10;Parameters:&#10;    string|array $tableName;;d1,968;;b1,0;;m0;;estring|array $tableName;;p">
</treenode>
<treenode node="tableExists;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;1588;2;1591;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    tableExists(string $tableName): bool&#10;&#10;Description&#10;     Determine if a particular table exists&#10;&#10;Parameters:&#10;    string $tableName;;d1,1589;;b1,0;;m0;;estring $tableName;;p">
</treenode>
<treenode node="transBegin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;852;2;882;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    transBegin(bool $test_mode = false): bool&#10;&#10;Description&#10;     Begin Transaction&#10;&#10;Parameters:&#10;    boolean $test_mode;;d1,853;;b1,0;;m0;;eboolean $test_mode;;p">
</treenode>
<treenode node="transCommit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;891;2;905;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    transCommit(): bool&#10;&#10;Description&#10;     Commit Transaction;;d1,892;;b1,0;;m0;;e">
</treenode>
<treenode node="transComplete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;805;2;830;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    transComplete(): bool&#10;&#10;Description&#10;     Complete Transaction;;d1,806;;b1,0;;m0;;e">
</treenode>
<treenode node="transOff;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;752;2;755;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    transOff()&#10;&#10;Description&#10;     Disable Transactions;;d1,753;;b1,0;;m0;;e">
</treenode>
<treenode node="transRollback;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;914;2;928;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    transRollback(): bool&#10;&#10;Description&#10;     Rollback Transaction;;d1,915;;b1,0;;m0;;e">
</treenode>
<treenode node="transStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;788;2;796;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    transStart(bool $test_mode = false): bool&#10;&#10;Description&#10;     Start Transaction&#10;&#10;Parameters:&#10;    boolean $test_mode - = FALSE;;d1,789;;b1,0;;m0;;eboolean $test_mode;;p">
</treenode>
<treenode node="transStatus;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;839;2;842;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    transStatus(): bool&#10;&#10;Description&#10;     Lets you retrieve the transaction flag to determine if it has failed;;d1,840;;b1,0;;m0;;e">
</treenode>
<treenode node="transStrict;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseConnection.php;f8;773;2;778;;;;vpos;;v;;a;;r&#10;Definition&#10;    transStrict(bool $mode = true)&#10;&#10;Description&#10;     Enable/disable Transaction Strict Mode&#10;&#10;Parameters:&#10;    boolean $mode - = true;;d1,774;;b1,0;;m0;;eboolean $mode;;p">
</treenode>
</treenode>
<treenode node="BaseController;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\BaseController.php;f0;18;1;49;;O:\xampp\htdocs\2020\blog-4\app\Controllers\BaseController.php;f0;18;1;45;;;;vpos;;v;;aController;;c;;r&#10;Definition&#10;    class BaseController extends Controller&#10;&#10;Description&#10;     Class BaseController;;d0,19;;b0,0;;m0;;e">
<treenode node="initController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\BaseController.php;f8;33;2;47;;O:\xampp\htdocs\2020\blog-4\app\Controllers\BaseController.php;f8;33;2;43;;;;vpos;;v;;a;;r&#10;Definition&#10;    initController(\CodeIgniter\HTTP\RequestInterface $request, \CodeIgniter\HTTP\ResponseInterface $response, \Psr\Log\LoggerInterface $logger)&#10;&#10;Description&#10;     Constructor.;;d1,34;;b1,0;;m0;;erequest;;presponse;;plogger;;p">
</treenode>
</treenode>
<treenode node="BaseHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\BaseHandler.php;f9;47;1;217;;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\BaseHandler.php;f9;44;1;120;;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f9;48;1;875;;O:\xampp\htdocs\2020\blog-4\system\Encryption\Handlers\BaseHandler.php;f9;46;1;123;;;;vpos;;v;;aSessionHandlerInterface;;cLoggerAwareTrait;;c;;r&#10;Definition&#10;    class BaseHandler implements \SessionHandlerInterface&#10;&#10;Description&#10;     Base class for session handling;;d0,48;;b0,0;;m0;;e">
<treenode node="__call;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;783;2;789;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __call(string $name, array $args = [])&#10;&#10;Description&#10;     Provide access to the Image class&apos; methods if they don&apos;t exist on the handler itself.&#10;&#10;Parameters:&#10;    string $name&#10;    array $args;;d1,784;;b1,0;;m0;;estring $name;;parray $args;;p">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\BaseHandler.php;f8;138;2;148;;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\BaseHandler.php;f8;68;2;71;;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;148;2;151;;O:\xampp\htdocs\2020\blog-4\system\Encryption\Handlers\BaseHandler.php;f8;70;2;82;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config, string $ipAddress)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    BaseConfig $config&#10;    string $ipAddress;;d1,139;;b1,0;;m0;;eBaseConfig $config;;pstring $ipAddress;;p">
</treenode>
<treenode node="__get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Handlers\BaseHandler.php;f8;103;2;111;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __get($key)&#10;&#10;Description&#10;     __get() magic, providing readonly access to some of our properties&#10;&#10;Parameters:&#10;    string $key - Property name;;d1,104;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="__isset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Handlers\BaseHandler.php;f8;119;2;122;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    __isset($key): bool&#10;&#10;Description&#10;     __isset() magic, providing checking for some of our properties&#10;&#10;Parameters:&#10;    string $key - Property name;;d1,120;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="_flatten;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f20;421;88;421;;;;vpos;;v;;a;;r&#10;Description&#10;     Handler-specific method to flattening an image&apos;s transparencies.&#10;&#10;Parameters:&#10;    integer $red&#10;    integer $green&#10;    integer $blue;;d-1,-1;;b2,0;;m0;;einteger $red;;pinteger $green;;pinteger $blue;;p">
</treenode>
<treenode node="_flip;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f20;465;53;465;;;;vpos;;v;;a;;r&#10;Description&#10;     Handler-specific method to handle flipping an image along its horizontal or vertical axis.&#10;&#10;Parameters:&#10;    string $direction;;d-1,-1;;b2,0;;m0;;estring $direction;;p">
</treenode>
<treenode node="_rotate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f20;432;48;432;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Handler-specific method to handle rotating an image in 90 degree increments.&#10;&#10;Parameters:&#10;    integer $angle;;d-1,-1;;b2,0;;m0;;einteger $angle;;p">
</treenode>
<treenode node="_text;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f20;508;69;508;;;;vpos;;v;;a;;r&#10;Description&#10;     Handler-specific method for overlaying text on an image.&#10;&#10;Parameters:&#10;    string $text&#10;    array $options;;d-1,-1;;b2,0;;m0;;estring $text;;parray $options;;p">
</treenode>
<treenode node="calcAspectRatio;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f11;640;2;669;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    calcAspectRatio($width, $height = null, $origWidth, $origHeight): array&#10;&#10;Description&#10;     Calculate image aspect ratio.&#10;&#10;Parameters:&#10;    integer|float $width&#10;    integer|float|null $height&#10;    integer|float $origWidth&#10;    integer|float $origHeight;;d1,641;;b2,0;;m0;;einteger|float $width;;pinteger|float|null $height;;pinteger|float $origWidth;;pinteger|float $origHeight;;p">
</treenode>
<treenode node="calcCropCoords;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f11;685;2;734;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    calcCropCoords($width, $height, $origWidth, $origHeight, $position): array&#10;&#10;Description&#10;     Based on the position, will determine the correct x/y coords to crop the desired portion from the image.&#10;&#10;Parameters:&#10;    integer|float $width&#10;    integer|float $height&#10;    integer|float $origWidth&#10;    integer|float $origHeight&#10;    string $position;;d1,686;;b2,0;;m0;;einteger|float $width;;pinteger|float $height;;pinteger|float $origWidth;;pinteger|float $origHeight;;pstring $position;;p">
</treenode>
<treenode node="canHandle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\BaseHandler.php;f8;83;2;86;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    canHandle(string $level): bool&#10;&#10;Description&#10;     Checks whether the Handler will handle logging items of this log Level.&#10;&#10;Parameters:&#10;     $level;;d1,84;;b1,0;;m0;;e $level;;p">
</treenode>
<treenode node="convert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;344;2;348;;;;vpos;;v;;a;;r&#10;Definition&#10;    convert(int $imageType)&#10;&#10;Description&#10;     Changes the stored image type to indicate the new file format to use when saving. Does not touch the actual resource.&#10;&#10;Parameters:&#10;    integer|null $imageType - A PHP imageType constant, e;;d1,345;;b1,0;;m0;;einteger|null $imageType;;p">
</treenode>
<treenode node="crop;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;313;2;332;;;;vpos;;v;;a;;r&#10;Definition&#10;    crop(int $width = null, int $height = null, int $x = null, int $y = null, bool $maintainRatio = false, string $masterDim = &apos;auto&apos;)&#10;&#10;Description&#10;     Crops the image to the desired height and width. If one of the height/width values is not provided, that value will be set the appropriate value based on offsets and image dimensions.&#10;&#10;Parameters:&#10;    integer|null $width&#10;    integer|null $height&#10;    integer|null $x - X-axis coord to start cropping from the left of image&#10;    integer|null $y - Y-axis coord to start cropping from the top of image&#10;    boolean $maintainRatio&#10;    string $masterDim;;d1,314;;b1,0;;m0;;einteger|null $width;;pinteger|null $height;;pinteger|null $x;;pinteger|null $y;;pboolean $maintainRatio;;pstring $masterDim;;p">
</treenode>
<treenode node="destroyCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\BaseHandler.php;f11;158;2;163;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    destroyCookie(): bool&#10;&#10;Description&#10;     Internal method to force removal of a cookie by the client when session_destroy() is called.;;d1,159;;b2,0;;m0;;e">
</treenode>
<treenode node="ensureResource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f20;184;45;184;;;;vpos;;v;;a;;r&#10;Description&#10;     Make the image resource object if needed;;d-1,-1;;b2,0;;m0;;e">
</treenode>
<treenode node="fail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\BaseHandler.php;f11;211;2;216;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    fail(): bool&#10;&#10;Description&#10;     Fail;;d1,212;;b2,0;;m0;;e">
</treenode>
<treenode node="fit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;610;2;626;;;;vpos;;v;;a;;r&#10;Definition&#10;    fit(int $width, int $height = null, string $position = &apos;center&apos;)&#10;&#10;Description&#10;     Combine cropping and resizing into a single command.&#10;&#10;Parameters:&#10;    integer $width&#10;    integer $height&#10;    string $position;;d1,611;;b1,0;;m0;;einteger $width;;pinteger $height;;pstring $position;;p">
</treenode>
<treenode node="flatten;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;401;2;407;;;;vpos;;v;;a;;r&#10;Definition&#10;    flatten(int $red = 255, int $green = 255, int $blue = 255)&#10;&#10;Description&#10;     Flattens transparencies, default white background&#10;&#10;Parameters:&#10;    integer $red&#10;    integer $green&#10;    integer $blue;;d1,402;;b1,0;;m0;;einteger $red;;pinteger $green;;pinteger $blue;;p">
</treenode>
<treenode node="flip;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;443;2;453;;;;vpos;;v;;a;;r&#10;Definition&#10;    flip(string $dir = &apos;vertical&apos;)&#10;&#10;Description&#10;     Flips an image either horizontally or vertically.&#10;&#10;Parameters:&#10;    string $dir - Either &apos;vertical&apos; or &apos;horizontal&apos;;;d1,444;;b1,0;;m0;;estring $dir;;p">
</treenode>
<treenode node="getEXIF;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;563;2;586;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getEXIF(string $key = null, bool $silent = false)&#10;&#10;Description&#10;     Retrieve the EXIF information from the image, if possible. Returns an array of the information, or null if nothing can be found.&#10;&#10;Parameters:&#10;    string|null $key - If specified, will only return this piece of EXIF data&#10;    boolean $silent - If true, will not throw our own exceptions;;d1,564;;b1,0;;m0;;estring|null $key;;pboolean $silent;;p">
</treenode>
<treenode node="getFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;193;2;196;;;;vpos;;v;;a;;r&#10;Definition&#10;    getFile()&#10;&#10;Description&#10;     Returns the image instance.;;d1,194;;b1,0;;m0;;e">
</treenode>
<treenode node="getHeight;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;870;2;873;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getHeight()&#10;&#10;Description&#10;     Return image height.;;d1,871;;b1,0;;m0;;e">
</treenode>
<treenode node="getResource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;244;2;248;;;;vpos;;v;;aresource;;r&#10;Definition&#10;    getResource()&#10;&#10;Description&#10;     Returns the temporary image used during the image processing. Good for extending the system or doing things this library is not intended to do.;;d1,245;;b1,0;;m0;;e">
</treenode>
<treenode node="getVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f17;743;38;743;;;;vpos;;v;;astring;;r&#10;Description&#10;     Get the version of the image library in use.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getWidth;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;858;2;861;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getWidth()&#10;&#10;Description&#10;     Return image width.;;d1,859;;b1,0;;m0;;e">
</treenode>
<treenode node="handle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\BaseHandler.php;f17;101;56;101;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Handles logging the message. If the handler returns false, then execution of handlers will stop. Any handlers that have not run, yet, will not be run.&#10;&#10;Parameters:&#10;     $level&#10;     $message;;d-1,-1;;b1,0;;m0;;e $level;;p $message;;p">
</treenode>
<treenode node="image;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f11;204;2;233;;;;vpos;;v;;aImage;;r&#10;Definition&#10;    image(): Image&#10;&#10;Description&#10;     Verifies that a file has been supplied and it is an image.&#10;&#10;Return:&#10;   The image instance;;d1,205;;b2,0;;m0;;e">
</treenode>
<treenode node="lockSession;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\BaseHandler.php;f11;176;2;180;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    lockSession(string $sessionID): bool&#10;&#10;Description&#10;     A dummy method allowing drivers with no locking functionality (databases other than PostgreSQL and MySQL) to act as if they do acquire a lock.&#10;&#10;Parameters:&#10;    string $sessionID;;d1,177;;b2,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="process;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f20;770;52;770;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Does the driver-specific processing of the image.&#10;&#10;Parameters:&#10;    string $action;;d-1,-1;;b2,0;;m0;;estring $action;;p">
</treenode>
<treenode node="releaseLock;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\BaseHandler.php;f11;189;2;194;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    releaseLock(): bool&#10;&#10;Description&#10;     Releases the lock, if any.;;d1,190;;b2,0;;m0;;e">
</treenode>
<treenode node="reorient;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;522;2;548;;;;vpos;;v;;a;;r&#10;Definition&#10;    reorient(bool $silent = false)&#10;&#10;Description&#10;     Reads the EXIF information from the image and modifies the orientation so that displays correctly in the browser. This is especially an issue with images taken by smartphones who always store the image up-right, but set the orientation flag to display it correctly.&#10;&#10;Parameters:&#10;    boolean $silent - If true, will ignore exceptions when PHP doesn&apos;t support EXIF;;d1,523;;b1,0;;m0;;eboolean $silent;;p">
</treenode>
<treenode node="reproportion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f11;805;2;847;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    reproportion()&#10;&#10;Description&#10;     Re-proportion Image Width/Height;;d1,806;;b2,0;;m0;;e">
</treenode>
<treenode node="resize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;277;2;295;;;;vpos;;v;;aBaseHandler;;r&#10;Definition&#10;    resize(int $width, int $height, bool $maintainRatio = false, string $masterDim = &apos;auto&apos;)&#10;&#10;Description&#10;     Resize the image&#10;&#10;Parameters:&#10;    integer $width&#10;    integer $height&#10;    boolean $maintainRatio - If true, will get the closest match possible while keeping aspect ratio true&#10;    string $masterDim;;d1,278;;b1,0;;m0;;einteger $width;;pinteger $height;;pboolean $maintainRatio;;pstring $masterDim;;p">
</treenode>
<treenode node="rotate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;359;2;388;;;;vpos;;v;;a;;r&#10;Definition&#10;    rotate(float $angle)&#10;&#10;Description&#10;     Rotates the image on the current canvas.&#10;&#10;Parameters:&#10;    float $angle;;d1,360;;b1,0;;m0;;efloat $angle;;p">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f17;759;72;759;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     Saves any changes that have been made to file.&#10;&#10;Parameters:&#10;    string|null $target&#10;    integer $quality;;d-1,-1;;b1,0;;m0;;estring|null $target;;pinteger $quality;;p">
</treenode>
<treenode node="setDateFormat;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\BaseHandler.php;f8;112;2;117;;;;vpos;;v;;aHandlerInterface;;r&#10;Definition&#10;    setDateFormat(string $format): HandlerInterface&#10;&#10;Description&#10;     Stores the date format to use while logging messages.&#10;&#10;Parameters:&#10;    string $format;;d1,113;;b1,0;;m0;;estring $format;;p">
</treenode>
<treenode node="substr;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Handlers\BaseHandler.php;f18;92;2;95;;;;vpos;;v;;astring;;r&#10;Definition&#10;    substr($str, $start, $length = null)&#10;&#10;Description&#10;     Byte-safe substr()&#10;&#10;Parameters:&#10;    string $str&#10;    integer $start&#10;    integer $length;;d1,93;;b2,5;;m0;;estring $str;;pinteger $start;;pinteger $length;;p">
</treenode>
<treenode node="text;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;489;2;498;;;;vpos;;v;;a;;r&#10;Definition&#10;    text(string $text, array $options = [])&#10;&#10;Description&#10;     Overlays a string of text over the image.&#10;&#10;Parameters:&#10;    string $text&#10;    array $options;;d1,490;;b1,0;;m0;;estring $text;;parray $options;;p">
</treenode>
<treenode node="withFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;163;2;177;;;;vpos;;v;;a;;r&#10;Definition&#10;    withFile(string $path)&#10;&#10;Description&#10;     Sets another image for this handler to work on. Keeps us from needing to continually instantiate the handler.&#10;&#10;Parameters:&#10;    string $path;;d1,164;;b1,0;;m0;;estring $path;;p">
</treenode>
<treenode node="withResource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\BaseHandler.php;f8;259;2;263;;;;vpos;;v;;a;;r&#10;Definition&#10;    withResource()&#10;&#10;Description&#10;     Load the temporary image used during the image processing. Some functions e.g. save() will only copy and not compress your image otherwise.;;d1,260;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="BasePreparedQuery;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f9;46;1;273;;;;vpos;;v;;aPreparedQueryInterface;;c;;r&#10;Definition&#10;    class BasePreparedQuery implements PreparedQueryInterface&#10;&#10;Description&#10;     Base prepared query;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f8;92;2;95;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(ConnectionInterface $db)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \CodeIgniter\Database\ConnectionInterface $db;;d1,93;;b1,0;;m0;;e\CodeIgniter\Database\ConnectionInterface $db;;p">
</treenode>
<treenode node="_execute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f17;191;53;191;;;;vpos;;v;;aboolean;;r&#10;Description&#10;     The database dependant version of the execute method.&#10;&#10;Parameters:&#10;    array $data;;d-1,-1;;b1,0;;m0;;earray $data;;p">
</treenode>
<treenode node="_getResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f17;200;38;200;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the result object for the prepared query.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="_prepare;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f17;146;68;146;;;;vpos;;v;;amixed;;r&#10;Description&#10;     The database-dependent portion of the prepare statement.&#10;&#10;Parameters:&#10;    string $sql&#10;    array $options - Passed to the connection&apos;s prepare statement;;d-1,-1;;b1,0;;m0;;estring $sql;;parray $options;;p">
</treenode>
<treenode node="close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f8;209;2;217;;;;vpos;;v;;anull;;r&#10;Definition&#10;    close()&#10;&#10;Description&#10;     Explicitly closes the statement.&#10;&#10;Return:&#10;   |void;;d1,210;;b1,0;;m0;;e">
</treenode>
<treenode node="execute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f8;158;2;180;;;;vpos;;v;;aResultInterface;;r&#10;Definition&#10;    execute(...$data)&#10;&#10;Description&#10;     Takes a new set of data and runs it against the currently prepared query. Upon success, will return a Results object.&#10;&#10;Parameters:&#10;    array $data;;d1,159;;b1,0;;m0;;earray $data;;p">
</treenode>
<treenode node="getErrorCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f8;255;2;258;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getErrorCode(): int&#10;&#10;Description&#10;     Returns the error code created while executing this statement.;;d1,256;;b1,0;;m0;;e">
</treenode>
<treenode node="getErrorMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f8;267;2;270;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getErrorMessage(): string&#10;&#10;Description&#10;     Returns the error message created while executing this statement.;;d1,268;;b1,0;;m0;;e">
</treenode>
<treenode node="getQueryString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f8;226;2;234;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getQueryString(): string&#10;&#10;Description&#10;     Returns the SQL that has been prepared.;;d1,227;;b1,0;;m0;;e">
</treenode>
<treenode node="hasError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f8;243;2;246;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasError(): bool&#10;&#10;Description&#10;     A helper to determine if any error exists.;;d1,244;;b1,0;;m0;;e">
</treenode>
<treenode node="prepare;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BasePreparedQuery.php;f8;112;2;134;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    prepare(string $sql, array $options = [], string $queryClass = &apos;CodeIgniter\\Database\\Query&apos;)&#10;&#10;Description&#10;     Prepares the query against the database, and saves the connection info necessary to execute the query later.&#10;&#10;Parameters:&#10;    string $sql&#10;    array $options - Passed to the connection&apos;s prepare statement&#10;    string $queryClass;;d1,113;;b1,0;;m0;;estring $sql;;parray $options;;pstring $queryClass;;p">
</treenode>
</treenode>
<treenode node="BaseResetter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\BaseResetter.php;f0;2;1;30;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="getResetterSettings;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\BaseResetter.php;f11;25;5;28;;;;vpos;;v;;a;;r&#10;Definition&#10;    getResetterSettings()&#10;&#10;Description&#10;     Gets a config settings for current Resetter.;;d4,26;;b1,0;;m0;;e">
</treenode>
<treenode node="setConfig;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\BaseResetter.php;f11;13;5;18;;;;vpos;;v;;a;;r&#10;Definition&#10;    setConfig($config)&#10;&#10;Description&#10;     Allows for setting a config file on the Resetter.&#10;&#10;Parameters:&#10;     $config;;d4,14;;b1,0;;m0;;e $config;;p">
</treenode>
</treenode>
<treenode node="BaseResult;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f9;46;1;630;;;;vpos;;v;;aResultInterface;;c;;r&#10;Definition&#10;    class BaseResult implements ResultInterface&#10;&#10;Description&#10;     Class BaseResult;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;113;2;117;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(&amp;$connID, &amp;$resultID)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    object|resource $connID&#10;    object|resource $resultID;;d1,114;;b1,0;;m0;;eobject|resource $connID;;pobject|resource $resultID;;p">
</treenode>
<treenode node="dataSeek;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f17;603;46;603;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Moves the internal pointer to the desired offset. This is called internally before fetching results to make sure the result set starts at zero.&#10;&#10;Parameters:&#10;    integer $n;;d-1,-1;;b1,0;;m0;;einteger $n;;p">
</treenode>
<treenode node="fetchAssoc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f20;614;41;614;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Returns the result set as an array.;;d-1,-1;;b2,0;;m0;;e">
</treenode>
<treenode node="fetchObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f20;627;72;627;;;;vpos;;v;;aobject;;r&#10;Description&#10;     Returns the result set as an object.&#10;&#10;Parameters:&#10;    string $className;;d-1,-1;;b2,0;;m0;;estring $className;;p">
</treenode>
<treenode node="freeResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f17;590;38;590;;;;vpos;;v;;avoid;;r&#10;Description&#10;     Frees the current result.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getCustomResultObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;153;2;205;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCustomResultObject(string $className)&#10;&#10;Description&#10;     Returns the results as an array of custom objects.&#10;&#10;Parameters:&#10;    string $className - The name of the class to use;;d1,154;;b1,0;;m0;;estring $className;;p">
</treenode>
<treenode node="getCustomRowObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;351;2;366;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCustomRowObject(int $n, string $className)&#10;&#10;Description&#10;     Returns a row as a custom class instance.&#10;&#10;Parameters:&#10;    integer $n&#10;    string $className;;d1,352;;b1,0;;m0;;einteger $n;;pstring $className;;p">
</treenode>
<treenode node="getFieldCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f17;563;46;563;;;;vpos;;v;;ainteger;;r&#10;Description&#10;     Gets the number of fields in the result set.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f17;581;47;581;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Generates an array of objects representing field meta-data.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldNames;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f17;572;48;572;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Generates an array of column names in the result set.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getFirstRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;465;2;470;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getFirstRow(string $type = &apos;object&apos;)&#10;&#10;Description&#10;     Returns the &quot;first&quot; row of the current results.&#10;&#10;Parameters:&#10;    string $type;;d1,466;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getLastRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;481;2;486;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getLastRow(string $type = &apos;object&apos;)&#10;&#10;Description&#10;     Returns the &quot;last&quot; row of the current results.&#10;&#10;Parameters:&#10;    string $type;;d1,482;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getNextRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;497;2;506;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getNextRow(string $type = &apos;object&apos;)&#10;&#10;Description&#10;     Returns the &quot;next&quot; row of the current results.&#10;&#10;Parameters:&#10;    string $type;;d1,498;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getPreviousRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;517;2;531;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getPreviousRow(string $type = &apos;object&apos;)&#10;&#10;Description&#10;     Returns the &quot;previous&quot; row of the current results.&#10;&#10;Parameters:&#10;    string $type;;d1,518;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;130;2;142;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getResult(string $type = &apos;object&apos;): array&#10;&#10;Description&#10;     Retrieve the results of the query. Typically an array of individual data rows, which can be either an &apos;array&apos;, an &apos;object&apos;, or a custom class name.&#10;&#10;Parameters:&#10;    string $type - The row type;;d1,131;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="getResultArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;216;2;248;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getResultArray(): array&#10;&#10;Description&#10;     Returns the results as an array of arrays.;;d1,217;;b1,0;;m0;;e">
</treenode>
<treenode node="getResultObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;259;2;296;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getResultObject(): array&#10;&#10;Description&#10;     Returns the results as an array of objects.;;d1,260;;b1,0;;m0;;e">
</treenode>
<treenode node="getRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;311;2;337;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getRow($n = 0, string $type = &apos;object&apos;)&#10;&#10;Description&#10;     Wrapper object to return a row as either an array, an object, or a custom class.&#10;&#10;Parameters:&#10;    mixed $n - The index of the results to return&#10;    string $type - The type of result object;;d1,312;;b1,0;;m0;;emixed $n;;pstring $type;;p">
</treenode>
<treenode node="getRowArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;379;2;393;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getRowArray(int $n = 0)&#10;&#10;Description&#10;     Returns a single row from the results as an array.&#10;&#10;Parameters:&#10;    integer $n;;d1,380;;b1,0;;m0;;einteger $n;;p">
</treenode>
<treenode node="getRowObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;406;2;420;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getRowObject(int $n = 0)&#10;&#10;Description&#10;     Returns a single row from the results as an object.&#10;&#10;Parameters:&#10;    integer $n;;d1,407;;b1,0;;m0;;einteger $n;;p">
</treenode>
<treenode node="getUnbufferedRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;542;2;554;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getUnbufferedRow(string $type = &apos;object&apos;)&#10;&#10;Description&#10;     Returns an unbuffered row and move the pointer to the next row.&#10;&#10;Parameters:&#10;    string $type;;d1,543;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="setRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseResult.php;f8;432;2;454;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    setRow($key, $value = null)&#10;&#10;Description&#10;     Assigns an item into a particular column slot.&#10;&#10;Parameters:&#10;    mixed $key&#10;    mixed $value;;d1,433;;b1,0;;m0;;emixed $key;;pmixed $value;;p">
</treenode>
</treenode>
<treenode node="BaseService;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseService.php;f0;62;1;299;;;;vpos;;v;;a;;r&#10;Definition&#10;    class BaseService&#10;&#10;Description&#10;     Services Configuration file.;;d0,63;;b0,0;;m0;;e">
<treenode node="__callStatic;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseService.php;f15;192;2;202;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __callStatic(string $name, array $arguments)&#10;&#10;Description&#10;     Provides the ability to perform case-insensitive calling of service names.&#10;&#10;Parameters:&#10;    string $name&#10;    array $arguments;;d1,193;;b1,5;;m0;;estring $name;;parray $arguments;;p">
</treenode>
<treenode node="autoloader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseService.php;f15;138;2;151;;;;vpos;;v;;a;;r&#10;Definition&#10;    autoloader(bool $getShared = true)&#10;&#10;Description&#10;     The Autoloader class is the central class that handles our spl_autoload_register method, and helper methods.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,139;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
<treenode node="discoverServices;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseService.php;f18;250;2;298;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    discoverServices(string $name, array $arguments)&#10;&#10;Description&#10;     Will scan all psr4 namespaces registered with system to look for new Config\Services files. Caches a copy of each one, then looks for the service method in each, returning an instance of the service, if available.&#10;&#10;Parameters:&#10;    string $name&#10;    array $arguments;;d1,251;;b2,5;;m0;;estring $name;;parray $arguments;;p">
</treenode>
<treenode node="getSharedInstance;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseService.php;f18;107;2;126;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getSharedInstance(string $key, ...$params)&#10;&#10;Description&#10;     Returns a shared instance of any of the class&apos; services.&#10;&#10;Parameters:&#10;    string $key&#10;    array - ...$params;;d1,108;;b2,5;;m0;;estring $key;;parray;;p">
</treenode>
<treenode node="injectMock;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseService.php;f15;231;2;235;;;;vpos;;v;;a;;r&#10;Definition&#10;    injectMock(string $name, $mock)&#10;&#10;Description&#10;     Inject mock object for testing.&#10;&#10;Parameters:&#10;    string $name&#10;     $mock;;d1,232;;b1,5;;m0;;estring $name;;p $mock;;p">
</treenode>
<treenode node="locator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseService.php;f15;164;2;179;;;;vpos;;v;;a;;r&#10;Definition&#10;    locator(bool $getShared = true)&#10;&#10;Description&#10;     The file locator provides utility methods for looking for non-classes within namespaced folders, as well as convenience methods for loading &apos;helpers&apos;, and &apos;libraries&apos;.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,165;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
<treenode node="reset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\BaseService.php;f15;211;2;221;;;;vpos;;v;;a;;r&#10;Definition&#10;    reset(bool $init_autoloader = false)&#10;&#10;Description&#10;     Reset shared instances and mocks for testing.&#10;&#10;Parameters:&#10;    boolean $init_autoloader - Initializes autoloader instance;;d1,212;;b1,5;;m0;;eboolean $init_autoloader;;p">
</treenode>
</treenode>
<treenode node="BaseUtils;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f9;46;1;422;;;;vpos;;v;;a;;r&#10;Definition&#10;    class BaseUtils&#10;&#10;Description&#10;     Class BaseUtils;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f8;86;2;89;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(ConnectionInterface &amp;$db)&#10;&#10;Description&#10;     Class constructor&#10;&#10;Parameters:&#10;    ConnectionInterface|object $db;;d1,87;;b1,0;;m0;;eConnectionInterface|object $db;;p">
</treenode>
<treenode node="_backup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f17;419;54;419;;;;vpos;;v;;amixed;;r&#10;Description&#10;     Platform dependent version of the backup function.&#10;&#10;Parameters:&#10;    array|null $prefs;;d-1,-1;;b1,0;;m0;;earray|null $prefs;;p">
</treenode>
<treenode node="backup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f8;343;2;408;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    backup($params = [])&#10;&#10;Description&#10;     Database Backup&#10;&#10;Parameters:&#10;    array|string $params;;d1,344;;b1,0;;m0;;earray|string $params;;p">
</treenode>
<treenode node="databaseExists;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f8;139;2;142;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    databaseExists(string $database_name): bool&#10;&#10;Description&#10;     Determine if a particular database exists&#10;&#10;Parameters:&#10;    string $database_name;;d1,140;;b1,0;;m0;;estring $database_name;;p">
</treenode>
<treenode node="getCSVFromResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f8;267;2;290;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getCSVFromResult(ResultInterface $query, string $delim = &apos;,&apos;, string $newline = &quot;\n&quot;, string $enclosure = &apos;&quot;&apos;)&#10;&#10;Description&#10;     Generate CSV from a query result object&#10;&#10;Parameters:&#10;    ResultInterface $query - Query result object&#10;    string $delim - Delimiter (default: ,)&#10;    string $newline - Newline character (default: \n)&#10;    string $enclosure - Enclosure (default: &quot;);;d1,268;;b1,0;;m0;;eResultInterface $query;;pstring $delim;;pstring $newline;;pstring $enclosure;;p">
</treenode>
<treenode node="getXMLFromResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f8;302;2;332;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getXMLFromResult(ResultInterface $query, array $params = []): string&#10;&#10;Description&#10;     Generate XML data from a query result object&#10;&#10;Parameters:&#10;    ResultInterface $query - Query result object&#10;    array $params - Any preferences;;d1,303;;b1,0;;m0;;eResultInterface $query;;parray $params;;p">
</treenode>
<treenode node="listDatabases;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f8;99;2;129;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    listDatabases()&#10;&#10;Description&#10;     List databases&#10;&#10;Return:&#10;   |boolean;;d1,100;;b1,0;;m0;;e">
</treenode>
<treenode node="optimizeDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f8;182;2;223;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    optimizeDatabase()&#10;&#10;Description&#10;     Optimize Database;;d1,183;;b1,0;;m0;;e">
</treenode>
<treenode node="optimizeTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f8;153;2;172;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    optimizeTable(string $table_name)&#10;&#10;Description&#10;     Optimize Table&#10;&#10;Parameters:&#10;    string $table_name;;d1,154;;b1,0;;m0;;estring $table_name;;p">
</treenode>
<treenode node="repairTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\BaseUtils.php;f8;234;2;253;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    repairTable(string $table_name)&#10;&#10;Description&#10;     Repair Table&#10;&#10;Parameters:&#10;    string $table_name;;d1,235;;b1,0;;m0;;estring $table_name;;p">
</treenode>
</treenode>
<treenode node="BaseValidator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\BaseValidator.php;f0;2;1;20;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="setConfig;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\BaseValidator.php;f11;13;5;18;;;;vpos;;v;;a;;r&#10;Definition&#10;    setConfig($config)&#10;&#10;Description&#10;     Allows for setting a config file on the Validator.&#10;&#10;Parameters:&#10;     $config;;d4,14;;b1,0;;m0;;e $config;;p">
</treenode>
</treenode>
<treenode node="BasicObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f0;29;1;247;;;;vpos;;v;;a;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="ACCESS_NONE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f9;31;21;31;;;;vpos;;v;;a;;rnull;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="ACCESS_PRIVATE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f9;34;24;34;;;;vpos;;v;;a;;r3;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="ACCESS_PROTECTED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f9;33;26;33;;;;vpos;;v;;a;;r2;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="ACCESS_PUBLIC;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f9;32;23;32;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="OPERATOR_ARRAY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f9;37;24;37;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="OPERATOR_NONE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f9;36;23;36;;;;vpos;;v;;a;;rnull;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="OPERATOR_OBJECT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f9;38;25;38;;;;vpos;;v;;a;;r2;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="OPERATOR_STATIC;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f9;39;25;39;;;;vpos;;v;;a;;r3;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;57;5;59;;;;vpos;;v;;a;;r;;d4,58;;b1,0;;m0;;e">
</treenode>
<treenode node="addRepresentation;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;61;5;78;;;;vpos;;v;;a;;r;;d4,62;;b1,0;;m0;;erep;;ppos;;p">
</treenode>
<treenode node="blank;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f18;216;5;223;;;;vpos;;v;;a;;r&#10;Definition&#10;    blank($name = null, $access_path = null)&#10;&#10;Description&#10;     Creates a new basic object with a name and access path.&#10;&#10;Parameters:&#10;    null|string $name&#10;    null|string $access_path;;d4,217;;b1,5;;m0;;enull|string $name;;pnull|string $access_path;;p">
</treenode>
<treenode node="clearRepresentations;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;111;5;114;;;;vpos;;v;;a;;r;;d4,112;;b1,0;;m0;;e">
</treenode>
<treenode node="getAccess;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;138;5;148;;;;vpos;;v;;a;;r;;d4,139;;b1,0;;m0;;e">
</treenode>
<treenode node="getAccessPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;185;5;188;;;;vpos;;v;;a;;r;;d4,186;;b1,0;;m0;;e">
</treenode>
<treenode node="getModifiers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;121;5;136;;;;vpos;;v;;a;;r;;d4,122;;b1,0;;m0;;e">
</treenode>
<treenode node="getName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;150;5;153;;;;vpos;;v;;a;;r;;d4,151;;b1,0;;m0;;e">
</treenode>
<treenode node="getOperator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;155;5;165;;;;vpos;;v;;a;;r;;d4,156;;b1,0;;m0;;e">
</treenode>
<treenode node="getRepresentation;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;99;5;104;;;;vpos;;v;;a;;r;;d4,100;;b1,0;;m0;;ename;;p">
</treenode>
<treenode node="getRepresentations;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;106;5;109;;;;vpos;;v;;a;;r;;d4,107;;b1,0;;m0;;e">
</treenode>
<treenode node="getSize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;167;5;170;;;;vpos;;v;;a;;r;;d4,168;;b1,0;;m0;;e">
</treenode>
<treenode node="getType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;116;5;119;;;;vpos;;v;;a;;r;;d4,117;;b1,0;;m0;;e">
</treenode>
<treenode node="getValueShort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;172;5;183;;;;vpos;;v;;a;;r;;d4,173;;b1,0;;m0;;e">
</treenode>
<treenode node="removeRepresentation;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;90;5;97;;;;vpos;;v;;a;;r;;d4,91;;b1,0;;m0;;erep;;p">
</treenode>
<treenode node="replaceRepresentation;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;80;5;88;;;;vpos;;v;;a;;r;;d4,81;;b1,0;;m0;;erep;;ppos;;p">
</treenode>
<treenode node="sortByAccess;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f18;225;5;235;;;;vpos;;v;;a;;r;;d4,226;;b1,5;;m0;;ea;;pb;;p">
</treenode>
<treenode node="sortByName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f18;237;5;246;;;;vpos;;v;;a;;r;;d4,238;;b1,5;;m0;;ea;;pb;;p">
</treenode>
<treenode node="transplant;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BasicObject.php;f11;190;5;206;;;;vpos;;v;;a;;r;;d4,191;;b1,0;;m0;;eold;;p">
</treenode>
</treenode>
<treenode node="BinaryPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\BinaryPlugin.php;f0;29;1;50;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BinaryPlugin.php;f0;30;1;48;;;;vpos;;v;;aPlugin;;cTabPluginInterface;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BinaryPlugin.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BinaryPlugin.php;f11;32;5;35;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BinaryPlugin.php;f11;42;5;47;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="renderTab;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\BinaryPlugin.php;f11;34;5;49;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m0;;er;;p">
</treenode>
</treenode>
<treenode node="BlacklistPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\BlacklistPlugin.php;f0;29;1;43;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\BlacklistPlugin.php;f0;29;1;35;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BlacklistPlugin.php;f0;30;1;142;;;;vpos;;v;;aPlugin;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="blacklistArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BlacklistPlugin.php;f14;130;5;141;;;;vpos;;v;;a;;r;;d4,131;;b2,0;;m0;;evar;;po;;p">
</treenode>
<treenode node="blacklistObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BlacklistPlugin.php;f14;99;5;113;;;;vpos;;v;;a;;r;;d4,100;;b2,0;;m0;;evar;;po;;p">
</treenode>
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BlacklistPlugin.php;f11;65;5;68;;;;vpos;;v;;a;;r;;d4,66;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BlacklistPlugin.php;f11;60;5;63;;;;vpos;;v;;a;;r;;d4,61;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BlacklistPlugin.php;f11;70;5;78;;;;vpos;;v;;a;;r;;d4,71;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="parseArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BlacklistPlugin.php;f14;115;5;128;;;;vpos;;v;;a;;r;;d4,116;;b2,0;;m0;;evar;;po;;p">
</treenode>
<treenode node="parseObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\BlacklistPlugin.php;f14;80;5;97;;;;vpos;;v;;a;;r;;d4,81;;b2,0;;m0;;evar;;po;;p">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\BlacklistPlugin.php;f11;31;5;42;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\BlacklistPlugin.php;f11;31;5;34;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="BlobObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BlobObject.php;f0;27;1;176;;;;vpos;;v;;aBasicObject;;c;;r;;d0,28;;b0,0;;m0;;e">
<treenode node="detectEncoding;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BlobObject.php;f18;146;5;175;;;;vpos;;v;;a;;r;;d4,147;;b1,5;;m0;;estring;;p">
</treenode>
<treenode node="getType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BlobObject.php;f11;82;5;93;;;;vpos;;v;;a;;r;;d4,83;;b1,0;;m0;;e">
</treenode>
<treenode node="getValueShort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BlobObject.php;f11;95;5;100;;;;vpos;;v;;a;;r;;d4,96;;b1,0;;m0;;e">
</treenode>
<treenode node="strlen;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BlobObject.php;f18;111;5;124;;;;vpos;;v;;a;;r;;d4,112;;b1,5;;m0;;estring;;pencoding;;p">
</treenode>
<treenode node="substr;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BlobObject.php;f18;126;5;144;;;;vpos;;v;;a;;r;;d4,127;;b1,5;;m0;;estring;;pstart;;plength;;pencoding;;p">
</treenode>
<treenode node="transplant;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\BlobObject.php;f11;102;5;109;;;;vpos;;v;;a;;r;;d4,103;;b1,0;;m0;;eold;;p">
</treenode>
</treenode>
<treenode node="Builder;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Builder.php;f0;46;1;108;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f0;46;1;432;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Builder.php;f0;46;1;87;;;;vpos;;v;;aBaseBuilder;;c;;r&#10;Definition&#10;    class Builder extends BaseBuilder&#10;&#10;Description&#10;     Builder for SQLite3;;d0,47;;b0,0;;m0;;e">
<treenode node="_delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f11;356;2;360;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _delete(string $table): string&#10;&#10;Description&#10;     Delete statement&#10;&#10;Parameters:&#10;    string $table - The table name;;d1,357;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_fromTables;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Builder.php;f11;78;2;86;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _fromTables(): string&#10;&#10;Description&#10;     FROM tables;;d1,79;;b2,0;;m0;;e">
</treenode>
<treenode node="_like_statement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f8;399;2;404;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _like_statement(string $prefix = null, string $column, string $not = null, string $bind, bool $insensitiveSearch = false): string&#10;&#10;Description&#10;     Platform independent LIKE statement builder.&#10;&#10;Parameters:&#10;    string $prefix&#10;    string $column&#10;    string $not&#10;    string $bind&#10;    boolean $insensitiveSearch&#10;&#10;Return:&#10;   $like_statement;;d1,400;;b1,0;;m0;;estring $prefix;;pstring $column;;pstring $not;;pstring $bind;;pboolean $insensitiveSearch;;p">
</treenode>
<treenode node="_limit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f11;272;2;275;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _limit(string $sql, bool $offsetIgnore = false): string&#10;&#10;Description&#10;     LIMIT string&#10;&#10;Parameters:&#10;    string $sql - SQL Query;;d1,273;;b2,0;;m0;;esql;;poffsetIgnore;;p">
</treenode>
<treenode node="_replace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Builder.php;f11;85;2;88;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _replace(string $table, array $keys, array $values): string&#10;&#10;Description&#10;     Replace statement&#10;&#10;Parameters:&#10;    string $table - the table name&#10;    array $keys - the insert keys&#10;    array $values - the insert values;;d1,86;;b2,0;;m0;;estring $table;;parray $keys;;parray $values;;p">
</treenode>
<treenode node="_truncate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Builder.php;f11;103;2;106;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f11;376;2;379;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _truncate(string $table): string&#10;&#10;Description&#10;     Truncate statement&#10;&#10;Parameters:&#10;    string $table;;d1,104;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_update;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f11;292;2;301;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _update(string $table, array $values): string&#10;&#10;Description&#10;     Update statement&#10;&#10;Parameters:&#10;    string $table&#10;    array $values;;d1,293;;b2,0;;m0;;estring $table;;parray $values;;p">
</treenode>
<treenode node="_updateBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f11;316;2;343;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _updateBatch(string $table, array $values, string $index): string&#10;&#10;Description&#10;     Update_Batch statement&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    array $values - Update data&#10;    string $index - WHERE key;;d1,317;;b2,0;;m0;;estring $table;;parray $values;;pstring $index;;p">
</treenode>
<treenode node="compileIgnore;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f11;80;2;90;;;;vpos;;v;;astring;;r&#10;Definition&#10;    compileIgnore(string $statement)&#10;&#10;Description&#10;     Compile Ignore Statement&#10;&#10;Parameters:&#10;    string $statement;;d1,81;;b2,0;;m0;;estring $statement;;p">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f8;159;2;166;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    decrement(string $column, int $value = 1)&#10;&#10;Description&#10;     Decrements a numeric column by the specified value.&#10;&#10;Parameters:&#10;    string $column&#10;    integer $value;;d1,160;;b1,0;;m0;;estring $column;;pinteger $value;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f8;251;2;259;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    delete($where = &apos;&apos;, int $limit = null, bool $reset_data = true)&#10;&#10;Description&#10;     Delete&#10;&#10;Parameters:&#10;    mixed $where&#10;    integer $limit&#10;    boolean $reset_data;;d1,252;;b1,0;;m0;;emixed $where;;pinteger $limit;;pboolean $reset_data;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f8;138;2;145;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    increment(string $column, int $value = 1)&#10;&#10;Description&#10;     Increments a numeric column by the specified value.&#10;&#10;Parameters:&#10;    string $column&#10;    integer $value;;d1,139;;b1,0;;m0;;estring $column;;pinteger $value;;p">
</treenode>
<treenode node="join;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f8;420;2;428;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    join(string $table, string $cond, string $type = &apos;&apos;, bool $escape = null)&#10;&#10;Description&#10;     JOIN&#10;&#10;Parameters:&#10;    string $table&#10;    string $cond - The join condition&#10;    string $type - The type of join&#10;    boolean $escape - Whether not to try to escape identifiers;;d1,421;;b1,0;;m0;;estring $table;;pstring $cond;;pstring $type;;pboolean $escape;;p">
</treenode>
<treenode node="orderBy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f8;103;2;124;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    orderBy(string $orderBy, string $direction = &apos;&apos;, bool $escape = null)&#10;&#10;Description&#10;     ORDER BY&#10;&#10;Parameters:&#10;    string $orderBy&#10;    string $direction - ASC, DESC or RANDOM&#10;    boolean $escape;;d1,104;;b1,0;;m0;;estring $orderBy;;pstring $direction;;pboolean $escape;;p">
</treenode>
<treenode node="replace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Builder.php;f8;184;2;232;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    replace(array $set = null)&#10;&#10;Description&#10;     Replace&#10;&#10;Parameters:&#10;    array $set - An associative array of insert values;;d1,185;;b1,0;;m0;;earray $set;;p">
</treenode>
</treenode>
<treenode node="Cache;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\Cache.php;f0;4;1;119;;;;vpos;;v;;aBaseConfig;;c;;r;;d0,5;;b0,0;;m0;;e">
</treenode>
<treenode node="CacheException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Exceptions\CacheException.php;f0;43;1;86;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r&#10;Definition&#10;    class CacheException extends \RuntimeException implements ExceptionInterface&#10;&#10;Description&#10;     CacheException;;d0,44;;b0,0;;m0;;e">
<treenode node="forHandlerNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Exceptions\CacheException.php;f15;82;2;85;;;;vpos;;v;;a;;r&#10;Definition&#10;    forHandlerNotFound()&#10;&#10;Description&#10;     Thrown when specified handler was not found.;;d1,83;;b1,5;;m0;;e">
</treenode>
<treenode node="forInvalidHandlers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Exceptions\CacheException.php;f15;62;2;65;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidHandlers()&#10;&#10;Description&#10;     Thrown when an unrecognized handler is used.;;d1,63;;b1,5;;m0;;e">
</treenode>
<treenode node="forNoBackup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Exceptions\CacheException.php;f15;72;2;75;;;;vpos;;v;;a;;r&#10;Definition&#10;    forNoBackup()&#10;&#10;Description&#10;     Thrown when no backup handler is setup in config.;;d1,73;;b1,5;;m0;;e">
</treenode>
<treenode node="forUnableToWrite;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Exceptions\CacheException.php;f15;52;2;55;;;;vpos;;v;;a;;r&#10;Definition&#10;    forUnableToWrite(string $path)&#10;&#10;Description&#10;     Thrown when handler has no permission to write cache.&#10;&#10;Parameters:&#10;    string $path;;d1,53;;b1,5;;m0;;estring $path;;p">
</treenode>
</treenode>
<treenode node="CacheFactory;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheFactory.php;f0;51;1;116;;;;vpos;;v;;a;;r&#10;Definition&#10;    class CacheFactory&#10;&#10;Description&#10;     Class Cache;;d0,52;;b0,0;;m0;;e">
<treenode node="getHandler;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\CacheFactory.php;f15;62;2;113;;;;vpos;;v;;a;;r&#10;Definition&#10;    getHandler($config, string $handler = null, string $backup = null)&#10;&#10;Description&#10;     Attempts to create the desired cache handler, based upon the&#10;&#10;Parameters:&#10;    \Config\Cache $config&#10;    string|null $handler&#10;    string|null $backup;;d1,63;;b1,5;;m0;;e\Config\Cache $config;;pstring|null $handler;;pstring|null $backup;;p">
</treenode>
</treenode>
<treenode node="CallablePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\CallablePlugin.php;f0;33;1;173;;;;vpos;;v;;aPlugin;;cObjectPluginInterface;;c;;r;;d0,34;;b0,0;;m0;;e">
<treenode node="renderCallable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\CallablePlugin.php;f14;74;5;96;;;;vpos;;v;;a;;r;;d4,75;;b2,0;;m0;;eo;;p">
</treenode>
<treenode node="renderClosure;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\CallablePlugin.php;f14;50;5;72;;;;vpos;;v;;a;;r;;d4,51;;b2,0;;m0;;eo;;p">
</treenode>
<treenode node="renderMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\CallablePlugin.php;f14;98;5;172;;;;vpos;;v;;a;;r;;d4,99;;b2,0;;m0;;eo;;p">
</treenode>
<treenode node="renderObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\CallablePlugin.php;f11;37;5;48;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="CallFinder;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\CallFinder.php;f0;27;1;472;;;;vpos;;v;;a;;r;;d0,28;;b0,0;;m0;;e">
<treenode node="getFunctionCalls;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\CallFinder.php;f18;116;5;366;;;;vpos;;v;;a;;r;;d4,117;;b1,5;;m0;;esource;;pline;;pfunction;;p">
</treenode>
<treenode node="realTokenIndex;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\CallFinder.php;f19;368;5;381;;;;vpos;;v;;a;;r;;d4,369;;b3,5;;m0;;etokens;;pindex;;p">
</treenode>
<treenode node="tokenIsOperator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\CallFinder.php;f19;392;5;395;;;;vpos;;v;;abool;;r&#10;Definition&#10;    tokenIsOperator($token)&#10;&#10;Description&#10;     We need a separate method to check if tokens are operators because we occasionally add &quot;...&quot; to short parameter versions. If we simply check for `$token[0]` then &quot;...&quot; will incorrectly match the &quot;.&quot; operator.&#10;&#10;Parameters:&#10;    array|string $token - The token to check;;d4,393;;b3,5;;m0;;earray|string $token;;p">
</treenode>
<treenode node="tokensFormatted;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\CallFinder.php;f19;435;5;471;;;;vpos;;v;;a;;r;;d4,436;;b3,5;;m0;;etokens;;p">
</treenode>
<treenode node="tokensToString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\CallFinder.php;f19;397;5;410;;;;vpos;;v;;a;;r;;d4,398;;b3,5;;m0;;etokens;;p">
</treenode>
<treenode node="tokensTrim;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\CallFinder.php;f19;412;5;433;;;;vpos;;v;;a;;r;;d4,413;;b3,5;;m0;;etokens;;p">
</treenode>
</treenode>
<treenode node="CastException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\CastException.php;f0;6;1;35;;;;vpos;;v;;aCriticalError;;c;;r&#10;Definition&#10;    class CastException extends CriticalError&#10;&#10;Description&#10;     Cast Exceptions.;;d0,7;;b0,0;;m0;;e">
<treenode node="forInvalidJsonFormatException;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\CastException.php;f15;16;2;33;;;;vpos;;v;;a;;r;;d1,17;;b1,5;;m0;;eerror;;p">
</treenode>
</treenode>
<treenode node="Cell;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\View\Cell.php;f0;72;1;282;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Cell&#10;&#10;Description&#10;     Class Cell;;d0,73;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Cell.php;f8;89;2;92;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(CacheInterface $cache)&#10;&#10;Description&#10;     Cell constructor.&#10;&#10;Parameters:&#10;    \CodeIgniter\Cache\CacheInterface $cache;;d1,90;;b1,0;;m0;;e\CodeIgniter\Cache\CacheInterface $cache;;p">
</treenode>
<treenode node="determineClass;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Cell.php;f11;252;2;279;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    determineClass(string $library): array&#10;&#10;Description&#10;     Given the library string, attempts to determine the class and method to call.&#10;&#10;Parameters:&#10;    string $library;;d1,253;;b2,0;;m0;;estring $library;;p">
</treenode>
<treenode node="prepareParams;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Cell.php;f8;200;2;240;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    prepareParams($params)&#10;&#10;Description&#10;     Parses the params attribute. If an array, returns untouched. If a string, it should be in the format &quot;key1=value key2=value&quot;. It will be split and returned as an array.&#10;&#10;Parameters:&#10;     $params&#10;&#10;Return:&#10;   |null;;d1,201;;b1,0;;m0;;e $params;;p">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Cell.php;f8;107;2;187;;;;vpos;;v;;astring;;r&#10;Definition&#10;    render(string $library, $params = null, int $ttl = 0, string $cacheName = null): string&#10;&#10;Description&#10;     Render a cell, returning its body as a string.&#10;&#10;Parameters:&#10;    string $library&#10;    null $params&#10;    integer $ttl&#10;    string|null $cacheName;;d1,108;;b1,0;;m0;;estring $library;;pnull $params;;pinteger $ttl;;pstring|null $cacheName;;p">
</treenode>
</treenode>
<treenode node="ChromeLoggerHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\ChromeLoggerHandler.php;f0;54;1;215;;;;vpos;;v;;aBaseHandler;;cHandlerInterface;;c;;r&#10;Definition&#10;    class ChromeLoggerHandler extends BaseHandler implements HandlerInterface&#10;&#10;Description&#10;     Class ChromeLoggerHandler;;d0,55;;b0,0;;m0;;e">
<treenode node="VERSION;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\ChromeLoggerHandler.php;f6;62;14;62;;;;vposfloat;;v;;a;;r1.0;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\ChromeLoggerHandler.php;f8;116;2;123;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(array $config = [])&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    array $config;;d1,117;;b1,0;;m0;;earray $config;;p">
</treenode>
<treenode node="format;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\ChromeLoggerHandler.php;f11;181;2;194;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    format($object)&#10;&#10;Description&#10;     Converts the object to display nicely in the Chrome Logger UI.&#10;&#10;Parameters:&#10;     $object;;d1,182;;b2,0;;m0;;e $object;;p">
</treenode>
<treenode node="handle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\ChromeLoggerHandler.php;f8;138;2;170;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    handle($level, $message): bool&#10;&#10;Description&#10;     Handles logging the message. If the handler returns false, then execution of handlers will stop. Any handlers that have not run, yet, will not be run.&#10;&#10;Parameters:&#10;     $level&#10;     $message;;d1,139;;b1,0;;m0;;e $level;;p $message;;p">
</treenode>
<treenode node="sendLogs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\ChromeLoggerHandler.php;f8;203;2;213;;;;vpos;;v;;a;;r&#10;Definition&#10;    sendLogs(ResponseInterface &amp;$response = null)&#10;&#10;Description&#10;     Attaches the header and the content to the passed in request object.&#10;&#10;Parameters:&#10;    ResponseInterface $response;;d1,204;;b1,0;;m0;;eResponseInterface $response;;p">
</treenode>
</treenode>
<treenode node="CIDatabaseTestCase;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f0;50;1;387;;;;vpos;;v;;aCIUnitTestCase;;c;;r&#10;Definition&#10;    class CIDatabaseTestCase extends CIUnitTestCase&#10;&#10;Description&#10;     CIDatabaseTestCase;;d0,51;;b0,0;;m0;;e">
<treenode node="dontSeeInDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f8;287;2;294;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    dontSeeInDatabase(string $table, array $where)&#10;&#10;Description&#10;     Asserts that records that match the conditions in $where do not exist in the database.&#10;&#10;Parameters:&#10;    string $table&#10;    array $where;;d1,288;;b1,0;;m0;;estring $table;;parray $where;;p">
</treenode>
<treenode node="grabFromDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f8;330;2;340;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    grabFromDatabase(string $table, string $column, array $where)&#10;&#10;Description&#10;     Fetches a single column from a database row with criteria matching $where.&#10;&#10;Parameters:&#10;    string $table&#10;    string $column&#10;    array $where;;d1,331;;b1,0;;m0;;estring $table;;pstring $column;;parray $where;;p">
</treenode>
<treenode node="hasInDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f8;353;2;362;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasInDatabase(string $table, array $data)&#10;&#10;Description&#10;     Inserts a row into to the database. This row will be removed after the test has run.&#10;&#10;Parameters:&#10;    string $table&#10;    array $data;;d1,354;;b1,0;;m0;;estring $table;;parray $data;;p">
</treenode>
<treenode node="loadDependencies;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f8;128;2;151;;;;vpos;;v;;a;;r&#10;Definition&#10;    loadDependencies()&#10;&#10;Description&#10;     Load any database test dependencies.;;d1,129;;b1,0;;m0;;e">
</treenode>
<treenode node="migrateDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f11;243;2;262;;;;vpos;;v;;a;;r&#10;Definition&#10;    migrateDatabase()&#10;&#10;Description&#10;     Run migrations as defined by the class;;d1,244;;b2,0;;m0;;e">
</treenode>
<treenode node="regressDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f11;218;2;238;;;;vpos;;v;;a;;r&#10;Definition&#10;    regressDatabase()&#10;&#10;Description&#10;     Regress migrations as defined by the class;;d1,219;;b2,0;;m0;;e">
</treenode>
<treenode node="seed;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f8;269;2;272;;;;vpos;;v;;a;;r&#10;Definition&#10;    seed(string $name)&#10;&#10;Description&#10;     Seeds that database with a specific seeder.&#10;&#10;Parameters:&#10;    string $name;;d1,270;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="seeInDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f8;308;2;315;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    seeInDatabase(string $table, array $where)&#10;&#10;Description&#10;     Asserts that records that match the conditions in $where DO exist in the database.&#10;&#10;Parameters:&#10;    string $table&#10;    array $where;;d1,309;;b1,0;;m0;;estring $table;;parray $where;;p">
</treenode>
<treenode node="seeNumRecords;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f8;377;2;384;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    seeNumRecords(int $expected, string $table, array $where)&#10;&#10;Description&#10;     Asserts that the number of rows in the database that match $where is equal to $expected.&#10;&#10;Parameters:&#10;    integer $expected&#10;    string $table&#10;    array $where;;d1,378;;b1,0;;m0;;einteger $expected;;pstring $table;;parray $where;;p">
</treenode>
<treenode node="setUp;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f11;161;2;190;;;;vpos;;v;;a;;r&#10;Definition&#10;    setUp(): void&#10;&#10;Description&#10;     Ensures that the database is cleaned up to a known state before each test runs.;;d1,162;;b2,0;;m0;;e">
</treenode>
<treenode node="tearDown;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIDatabaseTestCase.php;f11;198;2;211;;;;vpos;;v;;a;;r&#10;Definition&#10;    tearDown(): void&#10;&#10;Description&#10;     Takes care of any required cleanup after the test, like removing any rows inserted via $this-&gt;hasInDatabase();;d1,199;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="CITestStreamFilter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Filters\CITestStreamFilter.php;f0;47;1;76;;;;vpos;;v;;aphp_user_filter;;c;;r&#10;Definition&#10;    class CITestStreamFilter extends \php_user_filter&#10;&#10;Description&#10;     Class to extract an output snapshot. Used to capture output during unit testing, so that it can be used in assertions.;;d0,48;;b0,0;;m0;;e">
<treenode node="filter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Filters\CITestStreamFilter.php;f8;66;2;74;;;;vpos;;v;;atype;;r&#10;Definition&#10;    filter($in, $out, &amp;$consumed, $closing)&#10;&#10;Description&#10;     Output filtering - catch it all.&#10;&#10;Parameters:&#10;    type $in&#10;    type $out&#10;    type $consumed&#10;    type $closing;;d1,67;;b1,0;;m0;;etype $in;;ptype $out;;ptype $consumed;;ptype $closing;;p">
</treenode>
</treenode>
<treenode node="CIUnitTestCase;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f0;51;1;360;;;;vpos;;v;;aTestCase;;cReflectionHelper;;c;;r&#10;Definition&#10;    class CIUnitTestCase extends TestCase&#10;&#10;Description&#10;     PHPunit test case.;;d0,52;;b0,0;;m0;;e">
<treenode node="assertCloseEnough;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f8;271;2;276;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertCloseEnough(int $expected, $actual, string $message = &apos;&apos;, int $tolerance = 1)&#10;&#10;Description&#10;     Custom function to test that two values are &quot;close enough&quot;. This is intended for extended execution time testing, where the result is close but not exactly equal to the expected time, for reasons beyond our control.&#10;&#10;Parameters:&#10;    integer $expected&#10;    mixed $actual&#10;    string $message&#10;    integer $tolerance;;d1,272;;b1,0;;m0;;einteger $expected;;pmixed $actual;;pstring $message;;pinteger $tolerance;;p">
</treenode>
<treenode node="assertCloseEnoughString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f8;292;2;313;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    assertCloseEnoughString($expected, $actual, string $message = &apos;&apos;, int $tolerance = 1)&#10;&#10;Description&#10;     Custom function to test that two values are &quot;close enough&quot;. This is intended for extended execution time testing, where the result is close but not exactly equal to the expected time, for reasons beyond our control.&#10;&#10;Parameters:&#10;    mixed $expected&#10;    mixed $actual&#10;    string $message&#10;    integer $tolerance;;d1,293;;b1,0;;m0;;emixed $expected;;pmixed $actual;;pstring $message;;pinteger $tolerance;;p">
</treenode>
<treenode node="assertEventTriggered;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f8;173;2;191;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    assertEventTriggered(string $eventName): bool&#10;&#10;Description&#10;     Hooks into CodeIgniter&apos;s Events system to check if a specific event was triggered or not.&#10;&#10;Parameters:&#10;    string $eventName;;d1,174;;b1,0;;m0;;estring $eventName;;p">
</treenode>
<treenode node="assertHeaderEmitted;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f8;202;2;223;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertHeaderEmitted(string $header, bool $ignoreCase = false): void&#10;&#10;Description&#10;     Hooks into xdebug&apos;s headers capture, looking for a specific header emitted&#10;&#10;Parameters:&#10;    string $header - The leading portion of the header we are looking for&#10;    boolean $ignoreCase;;d1,203;;b1,0;;m0;;estring $header;;pboolean $ignoreCase;;p">
</treenode>
<treenode node="assertHeaderNotEmitted;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f8;234;2;256;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertHeaderNotEmitted(string $header, bool $ignoreCase = false): void&#10;&#10;Description&#10;     Hooks into xdebug&apos;s headers capture, looking for a specific header emitted&#10;&#10;Parameters:&#10;    string $header - The leading portion of the header we don&apos;t want to find&#10;    boolean $ignoreCase;;d1,235;;b1,0;;m0;;estring $header;;pboolean $ignoreCase;;p">
</treenode>
<treenode node="assertLogged;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f8;156;2;162;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    assertLogged(string $level, $expectedMessage = null)&#10;&#10;Description&#10;     Custom function to hook into CodeIgniter&apos;s Logging mechanism to check if certain messages were logged during code execution.&#10;&#10;Parameters:&#10;    string $level&#10;    null $expectedMessage;;d1,157;;b1,0;;m0;;estring $level;;pnull $expectedMessage;;p">
</treenode>
<treenode node="createApplication;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f11;325;2;328;;;;vpos;;v;;a;;r&#10;Definition&#10;    createApplication()&#10;&#10;Description&#10;     Loads up an instance of CodeIgniter and gets the environment setup.;;d1,326;;b2,0;;m0;;e">
</treenode>
<treenode node="getHeaderEmitted;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f11;338;79;338;;;;vpos;;v;;astring;;r&#10;Description&#10;     Return first matching emitted header.&#10;&#10;Parameters:&#10;    string $header - Identifier of the header of interest&#10;    boolean $ignoreCase&#10;&#10;Return:&#10;   |null The value of the header found, null if not found;;d-1,-1;;b2,0;;m0;;estring $header;;pboolean $ignoreCase;;p">
</treenode>
<treenode node="mockEmail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f11;137;2;140;;;;vpos;;v;;a;;r&#10;Definition&#10;    mockEmail()&#10;&#10;Description&#10;     Injects the mock email driver so no emails really send;;d1,138;;b2,0;;m0;;e">
</treenode>
<treenode node="mockSession;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f11;124;2;132;;;;vpos;;v;;a;;r&#10;Definition&#10;    mockSession()&#10;&#10;Description&#10;     Injects the mock session driver into Services;;d1,125;;b2,0;;m0;;e">
</treenode>
<treenode node="setUp;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f11;92;2;105;;;;vpos;;v;;a void;;r;;d1,93;;b2,0;;m0;;e">
</treenode>
<treenode node="setUpBeforeClass;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f15;85;2;90;;;;vpos;;v;;a;;r&#10;Definition&#10;    setUpBeforeClass(): void&#10;&#10;Description&#10;     Load the helpers.;;d1,86;;b1,5;;m0;;e">
</treenode>
<treenode node="tearDown;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\CIUnitTestCase.php;f11;107;2;115;;;;vpos;;v;;a void;;r;;d1,108;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="ClassMethodsPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassMethodsPlugin.php;f0;33;1;112;;;;vpos;;v;;aPlugin;;c;;r;;d0,34;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassMethodsPlugin.php;f11;42;5;45;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassMethodsPlugin.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassMethodsPlugin.php;f11;47;5;91;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="sort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassMethodsPlugin.php;f19;93;5;111;;;;vpos;;v;;a;;r;;d4,94;;b3,5;;m0;;ea;;pb;;p">
</treenode>
</treenode>
<treenode node="ClassStaticsPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassStaticsPlugin.php;f0;33;1;121;;;;vpos;;v;;aPlugin;;c;;r;;d0,34;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassStaticsPlugin.php;f11;42;5;45;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassStaticsPlugin.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassStaticsPlugin.php;f11;47;5;105;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="sort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClassStaticsPlugin.php;f19;107;5;120;;;;vpos;;v;;a;;r;;d4,108;;b3,5;;m0;;ea;;pb;;p">
</treenode>
</treenode>
<treenode node="ClearCache;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Cache\ClearCache.php;f0;6;1;72;;;;vpos;;v;;aBaseCommand;;c;;r;;d0,7;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Cache\ClearCache.php;f8;50;2;71;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params = [])&#10;&#10;Description&#10;     Creates a new migration file with the current timestamp.&#10;&#10;Parameters:&#10;    array $params;;d1,51;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="CLI;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f0;63;1;1163;;;;vpos;;v;;a;;r&#10;Definition&#10;    class CLI&#10;&#10;Description&#10;     Set of static methods useful for CLI request handling.;;d0,64;;b0,0;;m0;;e">
<treenode node="beep;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;414;2;417;;;;vpos;;v;;a;;r&#10;Definition&#10;    beep(int $num = 1)&#10;&#10;Description&#10;     Beeps a certain number of times.&#10;&#10;Parameters:&#10;    integer $num - The number of times to beep;;d1,415;;b1,5;;m0;;einteger $num;;p">
</treenode>
<treenode node="clearScreen;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;498;2;505;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    clearScreen()&#10;&#10;Description&#10;     Clears the screen of output;;d1,499;;b1,5;;m0;;e">
</treenode>
<treenode node="color;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;520;2;580;;;;vpos;;v;;astring;;r&#10;Definition&#10;    color(string $text, string $foreground, string $background = null, string $format = null): string&#10;&#10;Description&#10;     Returns the given text with the correct color codes for a foreground and optionally a background color.&#10;&#10;Parameters:&#10;    string $text - The text to color&#10;    string $foreground - The foreground color&#10;    string $background - The background color&#10;    string $format - Other formatting to apply&#10;&#10;Return:&#10;   The color coded string;;d1,521;;b1,5;;m0;;estring $text;;pstring $foreground;;pstring $background;;pstring $format;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;390;2;405;;;;vpos;;v;;a;;r&#10;Definition&#10;    error(string $text, string $foreground = &apos;light_red&apos;, string $background = null)&#10;&#10;Description&#10;     Outputs an error to the CLI using STDERR instead of STDOUT&#10;&#10;Parameters:&#10;    string|array $text - The text to output, or array of errors&#10;    string $foreground&#10;    string $background;;d1,391;;b1,5;;m0;;estring|array $text;;pstring $foreground;;pstring $background;;p">
</treenode>
<treenode node="fwrite;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f18;1151;2;1162;;;;vpos;;v;;a;;r&#10;Definition&#10;    fwrite($handle, string $string)&#10;&#10;Description&#10;     While the library is intended for use on CLI commands, commands can be called from controllers and elsewhere so we need a way to allow them to still work.&#10;&#10;Parameters:&#10;    resource $handle&#10;    string $string;;d1,1152;;b2,5;;m0;;eresource $handle;;pstring $string;;p">
</treenode>
<treenode node="generateDimensions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;726;2;772;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    generateDimensions()&#10;&#10;Description&#10;     Populates the CLI&apos;s dimensions.;;d1,727;;b1,5;;m0;;e">
</treenode>
<treenode node="getHeight;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;709;2;717;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getHeight(int $default = 32): int&#10;&#10;Description&#10;     Attempts to determine the height of the viewable CLI window.&#10;&#10;Parameters:&#10;    integer $default;;d1,710;;b1,5;;m0;;einteger $default;;p">
</treenode>
<treenode node="getOption;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;976;2;988;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    getOption(string $name)&#10;&#10;Description&#10;     Gets a single command-line option. Returns TRUE if the option exists, but doesn&apos;t have a value, and is simply acting as a flag.&#10;&#10;Parameters:&#10;    string $name&#10;&#10;Return:&#10;   |mixed|null;;d1,977;;b1,5;;m0;;estring $name;;p">
</treenode>
<treenode node="getOptions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;997;2;1000;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getOptions(): array&#10;&#10;Description&#10;     Returns the raw array of options found.;;d1,998;;b1,5;;m0;;e">
</treenode>
<treenode node="getOptionString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;1010;2;1032;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getOptionString(): string&#10;&#10;Description&#10;     Returns the options as a string, suitable for passing along on the CLI to other commands.;;d1,1011;;b1,5;;m0;;e">
</treenode>
<treenode node="getSegment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;944;2;952;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getSegment(int $index)&#10;&#10;Description&#10;     Returns an individual segment.&#10;&#10;Parameters:&#10;    integer $index&#10;&#10;Return:&#10;   |null;;d1,945;;b1,5;;m0;;einteger $index;;p">
</treenode>
<treenode node="getSegments;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;961;2;964;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getSegments(): array&#10;&#10;Description&#10;     Returns the raw array of segments found.;;d1,962;;b1,5;;m0;;e">
</treenode>
<treenode node="getURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;924;2;927;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getURI(): string&#10;&#10;Description&#10;     Returns the command line string portions of the arguments, minus any options, as a string. This is used to pass along to the main CodeIgniter application.;;d1,925;;b1,5;;m0;;e">
</treenode>
<treenode node="getWidth;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;690;2;698;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getWidth(int $default = 80): int&#10;&#10;Description&#10;     Attempts to determine the width of the viewable CLI window.&#10;&#10;Parameters:&#10;    integer $default;;d1,691;;b1,5;;m0;;einteger $default;;p">
</treenode>
<treenode node="hasColorSupport;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;654;2;679;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasColorSupport($resource): bool&#10;&#10;Description&#10;     Returns true if the stream resource supports colors.&#10;&#10;Parameters:&#10;    resource $resource;;d1,655;;b1,5;;m0;;eresource $resource;;p">
</treenode>
<treenode node="init;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;175;2;203;;;;vpos;;v;;a;;r&#10;Definition&#10;    init()&#10;&#10;Description&#10;     Static &quot;constructor&quot;.;;d1,176;;b1,5;;m0;;e">
</treenode>
<treenode node="input;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;218;2;228;;;;vpos;;v;;astring;;r&#10;Definition&#10;    input(string $prefix = null): string&#10;&#10;Description&#10;     Get input from the shell, using readline or the standard STDIN&#10;&#10;Parameters:&#10;    string $prefix;;d1,219;;b1,5;;m0;;estring $prefix;;p">
</treenode>
<treenode node="isWindows;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;466;2;469;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isWindows(): bool&#10;&#10;Description&#10;     if operating system === windows;;d1,467;;b1,5;;m0;;e">
</treenode>
<treenode node="newLine;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;480;2;487;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    newLine(int $num = 1)&#10;&#10;Description&#10;     Enter a number of empty lines&#10;&#10;Parameters:&#10;    integer $num - Number of lines to output;;d1,481;;b1,5;;m0;;einteger $num;;p">
</treenode>
<treenode node="parseCommandLine;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f18;888;2;913;;;;vpos;;v;;a;;r&#10;Definition&#10;    parseCommandLine()&#10;&#10;Description&#10;     Parses the command line it was called from and collects all options and valid segments.;;d1,889;;b2,5;;m0;;e">
</treenode>
<treenode node="print;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;346;2;356;;;;vpos;;v;;a;;r&#10;Definition&#10;    print(string $text = &apos;&apos;, string $foreground = null, string $background = null)&#10;&#10;Description&#10;     Outputs a string to the CLI without any surrounding newlines. Useful for showing repeating elements on a single line.&#10;&#10;Parameters:&#10;    string $text&#10;    string|null $foreground&#10;    string|null $background;;d1,347;;b1,5;;m0;;estring $text;;pstring|null $foreground;;pstring|null $background;;p">
</treenode>
<treenode node="prompt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;257;2;303;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prompt(string $field, $options = null, string $validation = null): string&#10;&#10;Description&#10;     Asks the user for input.&#10;&#10;Parameters:&#10;    string $field - Output &quot;field&quot; question&#10;    string|array $options - String to a default value, array to a list of options (the first option will be the default value)&#10;    string $validation - Validation rules&#10;&#10;Return:&#10;   The user input;;d1,258;;b1,5;;m0;;estring $field;;pstring|array $options;;pstring $validation;;p">
</treenode>
<treenode node="showProgress;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;783;2;812;;;;vpos;;v;;a;;r&#10;Definition&#10;    showProgress($thisStep = 1, int $totalSteps = 10)&#10;&#10;Description&#10;     Displays a progress bar on the CLI. You must call it repeatedly to update it. Set $thisStep = false to erase the progress bar.&#10;&#10;Parameters:&#10;    integer|boolean $thisStep&#10;    integer $totalSteps;;d1,784;;b1,5;;m0;;einteger|boolean $thisStep;;pinteger $totalSteps;;p">
</treenode>
<treenode node="streamSupports;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;625;2;638;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    streamSupports(string $function, $resource): bool&#10;&#10;Description&#10;     Checks whether the current stream resource supports or refers to a valid terminal type device.&#10;&#10;Parameters:&#10;    string $function&#10;    resource $resource;;d1,626;;b1,5;;m0;;estring $function;;presource $resource;;p">
</treenode>
<treenode node="strlen;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;592;2;612;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    strlen(?string $string): int&#10;&#10;Description&#10;     Get the number of characters in string having encoded characters and ignores styles set by the color() function&#10;&#10;Parameters:&#10;    string $string;;d1,593;;b1,5;;m0;;estring $string;;p">
</treenode>
<treenode node="table;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;1044;2;1136;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    table(array $tbody, array $thead = [])&#10;&#10;Description&#10;     Returns a well formatted table&#10;&#10;Parameters:&#10;    array $tbody - List of rows&#10;    array $thead - List of columns;;d1,1045;;b1,5;;m0;;earray $tbody;;parray $thead;;p">
</treenode>
<treenode node="validate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f18;318;2;334;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    validate(string $field, string $value, string $rules): bool&#10;&#10;Description&#10;     Validate one prompt &quot;field&quot; at a time&#10;&#10;Parameters:&#10;    string $field - Prompt &quot;field&quot; output&#10;    string $value - Input value&#10;    string $rules - Validation rules;;d1,319;;b2,5;;m0;;estring $field;;pstring $value;;pstring $rules;;p">
</treenode>
<treenode node="wait;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;428;2;457;;;;vpos;;v;;a;;r&#10;Definition&#10;    wait(int $seconds, bool $countdown = false)&#10;&#10;Description&#10;     Waits a certain number of seconds, optionally showing a wait message and waiting for a key press.&#10;&#10;Parameters:&#10;    integer $seconds - Number of seconds&#10;    boolean $countdown - Show a countdown or not;;d1,429;;b1,5;;m0;;einteger $seconds;;pboolean $countdown;;p">
</treenode>
<treenode node="wrap;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;831;2;873;;;;vpos;;v;;astring;;r&#10;Definition&#10;    wrap(string $string = null, int $max = 0, int $pad_left = 0): string&#10;&#10;Description&#10;     Takes a string and writes it to the command line, wrapping to a maximum width. If no maximum width is specified, will wrap to the window&apos;s max width.&#10;&#10;Parameters:&#10;    string $string&#10;    integer $max&#10;    integer $pad_left;;d1,832;;b1,5;;m0;;estring $string;;pinteger $max;;pinteger $pad_left;;p">
</treenode>
<treenode node="write;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CLI.php;f15;365;2;379;;;;vpos;;v;;a;;r&#10;Definition&#10;    write(string $text = &apos;&apos;, string $foreground = null, string $background = null)&#10;&#10;Description&#10;     Outputs a string to the cli on it&apos;s own line.&#10;&#10;Parameters:&#10;    string $text - The text to output&#10;    string $foreground&#10;    string $background;;d1,366;;b1,5;;m0;;estring $text;;pstring $foreground;;pstring $background;;p">
</treenode>
</treenode>
<treenode node="CLIException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Exceptions\CLIException.php;f0;44;1;59;;;;vpos;;v;;aRuntimeException;;c;;r&#10;Definition&#10;    class CLIException extends \RuntimeException&#10;&#10;Description&#10;     CLIException;;d0,45;;b0,0;;m0;;e">
<treenode node="forInvalidColor;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Exceptions\CLIException.php;f15;55;2;58;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidColor(string $type, string $color)&#10;&#10;Description&#10;     Thrown when `$color` specified for `$type` is not within the allowed list of colors.&#10;&#10;Parameters:&#10;    string $type&#10;    string $color;;d1,56;;b1,5;;m0;;estring $type;;pstring $color;;p">
</treenode>
</treenode>
<treenode node="CliRenderer;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f0;29;1;151;;;;vpos;;v;;aTextRenderer;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f11;65;5;86;;;;vpos;;v;;a;;r;;d4,66;;b1,0;;m0;;e">
</treenode>
<treenode node="colorTitle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f11;106;5;113;;;;vpos;;v;;a;;r;;d4,107;;b1,0;;m0;;estring;;p">
</treenode>
<treenode node="colorType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f11;97;5;104;;;;vpos;;v;;a;;r;;d4,98;;b1,0;;m0;;estring;;p">
</treenode>
<treenode node="colorValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f11;88;5;95;;;;vpos;;v;;a;;r;;d4,89;;b1,0;;m0;;estring;;p">
</treenode>
<treenode node="escape;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f11;138;5;141;;;;vpos;;v;;a;;r;;d4,139;;b1,0;;m0;;estring;;pencoding;;p">
</treenode>
<treenode node="postRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f11;129;5;136;;;;vpos;;v;;a;;r;;d4,130;;b1,0;;m0;;e">
</treenode>
<treenode node="preRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f11;124;5;127;;;;vpos;;v;;a;;r;;d4,125;;b1,0;;m0;;e">
</treenode>
<treenode node="renderTitle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f11;115;5;122;;;;vpos;;v;;a;;r;;d4,116;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="utf8ToWindows;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\CliRenderer.php;f14;143;5;150;;;;vpos;;v;;a;;r;;d4,144;;b2,0;;m0;;estring;;p">
</treenode>
</treenode>
<treenode node="CLIRequest;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CLIRequest.php;f0;57;1;253;;;;vpos;;v;;aRequest;;c;;r&#10;Definition&#10;    class CLIRequest extends Request&#10;&#10;Description&#10;     Class CLIRequest;;d0,58;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CLIRequest.php;f8;88;2;96;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(App $config)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    App $config;;d1,89;;b1,0;;m0;;eApp $config;;p">
</treenode>
<treenode node="getOption;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CLIRequest.php;f8;156;2;159;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getOption(string $key)&#10;&#10;Description&#10;     Returns the value for a single CLI option that was passed in.&#10;&#10;Parameters:&#10;    string $key&#10;&#10;Return:&#10;   |null;;d1,157;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getOptions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CLIRequest.php;f8;130;2;133;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getOptions(): array&#10;&#10;Description&#10;     Returns an associative array of all CLI options found, with their values.;;d1,131;;b1,0;;m0;;e">
</treenode>
<treenode node="getOptionString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CLIRequest.php;f8;177;2;199;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getOptionString(): string&#10;&#10;Description&#10;     Returns the options as a string, suitable for passing along on the CLI to other commands.;;d1,178;;b1,0;;m0;;e">
</treenode>
<treenode node="getPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CLIRequest.php;f8;115;2;120;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getPath(): string&#10;&#10;Description&#10;     Returns the &quot;path&quot; of the request script so that it can be used in routing to the appropriate controller/method.;;d1,116;;b1,0;;m0;;e">
</treenode>
<treenode node="getSegments;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CLIRequest.php;f8;142;2;145;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getSegments(): array&#10;&#10;Description&#10;     Returns the path segments.;;d1,143;;b1,0;;m0;;e">
</treenode>
<treenode node="parseCommand;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CLIRequest.php;f11;210;2;250;;;;vpos;;v;;a;;r&#10;Definition&#10;    parseCommand()&#10;&#10;Description&#10;     Parses the command line it was called from and collects all options and valid segments.;;d1,211;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="ClosureObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ClosureObject.php;f0;27;1;67;;;;vpos;;v;;aInstanceObject;;c;;r;;d0,28;;b0,0;;m0;;e">
<treenode node="getAccessPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ClosureObject.php;f11;34;5;39;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m0;;e">
</treenode>
<treenode node="getParams;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ClosureObject.php;f11;45;5;66;;;;vpos;;v;;a;;r;;d4,46;;b1,0;;m0;;e">
</treenode>
<treenode node="getSize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ClosureObject.php;f11;41;5;43;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="ClosurePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\ClosurePlugin.php;f0;31;1;58;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClosurePlugin.php;f0;34;1;93;;;;vpos;;v;;aPlugin;;cObjectPluginInterface;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClosurePlugin.php;f11;41;5;44;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClosurePlugin.php;f11;36;5;39;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ClosurePlugin.php;f11;46;5;92;;;;vpos;;v;;a;;r;;d4,47;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="renderObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\ClosurePlugin.php;f11;33;5;57;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="CodeIgniter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f0;62;1;1128;;;;vpos;;v;;a;;r&#10;Definition&#10;    class CodeIgniter&#10;&#10;Description&#10;     This class is the core of the framework, and will analyse the request, route it to a controller, and send back the response. Of course, there are variations to that flow, but this is the brains.;;d0,63;;b0,0;;m0;;e">
<treenode node="CI_VERSION;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f6;68;17;68;;;;vpos;;v;;a;;r&#10;Description&#10;     The current version of CodeIgniter Framework;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;169;2;173;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    type $config;;d1,170;;b1,0;;m0;;etype $config;;p">
</treenode>
<treenode node="bootstrapEnvironment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;496;2;510;;;;vpos;;v;;a;;r&#10;Definition&#10;    bootstrapEnvironment()&#10;&#10;Description&#10;     Load any custom boot files based upon the current environment.;;d1,497;;b2,0;;m0;;e">
</treenode>
<treenode node="cache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f15;669;2;672;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    cache(int $time)&#10;&#10;Description&#10;     Tells the app that the final output should be cached.&#10;&#10;Parameters:&#10;    integer $time;;d1,670;;b1,5;;m0;;einteger $time;;p">
</treenode>
<treenode node="cachePage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;684;2;695;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    cachePage(Cache $config)&#10;&#10;Description&#10;     Caches the full response from the current request. Used for full-page caching for very high performance.&#10;&#10;Parameters:&#10;    \Config\Cache $config;;d1,685;;b1,0;;m0;;e\Config\Cache $config;;p">
</treenode>
<treenode node="callExit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;1120;2;1125;;;;vpos;;v;;a;;r&#10;Definition&#10;    callExit($code)&#10;&#10;Description&#10;     Exits the application, setting the exit code for CLI-based applications that might be watching.&#10;&#10;Parameters:&#10;     $code;;d1,1121;;b2,0;;m0;;e $code;;p">
</treenode>
<treenode node="createController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;887;2;895;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    createController()&#10;&#10;Description&#10;     Instantiates the controller class.;;d1,888;;b2,0;;m0;;e">
</treenode>
<treenode node="detectEnvironment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;471;2;486;;;;vpos;;v;;a;;r&#10;Definition&#10;    detectEnvironment()&#10;&#10;Description&#10;     You can load different configurations depending on your current environment. Setting the environment also influences things like logging and error reporting.;;d1,472;;b2,0;;m0;;e">
</treenode>
<treenode node="determinePath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;813;2;821;;;;vpos;;v;;a;;r&#10;Definition&#10;    determinePath()&#10;&#10;Description&#10;     Determines the path to use for us to try to route to, based on user input (setPath), or the CLI/IncomingRequest path.;;d1,814;;b2,0;;m0;;e">
</treenode>
<treenode node="display404errors;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;933;2;985;;;;vpos;;v;;a;;r&#10;Definition&#10;    display404errors(PageNotFoundException $e)&#10;&#10;Description&#10;     Displays a 404 Page Not Found error. If set, will try to call the 404Override controller/method that was set in routing config.&#10;&#10;Parameters:&#10;    PageNotFoundException $e;;d1,934;;b2,0;;m0;;ePageNotFoundException $e;;p">
</treenode>
<treenode node="displayCache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;626;2;658;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    displayCache($config)&#10;&#10;Description&#10;     Determines if a response has been cached for the given URI.&#10;&#10;Parameters:&#10;    \Config\Cache $config&#10;&#10;Return:&#10;   |\CodeIgniter\HTTP\ResponseInterface;;d1,627;;b1,0;;m0;;e\Config\Cache $config;;p">
</treenode>
<treenode node="displayPerformanceMetrics;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;755;2;760;;;;vpos;;v;;astring;;r&#10;Definition&#10;    displayPerformanceMetrics(string $output): string&#10;&#10;Description&#10;     Replaces the memory_usage and elapsed_time tags.&#10;&#10;Parameters:&#10;    string $output;;d1,756;;b1,0;;m0;;estring $output;;p">
</treenode>
<treenode node="forceSecureAccess;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;605;2;613;;;;vpos;;v;;a;;r&#10;Definition&#10;    forceSecureAccess($duration = 31536000)&#10;&#10;Description&#10;     Force Secure Site Access? If the config value &apos;forceGlobalSecureRequests&apos; is true, will enforce that all requests to this site are made through HTTPS. Will redirect the user to the current page with HTTPS, as well as set the HTTP Strict Transport Security header for those browsers that support it.&#10;&#10;Parameters:&#10;    integer $duration - How long the Strict Transport Security;;d1,606;;b2,0;;m0;;einteger $duration;;p">
</treenode>
<treenode node="gatherOutput;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;996;2;1038;;;;vpos;;v;;a;;r&#10;Definition&#10;    gatherOutput($cacheConfig = null, $returned = null)&#10;&#10;Description&#10;     Gathers the script output from the buffer, replaces some execution time tag in the output and displays the debug toolbar, if required.&#10;&#10;Parameters:&#10;    null $cacheConfig&#10;    null $returned;;d1,997;;b2,0;;m0;;enull $cacheConfig;;pnull $returned;;p">
</treenode>
<treenode node="generateCacheName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;721;2;744;;;;vpos;;v;;astring;;r&#10;Definition&#10;    generateCacheName($config): string&#10;&#10;Description&#10;     Generates the cache name to use for our full-page caching.&#10;&#10;Parameters:&#10;     $config;;d1,722;;b2,0;;m0;;e $config;;p">
</treenode>
<treenode node="getPerformanceStats;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;704;2;710;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getPerformanceStats(): array&#10;&#10;Description&#10;     Returns an array with our basic performance stats collected.;;d1,705;;b1,0;;m0;;e">
</treenode>
<treenode node="getRequestObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;553;2;572;;;;vpos;;v;;a;;r&#10;Definition&#10;    getRequestObject()&#10;&#10;Description&#10;     Get our Request object, (either IncomingRequest or CLIRequest) and set the server protocol based on the information provided by the server.;;d1,554;;b2,0;;m0;;e">
</treenode>
<treenode node="getResponseObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;580;2;591;;;;vpos;;v;;a;;r&#10;Definition&#10;    getResponseObject()&#10;&#10;Description&#10;     Get our Response object, and set some default values, including the HTTP protocol version and a default successful response.;;d1,581;;b2,0;;m0;;e">
</treenode>
<treenode node="handleRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;361;2;456;;;;vpos;;v;;a;;r&#10;Definition&#10;    handleRequest(RouteCollectionInterface $routes = null, $cacheConfig, bool $returnResponse = false)&#10;&#10;Description&#10;     Handles the main request logic and fires the controller.&#10;&#10;Parameters:&#10;    \CodeIgniter\Router\RouteCollectionInterface $routes&#10;     $cacheConfig&#10;    boolean $returnResponse;;d1,362;;b2,0;;m0;;e\CodeIgniter\Router\RouteCollectionInterface $routes;;p $cacheConfig;;pboolean $returnResponse;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;180;2;204;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Handles some basic app and environment setup.;;d1,181;;b1,0;;m0;;e">
</treenode>
<treenode node="initializeKint;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;211;2;262;;;;vpos;;v;;a;;r&#10;Definition&#10;    initializeKint()&#10;&#10;Description&#10;     Initializes Kint;;d1,212;;b2,0;;m0;;e">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;281;2;329;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    run(RouteCollectionInterface $routes = null, bool $returnResponse = false)&#10;&#10;Description&#10;     Launch the application!&#10;&#10;Parameters:&#10;    \CodeIgniter\Router\RouteCollectionInterface $routes&#10;    boolean $returnResponse&#10;&#10;Return:&#10;   |\CodeIgniter\HTTP\RequestInterface|\CodeIgniter\HTTP\Response|\CodeIgniter\HTTP\ResponseInterface|mixed;;d1,282;;b1,0;;m0;;e\CodeIgniter\Router\RouteCollectionInterface $routes;;pboolean $returnResponse;;p">
</treenode>
<treenode node="runController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;906;2;923;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    runController($class)&#10;&#10;Description&#10;     Runs the controller, allowing for _remap methods to function.&#10;&#10;Parameters:&#10;    mixed $class;;d1,907;;b2,0;;m0;;emixed $class;;p">
</treenode>
<treenode node="sendResponse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;1104;2;1107;;;;vpos;;v;;a;;r&#10;Definition&#10;    sendResponse()&#10;&#10;Description&#10;     Sends the output of this request back to the client. This is what they&apos;ve been waiting for!;;d1,1105;;b2,0;;m0;;e">
</treenode>
<treenode node="setPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;835;2;840;;;;vpos;;v;;a;;r&#10;Definition&#10;    setPath(string $path)&#10;&#10;Description&#10;     Allows the request path to be set from outside the class, instead of relying on CLIRequest or IncomingRequest for the path.&#10;&#10;Parameters:&#10;    string $path;;d1,836;;b1,0;;m0;;estring $path;;p">
</treenode>
<treenode node="setRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;539;2;544;;;;vpos;;v;;a;;r&#10;Definition&#10;    setRequest(Request $request)&#10;&#10;Description&#10;     Sets a Request object to be used for this request. Used when running certain tests.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\Request $request;;d1,540;;b1,0;;m0;;e\CodeIgniter\HTTP\Request $request;;p">
</treenode>
<treenode node="spoofRequestMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;1082;2;1098;;;;vpos;;v;;a;;r&#10;Definition&#10;    spoofRequestMethod()&#10;&#10;Description&#10;     Modifies the Request Object to use a different method if a POST variable called _method is found.;;d1,1083;;b1,0;;m0;;e">
</treenode>
<treenode node="startBenchmark;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;520;2;527;;;;vpos;;v;;a;;r&#10;Definition&#10;    startBenchmark()&#10;&#10;Description&#10;     Start the Benchmark;;d1,521;;b2,0;;m0;;e">
</treenode>
<treenode node="startController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;849;2;878;;;;vpos;;v;;a;;r&#10;Definition&#10;    startController()&#10;&#10;Description&#10;     Now that everything has been setup, this method attempts to run the controller method and make the script go. If it&apos;s not able to, will show the appropriate Page Not Found error.;;d1,850;;b2,0;;m0;;e">
</treenode>
<treenode node="storePreviousURL;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;1051;2;1074;;;;vpos;;v;;a;;r&#10;Definition&#10;    storePreviousURL($uri)&#10;&#10;Description&#10;     If we have a session object to use, store the current URI as the previous URI. This is called just prior to sending the response to the client, and will make it available next request.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\URI $uri;;d1,1052;;b1,0;;m0;;e\CodeIgniter\HTTP\URI $uri;;p">
</treenode>
<treenode node="tryToRouteIt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f11;775;2;805;;;;vpos;;v;;astring;;r&#10;Definition&#10;    tryToRouteIt(RouteCollectionInterface $routes = null)&#10;&#10;Description&#10;     Try to Route It - As it sounds like, works with the router to match a route against the current URI. If the route is a &quot;redirect route&quot;, will also handle the redirect.&#10;&#10;Parameters:&#10;    RouteCollectionInterface $routes - An collection interface to use in place;;d1,776;;b2,0;;m0;;eRouteCollectionInterface $routes;;p">
</treenode>
<treenode node="useSafeOutput;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CodeIgniter.php;f8;342;2;347;;;;vpos;;v;;a;;r&#10;Definition&#10;    useSafeOutput(bool $safe = true)&#10;&#10;Description&#10;     Set our Response instance to &quot;pretend&quot; mode so that things like cookies and headers are not actually sent, allowing PHP 7.2+ to not complain when ini_set() function is used.&#10;&#10;Parameters:&#10;    boolean $safe;;d1,343;;b1,0;;m0;;eboolean $safe;;p">
</treenode>
</treenode>
<treenode node="ColorPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\ColorPlugin.php;f0;31;1;99;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ColorPlugin.php;f0;30;1;62;;;;vpos;;v;;aPlugin;;cTabPluginInterface;;cObjectPluginInterface;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ColorPlugin.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ColorPlugin.php;f11;32;5;35;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ColorPlugin.php;f11;42;5;61;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="renderObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\ColorPlugin.php;f11;33;5;51;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderTab;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\ColorPlugin.php;f11;53;5;98;;;;vpos;;v;;a;;r;;d4,54;;b1,0;;m0;;er;;p">
</treenode>
</treenode>
<treenode node="ColorRepresentation;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f0;29;1;575;;;;vpos;;v;;aRepresentation;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="COLOR_HEX_3;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f9;32;21;32;;;;vpos;;v;;a;;r2;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="COLOR_HEX_4;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f9;38;21;38;;;;vpos;;v;;a;;r8;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="COLOR_HEX_6;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f9;33;21;33;;;;vpos;;v;;a;;r3;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="COLOR_HEX_8;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f9;39;21;39;;;;vpos;;v;;a;;r9;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="COLOR_HSL;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f9;36;19;36;;;;vpos;;v;;a;;r6;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="COLOR_HSLA;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f9;37;20;37;;;;vpos;;v;;a;;r7;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="COLOR_NAME;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f9;31;20;31;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="COLOR_RGB;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f9;34;19;34;;;;vpos;;v;;a;;r4;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="COLOR_RGBA;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f9;35;20;35;;;;vpos;;v;;a;;r5;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f11;203;5;209;;;;vpos;;v;;a;;r;;d4,204;;b1,0;;m0;;evalue;;p">
</treenode>
<treenode node="getColor;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f11;211;5;273;;;;vpos;;v;;a;;r;;d4,212;;b1,0;;m0;;evariant;;p">
</treenode>
<treenode node="hasAlpha;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f11;275;5;294;;;;vpos;;v;;a;;r;;d4,276;;b1,0;;m0;;evariant;;p">
</treenode>
<treenode node="hslToRgb;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f18;471;5;493;;;;vpos;;v;;aint;;r&#10;Definition&#10;    hslToRgb($h, $s, $l)&#10;&#10;Description&#10;     Turns HSL color to RGB. Black magic.&#10;&#10;Parameters:&#10;    float $h - Hue&#10;    float $s - Saturation&#10;    float $l - Lightness&#10;&#10;Return:&#10;   [] RGB array;;d4,472;;b1,5;;m0;;efloat $h;;pfloat $s;;pfloat $l;;p">
</treenode>
<treenode node="hueToRgb;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f19;560;5;574;;;;vpos;;v;;afloat;;r&#10;Definition&#10;    hueToRgb($m1, $m2, $hue)&#10;&#10;Description&#10;     Helper function for hslToRgb. Even blacker magic.&#10;&#10;Parameters:&#10;    float $m1&#10;    float $m2&#10;    float $hue&#10;&#10;Return:&#10;   Color value;;d4,561;;b3,5;;m0;;efloat $m1;;pfloat $m2;;pfloat $hue;;p">
</treenode>
<treenode node="rgbToHsl;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f18;504;5;548;;;;vpos;;v;;afloat;;r&#10;Definition&#10;    rgbToHsl($red, $green, $blue)&#10;&#10;Description&#10;     Converts RGB to HSL. Color inversion of previous black magic is white magic?&#10;&#10;Parameters:&#10;    float|int $red - Red&#10;    float|int $green - Green&#10;    float|int $blue - Blue&#10;&#10;Return:&#10;   [] HSL array;;d4,505;;b1,5;;m0;;efloat|int $red;;pfloat|int $green;;pfloat|int $blue;;p">
</treenode>
<treenode node="setValues;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f14;296;5;330;;;;vpos;;v;;a;;r;;d4,297;;b2,0;;m0;;evalue;;p">
</treenode>
<treenode node="setValuesFromFunction;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f14;378;5;460;;;;vpos;;v;;a;;r;;d4,379;;b2,0;;m0;;evalue;;p">
</treenode>
<treenode node="setValuesFromHex;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\ColorRepresentation.php;f14;332;5;376;;;;vpos;;v;;a;;r;;d4,333;;b2,0;;m0;;ehex;;p">
</treenode>
</treenode>
<treenode node="CommandRunner;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CommandRunner.php;f0;46;1;118;;;;vpos;;v;;aController;;c;;r&#10;Definition&#10;    class CommandRunner extends Controller&#10;&#10;Description&#10;     Command runner;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CommandRunner.php;f8;61;2;64;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct()&#10;&#10;Description&#10;     Constructor;;d1,62;;b1,0;;m0;;e">
</treenode>
<treenode node="_remap;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CommandRunner.php;f8;76;2;85;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    _remap($method, ...$params)&#10;&#10;Description&#10;     We map all un-routed CLI methods through this function so we have the chance to look for a Command first.&#10;&#10;Parameters:&#10;    string $method&#10;    array - ...$params;;d1,77;;b1,0;;m0;;estring $method;;parray;;p">
</treenode>
<treenode node="getCommands;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CommandRunner.php;f8;114;2;117;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getCommands(): array&#10;&#10;Description&#10;     Allows access to the current commands that have been found.;;d1,115;;b1,0;;m0;;e">
</treenode>
<treenode node="index;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\CommandRunner.php;f8;97;2;107;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    index(array $params)&#10;&#10;Description&#10;     Default command.&#10;&#10;Parameters:&#10;    array $params;;d1,98;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="Commands;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Commands.php;f0;51;1;180;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Commands&#10;&#10;Description&#10;     Class Commands;;d0,52;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Commands.php;f8;72;2;75;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($logger = null)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    \CodeIgniter\Log\Logger|null $logger;;d1,73;;b1,0;;m0;;e\CodeIgniter\Log\Logger|null $logger;;p">
</treenode>
<treenode node="discoverCommands;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Commands.php;f8;118;2;179;;;;vpos;;v;;a;;r&#10;Definition&#10;    discoverCommands()&#10;&#10;Description&#10;     Discovers all commands in the framework and within user code, and collects instances of them to work with.;;d1,119;;b1,0;;m0;;e">
</treenode>
<treenode node="getCommands;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Commands.php;f8;107;2;112;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getCommands()&#10;&#10;Description&#10;     Provide access to the list of commands.;;d1,108;;b1,0;;m0;;e">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Commands.php;f8;83;2;100;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(string $command, array $params)&#10;&#10;Description&#10;     Runs a command given&#10;&#10;Parameters:&#10;    string $command&#10;    array $params;;d1,84;;b1,0;;m0;;estring $command;;parray $params;;p">
</treenode>
</treenode>
<treenode node="Comments;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Comments.php;f0;2;1;11;;;;vpos;;v;;aBaseController;;c;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="index;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Comments.php;f8;4;2;8;;;;vpos;;v;;a;;r;;d1,5;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="ComposerScripts;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ComposerScripts.php;f0;54;1;247;;;;vpos;;v;;a;;r&#10;Definition&#10;    class ComposerScripts&#10;&#10;Description&#10;     ComposerScripts;;d0,55;;b0,0;;m0;;e">
<treenode node="copyDir;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ComposerScripts.php;f18;153;2;174;;;;vpos;;v;;a;;r;;d1,154;;b2,5;;m0;;esource;;pdest;;p">
</treenode>
<treenode node="getClassFilePath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ComposerScripts.php;f18;115;2;120;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getClassFilePath(string $class)&#10;&#10;Description&#10;     Determine file path of a class.&#10;&#10;Parameters:&#10;    string $class;;d1,116;;b2,5;;m0;;estring $class;;p">
</treenode>
<treenode node="moveEscaper;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ComposerScripts.php;f15;182;2;213;;;;vpos;;v;;a;;r&#10;Definition&#10;    moveEscaper()&#10;&#10;Description&#10;     Moves the Laminas Escaper files into our base repo so that it&apos;s available for packaged releases where the users don&apos;t user Composer.;;d1,183;;b1,5;;m0;;e">
</treenode>
<treenode node="moveFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ComposerScripts.php;f18;86;2;103;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    moveFile(string $source, string $destination): bool&#10;&#10;Description&#10;     Move a file.&#10;&#10;Parameters:&#10;    string $source&#10;    string $destination;;d1,87;;b2,5;;m0;;estring $source;;pstring $destination;;p">
</treenode>
<treenode node="moveKint;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ComposerScripts.php;f15;221;2;246;;;;vpos;;v;;a;;r&#10;Definition&#10;    moveKint()&#10;&#10;Description&#10;     Moves the Kint file into our base repo so that it&apos;s available for packaged releases where the users don&apos;t user Composer.;;d1,222;;b1,5;;m0;;e">
</treenode>
<treenode node="postUpdate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ComposerScripts.php;f15;70;2;74;;;;vpos;;v;;a;;r&#10;Definition&#10;    postUpdate()&#10;&#10;Description&#10;     After composer install/update, this is called to move the bare-minimum required files for our dependencies to appropriate locations.;;d1,71;;b1,5;;m0;;e">
</treenode>
<treenode node="removeDir;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ComposerScripts.php;f18;129;2;151;;;;vpos;;v;;a;;r&#10;Definition&#10;    removeDir($dir)&#10;&#10;Description&#10;     A recursive remove directory method.&#10;&#10;Parameters:&#10;     $dir;;d1,130;;b2,5;;m0;;e $dir;;p">
</treenode>
</treenode>
<treenode node="CompositionValidator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\CompositionValidator.php;f0;19;1;73;;;;vpos;;v;;aBaseValidator;;cValidatorInterface;;c;;r&#10;Definition&#10;    class CompositionValidator extends BaseValidator implements ValidatorInterface&#10;&#10;Description&#10;     Class CompositionValidator;;d0,20;;b0,0;;m0;;e">
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\CompositionValidator.php;f11;31;5;49;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    check(string $password, Entity $user=null): bool&#10;&#10;Description&#10;     Returns true when the password passes this test. The password will be passed to any remaining validators. False will immediately stop validation process&#10;&#10;Parameters:&#10;    string $password&#10;    Entity $user;;d4,32;;b1,0;;m0;;estring $password;;pEntity $user;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\CompositionValidator.php;f11;56;5;59;;;;vpos;;v;;astring;;r&#10;Definition&#10;    error(): string&#10;&#10;Description&#10;     Returns the error string that should be displayed to the user.;;d4,57;;b1,0;;m0;;e">
</treenode>
<treenode node="suggestion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\CompositionValidator.php;f11;69;5;72;;;;vpos;;v;;astring;;r&#10;Definition&#10;    suggestion(): string&#10;&#10;Description&#10;     Returns a suggestion that may be displayed to the user to help them choose a better password. The method is required, but a suggestion is optional. May return an empty string instead.;;d4,70;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Config;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Config.php;f0;48;1;70;;O:\xampp\htdocs\2020\blog-4\system\Database\Config.php;f0;46;1;198;;O:\xampp\htdocs\2020\blog-4\system\Config\Config.php;f0;46;1;160;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Config&#10;&#10;Description&#10;     Debug toolbar configuration;;d0,49;;b0,0;;m0;;e">
<treenode node="connect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Config.php;f15;76;2;119;;;;vpos;;v;;aBaseConnection;;r&#10;Definition&#10;    connect($group = null, bool $getShared = true)&#10;&#10;Description&#10;     Creates the default&#10;&#10;Parameters:&#10;    string|array $group - The name of the connection group to use,&#10;    boolean $getShared - Whether to return a shared instance of the connection;;d1,77;;b1,5;;m0;;estring|array $group;;pboolean $getShared;;p">
</treenode>
<treenode node="createClass;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Config.php;f16;119;2;157;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    createClass(string $name)&#10;&#10;Description&#10;     Find configuration class and create instance&#10;&#10;Parameters:&#10;    string $name - Classname&#10;&#10;Return:&#10;   |null;;d1,120;;b3,5;;m0;;estring $name;;p">
</treenode>
<treenode node="display;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Config.php;f15;55;2;69;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    display(): array&#10;&#10;Description&#10;     Return toolbar config values as an array.;;d1,56;;b1,5;;m0;;e">
</treenode>
<treenode node="ensureFactory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Config.php;f18;187;2;195;;;;vpos;;v;;a;;r&#10;Definition&#10;    ensureFactory()&#10;&#10;Description&#10;     Ensures the database Connection Manager/Factory is loaded and ready to use.;;d1,188;;b2,5;;m0;;e">
</treenode>
<treenode node="forge;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Config.php;f15;143;2;148;;;;vpos;;v;;aForge;;r&#10;Definition&#10;    forge($group = null)&#10;&#10;Description&#10;     Loads and returns an instance of the Forge for the specified database group, and loads the group if it hasn&apos;t been loaded yet.&#10;&#10;Parameters:&#10;    string|array|null $group;;d1,144;;b1,5;;m0;;estring|array|null $group;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Config.php;f15;67;2;85;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get(string $name, bool $getShared = true)&#10;&#10;Description&#10;     Create new configuration instances or return a shared instance&#10;&#10;Parameters:&#10;    string $name - Configuration name&#10;    boolean $getShared - Use shared instance&#10;&#10;Return:&#10;   |null;;d1,68;;b1,5;;m0;;estring $name;;pboolean $getShared;;p">
</treenode>
<treenode node="getConnections;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Config.php;f15;128;2;131;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getConnections(): array&#10;&#10;Description&#10;     Returns an array of all db connections currently made.;;d1,129;;b1,5;;m0;;e">
</treenode>
<treenode node="injectMock;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Config.php;f15;95;2;98;;;;vpos;;v;;a;;r&#10;Definition&#10;    injectMock(string $class, $instance)&#10;&#10;Description&#10;     Helper method for injecting mock instances while testing.&#10;&#10;Parameters:&#10;    string $class&#10;     $instance;;d1,96;;b1,5;;m0;;estring $class;;p $instance;;p">
</treenode>
<treenode node="reset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Config.php;f15;105;2;108;;;;vpos;;v;;a;;r&#10;Definition&#10;    reset()&#10;&#10;Description&#10;     Resets the instances array;;d1,106;;b1,5;;m0;;e">
</treenode>
<treenode node="seeder;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Config.php;f15;175;2;180;;;;vpos;;v;;aSeeder;;r&#10;Definition&#10;    seeder(string $group = null)&#10;&#10;Description&#10;     Returns a new instance of the Database Seeder.&#10;&#10;Parameters:&#10;    string|null $group;;d1,176;;b1,5;;m0;;estring|null $group;;p">
</treenode>
<treenode node="utils;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Config.php;f15;159;2;164;;;;vpos;;v;;aBaseUtils;;r&#10;Definition&#10;    utils($group = null)&#10;&#10;Description&#10;     Returns a new instance of the Database Utilities class.&#10;&#10;Parameters:&#10;    string|array|null $group;;d1,160;;b1,5;;m0;;estring|array|null $group;;p">
</treenode>
</treenode>
<treenode node="ConfigException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\ConfigException.php;f0;6;1;20;;;;vpos;;v;;aCriticalError;;c;;r&#10;Definition&#10;    class ConfigException extends CriticalError&#10;&#10;Description&#10;     Exception for automatic logging.;;d0,7;;b0,0;;m0;;e">
<treenode node="forDisabledMigrations;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\ConfigException.php;f15;16;2;19;;;;vpos;;v;;a;;r;;d1,17;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="Connection;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f0;48;1;565;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f0;47;1;625;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f0;48;1;741;;;;vpos;;v;;aBaseConnection;;cConnectionInterface;;c;;r&#10;Definition&#10;    class Connection extends BaseConnection implements ConnectionInterface&#10;&#10;Description&#10;     Connection for SQLite3;;d0,49;;b0,0;;m0;;e">
<treenode node="_close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f11;130;2;133;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;141;2;144;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;251;2;254;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    _close()&#10;&#10;Description&#10;     Close the database connection.;;d1,131;;b2,0;;m0;;e">
</treenode>
<treenode node="_disableForeignKeyChecks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f11;451;2;454;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;440;2;443;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;633;2;636;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _disableForeignKeyChecks()&#10;&#10;Description&#10;     Returns platform-specific SQL to disable foreign key checks.;;d1,452;;b2,0;;m0;;e">
</treenode>
<treenode node="_enableForeignKeyChecks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f11;463;2;466;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;452;2;455;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;645;2;648;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _enableForeignKeyChecks()&#10;&#10;Description&#10;     Returns platform-specific SQL to enable foreign key checks.;;d1,464;;b2,0;;m0;;e">
</treenode>
<treenode node="_escapeString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f11;217;2;220;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;257;2;265;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;386;2;399;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _escapeString(string $str): string&#10;&#10;Description&#10;     Platform-dependant string escape&#10;&#10;Parameters:&#10;    string $str;;d1,218;;b2,0;;m0;;estring $str;;p">
</treenode>
<treenode node="_fieldData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;328;2;354;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;316;2;340;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;484;2;508;;;;vpos;;v;;a;;r&#10;Definition&#10;    _fieldData(string $table): array&#10;&#10;Description&#10;     Returns an array of objects with field data&#10;&#10;Parameters:&#10;    string $table;;d1,329;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_foreignKeyData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;409;2;442;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;398;2;431;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;585;2;624;;;;vpos;;v;;a;;r&#10;Definition&#10;    _foreignKeyData(string $table): array&#10;&#10;Description&#10;     Returns an array of objects with Foreign key data&#10;&#10;Parameters:&#10;    string $table;;d1,410;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_indexData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;365;2;399;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;351;2;387;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;520;2;574;;;;vpos;;v;;a;;r&#10;Definition&#10;    _indexData(string $table): array&#10;&#10;Description&#10;     Returns an array of objects with index data&#10;&#10;Parameters:&#10;    string $table;;d1,366;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_listColumns;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f11;250;2;253;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;299;2;305;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;470;2;473;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _listColumns(string $table = &apos;&apos;): string&#10;&#10;Description&#10;     Generates a platform-specific query string so that the column names can be fetched.&#10;&#10;Parameters:&#10;    string $table;;d1,251;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_listTables;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f11;231;2;239;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;276;2;288;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;449;2;459;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _listTables(bool $prefixLimit = false): string&#10;&#10;Description&#10;     Generates the SQL for listing tables in a platform-dependent manner.&#10;&#10;Parameters:&#10;    boolean $prefixLimit;;d1,232;;b2,0;;m0;;eboolean $prefixLimit;;p">
</treenode>
<treenode node="_transBegin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f11;506;2;509;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;595;2;598;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;696;2;701;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    _transBegin(): bool&#10;&#10;Description&#10;     Begin Transaction;;d1,507;;b2,0;;m0;;e">
</treenode>
<treenode node="_transCommit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f11;518;2;521;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;607;2;610;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;710;2;720;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    _transCommit(): bool&#10;&#10;Description&#10;     Commit Transaction;;d1,519;;b2,0;;m0;;e">
</treenode>
<treenode node="_transRollback;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f11;530;2;533;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;619;2;622;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;729;2;739;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    _transRollback(): bool&#10;&#10;Description&#10;     Rollback Transaction;;d1,531;;b2,0;;m0;;e">
</treenode>
<treenode node="affectedRows;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;203;2;206;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;215;2;218;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;373;2;376;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    affectedRows(): int&#10;&#10;Description&#10;     Returns the total number of rows affected by this query.;;d1,204;;b1,0;;m0;;e">
</treenode>
<treenode node="buildDSN;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;530;2;573;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    buildDSN()&#10;&#10;Description&#10;     Build a DSN from the provided parameters;;d1,531;;b2,0;;m0;;e">
</treenode>
<treenode node="connect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;86;2;107;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;81;2;116;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;92;2;228;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    connect(bool $persistent = false)&#10;&#10;Description&#10;     Connect to the database.&#10;&#10;Parameters:&#10;    boolean $persistent;;d1,87;;b1,0;;m0;;eboolean $persistent;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;479;2;485;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;468;2;474;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;661;2;675;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    error(): array&#10;&#10;Description&#10;     Returns the last error code and message.;;d1,480;;b1,0;;m0;;e">
</treenode>
<treenode node="escape;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;230;2;247;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    escape($str)&#10;&#10;Description&#10;     &quot;Smart&quot; Escape String&#10;&#10;Parameters:&#10;    mixed $str;;d1,231;;b1,0;;m0;;emixed $str;;p">
</treenode>
<treenode node="escapeLikeStringDirect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;412;2;437;;;;vpos;;v;;astring;;r&#10;Definition&#10;    escapeLikeStringDirect($str)&#10;&#10;Description&#10;     Escape Like String Direct There are a few instances where MySQLi queries cannot take the additional &quot;ESCAPE x&quot; parameter for specifying the escape character in &quot;LIKE&quot; strings, and this handles those directly with a backslash.&#10;&#10;Parameters:&#10;    string|string[] $str - Input string&#10;&#10;Return:&#10;   |string[];;d1,413;;b1,0;;m0;;estring|string[] $str;;p">
</treenode>
<treenode node="execute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;177;2;194;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;191;2;206;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;318;2;341;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    execute(string $sql)&#10;&#10;Description&#10;     Execute the query&#10;&#10;Parameters:&#10;    string $sql&#10;&#10;Return:&#10;   \SQLite3Result object or bool;;d1,178;;b1,0;;m0;;estring $sql;;p">
</treenode>
<treenode node="getFieldNames;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;263;2;317;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFieldNames(string $table)&#10;&#10;Description&#10;     Fetch Field Names&#10;&#10;Parameters:&#10;    string $table - Table name&#10;&#10;Return:&#10;   |false;;d1,264;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="getVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;156;2;166;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;167;2;180;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;294;2;307;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getVersion(): string&#10;&#10;Description&#10;     Returns a string containing the version of the database being used.;;d1,157;;b1,0;;m0;;e">
</treenode>
<treenode node="insertID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;494;2;497;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;483;2;521;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;684;2;687;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    insertID(): int&#10;&#10;Description&#10;     Insert ID;;d1,495;;b1,0;;m0;;e">
</treenode>
<treenode node="isWriteType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;542;2;547;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isWriteType($sql): bool&#10;&#10;Description&#10;     Determines if the statement is a write-type query or not.;;d1,543;;b1,0;;m0;;esql;;p">
</treenode>
<treenode node="prepQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f11;354;2;364;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prepQuery(string $sql): string&#10;&#10;Description&#10;     Prep the query&#10;&#10;Parameters:&#10;    string $sql - an SQL query;;d1,355;;b2,0;;m0;;estring $sql;;p">
</treenode>
<treenode node="reconnect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;117;2;121;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;126;2;132;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;238;2;242;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    reconnect()&#10;&#10;Description&#10;     Keep or establish the connection if no queries have been sent for a length of time exceeding the server&apos;s idle timeout.;;d1,118;;b1,0;;m0;;e">
</treenode>
<treenode node="setClientEncoding;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f11;583;2;586;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    setClientEncoding(string $charset): bool&#10;&#10;Description&#10;     Set client encoding&#10;&#10;Parameters:&#10;    string $charset - The client encoding to which the data will be converted;;d1,584;;b2,0;;m0;;estring $charset;;p">
</treenode>
<treenode node="setDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;144;2;147;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Connection.php;f8;155;2;158;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Connection.php;f8;265;2;285;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    setDatabase(string $databaseName): bool&#10;&#10;Description&#10;     Select a specific database table to use.&#10;&#10;Parameters:&#10;    string $databaseName;;d1,145;;b1,0;;m0;;estring $databaseName;;p">
</treenode>
<treenode node="supportsForeignKeys;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Connection.php;f8;557;2;562;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    supportsForeignKeys(): bool&#10;&#10;Description&#10;     Checks to see if the current install supports Foreign Keys and has them enabled.;;d1,558;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Console;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Console.php;f0;46;1;105;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Console&#10;&#10;Description&#10;     Console;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Console.php;f8;63;2;66;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(CodeIgniter $app)&#10;&#10;Description&#10;     Console constructor.&#10;&#10;Parameters:&#10;    \CodeIgniter\CodeIgniter $app;;d1,64;;b1,0;;m0;;e\CodeIgniter\CodeIgniter $app;;p">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Console.php;f8;78;2;86;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(bool $useSafeOutput = false)&#10;&#10;Description&#10;     Runs the current command discovered on the CLI.&#10;&#10;Parameters:&#10;    boolean $useSafeOutput;;d1,79;;b1,0;;m0;;eboolean $useSafeOutput;;p">
</treenode>
<treenode node="showHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\CLI\Console.php;f8;93;2;102;;;;vpos;;v;;a;;r&#10;Definition&#10;    showHeader()&#10;&#10;Description&#10;     Displays basic information about the Console.;;d1,94;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="ContentSecurityPolicy;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f0;53;1;848;;O:\xampp\htdocs\2020\blog-4\app\Config\ContentSecurityPolicy.php;f0;16;1;47;;;;vpos;;v;;a;;r&#10;Definition&#10;    class ContentSecurityPolicy&#10;&#10;Description&#10;     Class ContentSecurityPolicy;;d0,54;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;226;2;235;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(\Config\ContentSecurityPolicy $config)&#10;&#10;Description&#10;     ContentSecurityPolicy constructor.&#10;&#10;Parameters:&#10;    \Config\ContentSecurityPolicy $config;;d1,227;;b1,0;;m0;;e\Config\ContentSecurityPolicy $config;;p">
</treenode>
<treenode node="addBaseURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;287;2;292;;;;vpos;;v;;a;;r&#10;Definition&#10;    addBaseURI($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new base_uri value. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,288;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addChildSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;311;2;316;;;;vpos;;v;;a;;r&#10;Definition&#10;    addChildSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for a form&apos;s action. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,312;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addConnectSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;334;2;339;;;;vpos;;v;;a;;r&#10;Definition&#10;    addConnectSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for a form&apos;s action. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,335;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addFontSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;379;2;384;;;;vpos;;v;;a;;r&#10;Definition&#10;    addFontSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for a form&apos;s action. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,380;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addFormAction;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;399;2;404;;;;vpos;;v;;a;;r&#10;Definition&#10;    addFormAction($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for a form&apos;s action. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,400;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addFrameAncestor;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;419;2;424;;;;vpos;;v;;a;;r&#10;Definition&#10;    addFrameAncestor($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new resource that should allow embedding the resource using &lt;frame&gt;, &lt;iframe&gt;, &lt;object&gt;, &lt;embed&gt;, or &lt;applet&gt;&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,420;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addImageSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;439;2;444;;;;vpos;;v;;a;;r&#10;Definition&#10;    addImageSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for valid image sources. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,440;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addManifestSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;479;2;484;;;;vpos;;v;;a;;r&#10;Definition&#10;    addManifestSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for manifest sources. Can be either a URI class or simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,480;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addMediaSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;459;2;464;;;;vpos;;v;;a;;r&#10;Definition&#10;    addMediaSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for valid video and audio. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,460;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addObjectSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;499;2;504;;;;vpos;;v;;a;;r&#10;Definition&#10;    addObjectSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for Flash and other plugin sources. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,500;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addOption;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f11;632;2;651;;;;vpos;;v;;a;;r&#10;Definition&#10;    addOption($options, string $target, bool $explicitReporting = null)&#10;&#10;Description&#10;     DRY method to add an string or array to a class property.&#10;&#10;Parameters:&#10;    string|array $options&#10;    string $target&#10;    boolean|null $explicitReporting;;d1,633;;b2,0;;m0;;estring|array $options;;pstring $target;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addPluginType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;519;2;524;;;;vpos;;v;;a;;r&#10;Definition&#10;    addPluginType($mime, bool $explicitReporting = null)&#10;&#10;Description&#10;     Limits the types of plugins that can be used. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $mime - One or more plugin mime types, separate by spaces&#10;    boolean|null $explicitReporting;;d1,520;;b1,0;;m0;;estring|array $mime;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addSandbox;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;558;2;562;;;;vpos;;v;;a;;r&#10;Definition&#10;    addSandbox($flags, bool $explicitReporting = null)&#10;&#10;Description&#10;     specifies an HTML sandbox policy that the user agent applies to the protected resource.&#10;&#10;Parameters:&#10;    string|array $flags - An array of sandbox flags that can be added to the directive&#10;    boolean|null $explicitReporting;;d1,559;;b1,0;;m0;;estring|array $flags;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addScriptSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;577;2;582;;;;vpos;;v;;a;;r&#10;Definition&#10;    addScriptSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for javascript file sources. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,578;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addStyleSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;597;2;602;;;;vpos;;v;;a;;r&#10;Definition&#10;    addStyleSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for CSS file sources. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,598;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="addToHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f11;801;2;845;;;;vpos;;v;;a;;r&#10;Definition&#10;    addToHeader(string $name, $values = null)&#10;&#10;Description&#10;     Adds a directive and it&apos;s options to the appropriate header. The $values array might have options that are geared toward either the regular or the reportOnly header, since it&apos;s viable to have both simultaneously.&#10;&#10;Parameters:&#10;    string $name&#10;    array|string|null $values;;d1,802;;b2,0;;m0;;estring $name;;parray|string|null $values;;p">
</treenode>
<treenode node="buildHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f11;714;2;789;;;;vpos;;v;;a;;r&#10;Definition&#10;    buildHeaders(ResponseInterface &amp;$response)&#10;&#10;Description&#10;     Based on the current state of the elements, will add the appropriate Content-Security-Policy and Content-Security-Policy-Report-Only headers with their values to the response object.&#10;&#10;Parameters:&#10;    ResponseInterface|\CodeIgniter\HTTP\Response $response;;d1,715;;b2,0;;m0;;eResponseInterface|\CodeIgniter\HTTP\Response $response;;p">
</treenode>
<treenode node="finalize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;246;2;251;;;;vpos;;v;;a;;r&#10;Definition&#10;    finalize(ResponseInterface &amp;$response)&#10;&#10;Description&#10;     Compiles and sets the appropriate headers in the request.&#10;&#10;Parameters:&#10;    ResponseInterface $response;;d1,247;;b1,0;;m0;;eResponseInterface $response;;p">
</treenode>
<treenode node="generateNonces;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f11;662;2;703;;;;vpos;;v;;a;;r&#10;Definition&#10;    generateNonces(ResponseInterface &amp;$response)&#10;&#10;Description&#10;     Scans the body of the request message and replaces any nonce placeholders with actual nonces, that we&apos;ll then add to our headers.&#10;&#10;Parameters:&#10;    ResponseInterface|\CodeIgniter\HTTP\Response $response;;d1,663;;b2,0;;m0;;eResponseInterface|\CodeIgniter\HTTP\Response $response;;p">
</treenode>
<treenode node="reportOnly;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;266;2;271;;;;vpos;;v;;a;;r&#10;Definition&#10;    reportOnly(bool $value = true)&#10;&#10;Description&#10;     If TRUE, nothing will be restricted. Instead all violations will be reported to the reportURI for monitoring. This is useful when you are just starting to implement the policy, and will help determine what errors need to be addressed before you turn on all filtering.&#10;&#10;Parameters:&#10;    boolean|true $value;;d1,267;;b1,0;;m0;;eboolean|true $value;;p">
</treenode>
<treenode node="setDefaultSrc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;357;2;362;;;;vpos;;v;;a;;r&#10;Definition&#10;    setDefaultSrc($uri, bool $explicitReporting = null)&#10;&#10;Description&#10;     Adds a new valid endpoint for a form&apos;s action. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string|array $uri&#10;    boolean|null $explicitReporting;;d1,358;;b1,0;;m0;;estring|array $uri;;pboolean|null $explicitReporting;;p">
</treenode>
<treenode node="setReportURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;538;2;543;;;;vpos;;v;;a;;r&#10;Definition&#10;    setReportURI(string $uri)&#10;&#10;Description&#10;     Specifies a URL where a browser will send reports when a content security policy is violated. Can be either a URI class or a simple string.&#10;&#10;Parameters:&#10;    string $uri;;d1,539;;b1,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="upgradeInsecureRequests;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\ContentSecurityPolicy.php;f8;614;2;619;;;;vpos;;v;;a;;r&#10;Definition&#10;    upgradeInsecureRequests(bool $value = true)&#10;&#10;Description&#10;     Sets whether the user agents should rewrite URL schemes, changing HTTP to HTTPS.&#10;&#10;Parameters:&#10;    boolean $value;;d1,615;;b1,0;;m0;;eboolean $value;;p">
</treenode>
</treenode>
<treenode node="Controller;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Controller.php;f0;53;1;222;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Controller&#10;&#10;Description&#10;     Class Controller;;d0,54;;b0,0;;m0;;e">
<treenode node="cachePage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Controller.php;f11;155;2;158;;;;vpos;;v;;a;;r&#10;Definition&#10;    cachePage(int $time)&#10;&#10;Description&#10;     Provides a simple way to tie into the main CodeIgniter class and tell it how long to cache the current page for.&#10;&#10;Parameters:&#10;    integer $time;;d1,156;;b2,0;;m0;;einteger $time;;p">
</treenode>
<treenode node="forceHTTPS;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Controller.php;f11;142;2;145;;;;vpos;;v;;a;;r&#10;Definition&#10;    forceHTTPS(int $duration = 31536000)&#10;&#10;Description&#10;     A convenience method to use when you need to ensure that a single method is reached only via HTTPS. If it isn&apos;t, then a redirect will happen back to this method and HSTS header will be sent to have modern browsers transform requests automatically.&#10;&#10;Parameters:&#10;    integer $duration - The number of seconds this link should be;;d1,143;;b2,0;;m0;;einteger $duration;;p">
</treenode>
<treenode node="initController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Controller.php;f8;114;2;126;;;;vpos;;v;;a;;r&#10;Definition&#10;    initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    RequestInterface $request&#10;    ResponseInterface $response&#10;    \Psr\Log\LoggerInterface $logger;;d1,115;;b1,0;;m0;;eRequestInterface $request;;pResponseInterface $response;;p\Psr\Log\LoggerInterface $logger;;p">
</treenode>
<treenode node="loadHelpers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Controller.php;f11;165;2;176;;;;vpos;;v;;a;;r&#10;Definition&#10;    loadHelpers()&#10;&#10;Description&#10;     Handles &quot;auto-loading&quot; helper files.;;d1,166;;b2,0;;m0;;e">
</treenode>
<treenode node="validate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Controller.php;f11;189;2;219;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    validate($rules, array $messages = []): bool&#10;&#10;Description&#10;     A shortcut to performing validation on input data. If validation is not successful, a $errors property will be set on this class.&#10;&#10;Parameters:&#10;    array|string $rules&#10;    array $messages - An array of custom error messages;;d1,190;;b2,0;;m0;;earray|string $rules;;parray $messages;;p">
</treenode>
</treenode>
<treenode node="ControllerResponse;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f0;48;1;226;;;;vpos;;v;;a;;r&#10;Definition&#10;    class ControllerResponse&#10;&#10;Description&#10;     Testable response from a controller;;d25,48;;b0,0;;m0;;e">
<treenode node="__call;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;218;2;224;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __call($function, $params)&#10;&#10;Description&#10;     Forward any unrecognized method calls to our DOMParser instance.&#10;&#10;Parameters:&#10;    string $function - Method name&#10;    mixed $params - Any method parameters;;d1,219;;b1,0;;m0;;estring $function;;pmixed $params;;p">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;81;2;84;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct()&#10;&#10;Description&#10;     Constructor.;;d1,82;;b1,0;;m0;;e">
</treenode>
<treenode node="getBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;114;2;117;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getBody()&#10;&#10;Description&#10;     Retrieve the body.;;d1,115;;b1,0;;m0;;e">
</treenode>
<treenode node="isOK;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;179;2;195;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isOK(): bool&#10;&#10;Description&#10;     Boils down the possible responses into a boolean valid/not-valid response type.;;d1,180;;b1,0;;m0;;e">
</treenode>
<treenode node="isRedirect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;202;2;205;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isRedirect(): bool&#10;&#10;Description&#10;     Returns whether or not the Response was a redirect response;;d1,203;;b1,0;;m0;;e">
</treenode>
<treenode node="request;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;154;2;157;;;;vpos;;v;;a;;r&#10;Definition&#10;    request()&#10;&#10;Description&#10;     Request accessor.;;d1,155;;b1,0;;m0;;e">
</treenode>
<treenode node="response;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;164;2;167;;;;vpos;;v;;a;;r&#10;Definition&#10;    response()&#10;&#10;Description&#10;     Response accessor.;;d1,165;;b1,0;;m0;;e">
</treenode>
<treenode node="setBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;97;2;107;;;;vpos;;v;;a;;r&#10;Definition&#10;    setBody(string $body)&#10;&#10;Description&#10;     Set the body &amp; DOM.&#10;&#10;Parameters:&#10;    string $body;;d1,98;;b1,0;;m0;;estring $body;;p">
</treenode>
<treenode node="setRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;126;2;131;;;;vpos;;v;;a;;r&#10;Definition&#10;    setRequest(RequestInterface $request)&#10;&#10;Description&#10;     Set the request.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request;;d1,127;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;p">
</treenode>
<treenode node="setResponse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerResponse.php;f8;140;2;147;;;;vpos;;v;;a;;r&#10;Definition&#10;    setResponse(ResponseInterface $response)&#10;&#10;Description&#10;     Set the response.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\ResponseInterface $response;;d1,141;;b1,0;;m0;;e\CodeIgniter\HTTP\ResponseInterface $response;;p">
</treenode>
</treenode>
<treenode node="ControllerTester;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerTester.php;f0;65;1;315;;;;vpos;;v;;a;;r&#10;Definition&#10;    trait ControllerTester&#10;&#10;Description&#10;     ControllerTester Trait;;d0,66;;b0,0;;m0;;e">
<treenode node="controller;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerTester.php;f8;119;2;155;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    controller(string $name)&#10;&#10;Description&#10;     Loads the specified controller, and generates any needed dependencies.&#10;&#10;Parameters:&#10;    string $name;;d1,120;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="execute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerTester.php;f8;165;2;226;;;;vpos;;v;;a;;r&#10;Definition&#10;    execute(string $method, ...$params)&#10;&#10;Description&#10;     Runs the specified method on the controller and returns the results.&#10;&#10;Parameters:&#10;    string $method&#10;    array $params;;d1,166;;b1,0;;m0;;estring $method;;parray $params;;p">
</treenode>
<treenode node="withBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerTester.php;f8;308;2;313;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    withBody($body)&#10;&#10;Description&#10;     Set the method&apos;s body, with method chaining.&#10;&#10;Parameters:&#10;    mixed $body;;d1,309;;b1,0;;m0;;emixed $body;;p">
</treenode>
<treenode node="withConfig;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerTester.php;f8;235;2;240;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    withConfig($appConfig)&#10;&#10;Description&#10;     Set controller&apos;s config, with method chaining.&#10;&#10;Parameters:&#10;    mixed $appConfig;;d1,236;;b1,0;;m0;;emixed $appConfig;;p">
</treenode>
<treenode node="withLogger;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerTester.php;f8;280;2;285;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    withLogger($logger)&#10;&#10;Description&#10;     Set controller&apos;s logger, with method chaining.&#10;&#10;Parameters:&#10;    mixed $logger;;d1,281;;b1,0;;m0;;emixed $logger;;p">
</treenode>
<treenode node="withRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerTester.php;f8;249;2;257;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    withRequest($request)&#10;&#10;Description&#10;     Set controller&apos;s request, with method chaining.&#10;&#10;Parameters:&#10;    mixed $request;;d1,250;;b1,0;;m0;;emixed $request;;p">
</treenode>
<treenode node="withResponse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerTester.php;f8;266;2;271;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    withResponse($response)&#10;&#10;Description&#10;     Set controller&apos;s response, with method chaining.&#10;&#10;Parameters:&#10;    mixed $response;;d1,267;;b1,0;;m0;;emixed $response;;p">
</treenode>
<treenode node="withUri;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ControllerTester.php;f8;294;2;299;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    withUri(string $uri)&#10;&#10;Description&#10;     Set the controller&apos;s URI, with method chaining.&#10;&#10;Parameters:&#10;    string $uri;;d1,295;;b1,0;;m0;;estring $uri;;p">
</treenode>
</treenode>
<treenode node="CreateAuthTables;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Database\Migrations\2017-11-20-223112_create_auth_tables.php;f0;4;1;191;;;;vpos;;v;;aMigration;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="down;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Database\Migrations\2017-11-20-223112_create_auth_tables.php;f11;166;5;190;;;;vpos;;v;;a;;r;;d4,167;;b1,0;;m0;;e">
</treenode>
<treenode node="up;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Database\Migrations\2017-11-20-223112_create_auth_tables.php;f11;6;5;162;;;;vpos;;v;;a;;r;;d4,7;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="CreateGroup;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\CreateGroup.php;f0;6;1;54;;;;vpos;;v;;aBaseCommand;;c;;r;;d0,7;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\CreateGroup.php;f8;18;2;53;;;;vpos;;v;;a;;r;;d4,19;;b1,0;;m0;;eparams;;p">
</treenode>
</treenode>
<treenode node="CreateMigration;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Sessions\CreateMigration.php;f0;51;1;135;;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\CreateMigration.php;f0;49;1;185;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class CreateMigration extends BaseCommand&#10;&#10;Description&#10;     Creates a migration file for database sessions.;;d0,52;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Sessions\CreateMigration.php;f8;106;2;133;;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\CreateMigration.php;f8;104;2;183;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params = [])&#10;&#10;Description&#10;     Creates a new migration file with the current timestamp.&#10;&#10;Parameters:&#10;    array $params;;d1,107;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="CreateSeeder;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\CreateSeeder.php;f0;49;1;168;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class CreateSeeder extends BaseCommand&#10;&#10;Description&#10;     Creates a new seeder file.;;d0,50;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\CreateSeeder.php;f8;103;2;167;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params = [])&#10;&#10;Description&#10;     Creates a new migration file with the current timestamp.&#10;&#10;Parameters:&#10;    array $params;;d1,104;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="CreateUser;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\CreateUser.php;f0;8;1;58;;;;vpos;;v;;aBaseCommand;;c;;r;;d0,9;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\CreateUser.php;f8;20;2;57;;;;vpos;;v;;a;;r;;d4,21;;b1,0;;m0;;eparams;;p">
</treenode>
</treenode>
<treenode node="CreditCardRules;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Validation\CreditCardRules.php;f0;50;1;336;;;;vpos;;v;;a;;r&#10;Definition&#10;    class CreditCardRules&#10;&#10;Description&#10;     Class CreditCardRules;;d0,51;;b0,0;;m0;;e">
<treenode node="isValidLuhn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\CreditCardRules.php;f11;293;2;333;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isValidLuhn(string $number = null): bool&#10;&#10;Description&#10;     Checks the given number to see if the number passing a Luhn check.&#10;&#10;Parameters:&#10;    string $number;;d1,294;;b2,0;;m0;;estring $number;;p">
</treenode>
<treenode node="valid_cc_number;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\CreditCardRules.php;f8;210;2;282;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    valid_cc_number(string $ccNumber = null, string $type): bool&#10;&#10;Description&#10;     Verifies that a credit card number is valid and matches the known formats for a wide number of credit card types. This does not verify that the card is a valid card, only that the number is formatted correctly.&#10;&#10;Parameters:&#10;    string $ccNumber&#10;    string $type;;d1,211;;b1,0;;m0;;estring $ccNumber;;pstring $type;;p">
</treenode>
</treenode>
<treenode node="CriticalError;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\CriticalError.php;f0;6;1;9;;;;vpos;;v;;aError;;c;;r&#10;Definition&#10;    class CriticalError extends \Error&#10;&#10;Description&#10;     Error: Critical conditions, like component unavailble, etc.;;d0,7;;b0,0;;m0;;e">
</treenode>
<treenode node="CSRF;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Filters\CSRF.php;f0;57;1;116;;;;vpos;;v;;aFilterInterface;;c;;r&#10;Definition&#10;    class CSRF implements FilterInterface&#10;&#10;Description&#10;     CSRF filter.;;d0,58;;b0,0;;m0;;e">
<treenode node="after;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\CSRF.php;f8;111;2;113;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    after(RequestInterface $request, ResponseInterface $response, $arguments = null)&#10;&#10;Description&#10;     We don&apos;t have anything to do here.&#10;&#10;Parameters:&#10;    RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request&#10;    ResponseInterface|\CodeIgniter\HTTP\Response $response&#10;    array|null $arguments;;d1,112;;b1,0;;m0;;eRequestInterface|\CodeIgniter\HTTP\IncomingRequest $request;;pResponseInterface|\CodeIgniter\HTTP\Response $response;;parray|null $arguments;;p">
</treenode>
<treenode node="before;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\CSRF.php;f8;76;2;98;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    before(RequestInterface $request, $arguments = null)&#10;&#10;Description&#10;     Do whatever processing this filter needs to do. By default it should not return anything during normal execution. However, when an abnormal state is found, it should return an instance of CodeIgniter\HTTP\Response. If it does, script execution will end and that Response will be sent back to the client, allowing for error pages, redirects, etc.&#10;&#10;Parameters:&#10;    RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request&#10;    array|null $arguments;;d1,77;;b1,0;;m0;;eRequestInterface|\CodeIgniter\HTTP\IncomingRequest $request;;parray|null $arguments;;p">
</treenode>
</treenode>
<treenode node="CURLRequest;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f0;53;1;829;;;;vpos;;v;;aRequest;;c;;r&#10;Definition&#10;    class CURLRequest extends Request&#10;&#10;Description&#10;     Class OutgoingRequest;;d0,54;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;119;2;135;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(App $config, URI $uri, ResponseInterface $response = null, array $options = [])&#10;&#10;Description&#10;     Takes an array of options to set the following possible class properties:&#10;&#10;Parameters:&#10;    App $config&#10;    URI $uri&#10;    ResponseInterface $response&#10;    array $options;;d1,120;;b1,0;;m0;;eApp $config;;pURI $uri;;pResponseInterface $response;;parray $options;;p">
</treenode>
<treenode node="applyBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f11;566;2;574;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    applyBody(array $curl_options = []): array&#10;&#10;Description&#10;     Apply body&#10;&#10;Parameters:&#10;    array $curl_options;;d1,567;;b2,0;;m0;;earray $curl_options;;p">
</treenode>
<treenode node="applyMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f11;526;2;555;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    applyMethod(string $method, array $curl_options): array&#10;&#10;Description&#10;     Apply method&#10;&#10;Parameters:&#10;    string $method&#10;    array $curl_options;;d1,527;;b2,0;;m0;;estring $method;;parray $curl_options;;p">
</treenode>
<treenode node="applyRequestHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f11;487;2;514;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    applyRequestHeaders(array $curl_options = []): array&#10;&#10;Description&#10;     Takes all headers current part of this request and adds them to the cURL request.&#10;&#10;Parameters:&#10;    array $curl_options;;d1,488;;b2,0;;m0;;earray $curl_options;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;187;2;190;;;;vpos;;v;;a;;r&#10;Definition&#10;    delete(string $url, array $options = []): ResponseInterface&#10;&#10;Description&#10;     Convenience method for sending a DELETE request.&#10;&#10;Parameters:&#10;    string $url&#10;    array $options;;d1,188;;b1,0;;m0;;estring $url;;parray $options;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;172;2;175;;;;vpos;;v;;a;;r&#10;Definition&#10;    get(string $url, array $options = []): ResponseInterface&#10;&#10;Description&#10;     Convenience method for sending a GET request.&#10;&#10;Parameters:&#10;    string $url&#10;    array $options;;d1,173;;b1,0;;m0;;estring $url;;parray $options;;p">
</treenode>
<treenode node="getMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;402;2;405;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMethod(bool $upper = false): string&#10;&#10;Description&#10;     Get the request method. Overrides the Request class&apos; method since users expect a different answer here.&#10;&#10;Parameters:&#10;    boolean|false $upper - Whether to return in upper or lower case;;d1,403;;b1,0;;m0;;eboolean|false $upper;;p">
</treenode>
<treenode node="head;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;202;2;205;;;;vpos;;v;;aResponseInterface;;r&#10;Definition&#10;    head(string $url, array $options = []): ResponseInterface&#10;&#10;Description&#10;     Convenience method for sending a HEAD request.&#10;&#10;Parameters:&#10;    string $url&#10;    array $options;;d1,203;;b1,0;;m0;;estring $url;;parray $options;;p">
</treenode>
<treenode node="options;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;217;2;220;;;;vpos;;v;;a;;r&#10;Definition&#10;    options(string $url, array $options = []): ResponseInterface&#10;&#10;Description&#10;     Convenience method for sending an OPTIONS request.&#10;&#10;Parameters:&#10;    string $url&#10;    array $options;;d1,218;;b1,0;;m0;;estring $url;;parray $options;;p">
</treenode>
<treenode node="parseOptions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f11;337;2;367;;;;vpos;;v;;a;;r&#10;Definition&#10;    parseOptions(array $options)&#10;&#10;Description&#10;     Sets the correct settings based on the options array passed in.&#10;&#10;Parameters:&#10;    array $options;;d1,338;;b2,0;;m0;;earray $options;;p">
</treenode>
<treenode node="patch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;232;2;235;;;;vpos;;v;;a;;r&#10;Definition&#10;    patch(string $url, array $options = []): ResponseInterface&#10;&#10;Description&#10;     Convenience method for sending a PATCH request.&#10;&#10;Parameters:&#10;    string $url&#10;    array $options;;d1,233;;b1,0;;m0;;estring $url;;parray $options;;p">
</treenode>
<treenode node="post;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;247;2;250;;;;vpos;;v;;a;;r&#10;Definition&#10;    post(string $url, array $options = []): ResponseInterface&#10;&#10;Description&#10;     Convenience method for sending a POST request.&#10;&#10;Parameters:&#10;    string $url&#10;    array $options;;d1,248;;b1,0;;m0;;estring $url;;parray $options;;p">
</treenode>
<treenode node="prepareURL;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f11;379;2;390;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prepareURL(string $url): string&#10;&#10;Description&#10;     If the $url is a relative URL, will attempt to create a full URL by prepending $this-&gt;baseURI to it.&#10;&#10;Parameters:&#10;    string $url;;d1,380;;b2,0;;m0;;estring $url;;p">
</treenode>
<treenode node="put;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;262;2;265;;;;vpos;;v;;a;;r&#10;Definition&#10;    put(string $url, array $options = []): ResponseInterface&#10;&#10;Description&#10;     Convenience method for sending a PUT request.&#10;&#10;Parameters:&#10;    string $url&#10;    array $options;;d1,263;;b1,0;;m0;;estring $url;;parray $options;;p">
</treenode>
<treenode node="request;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;149;2;160;;;;vpos;;v;;a;;r&#10;Definition&#10;    request($method, string $url, array $options = []): ResponseInterface&#10;&#10;Description&#10;     Sends an HTTP request to the specified $url. If this is a relative URL, it will be merged with $this-&gt;baseURI to form a complete URL.&#10;&#10;Parameters:&#10;     $method&#10;    string $url&#10;    array $options;;d1,150;;b1,0;;m0;;e $method;;pstring $url;;parray $options;;p">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;417;2;475;;;;vpos;;v;;a;;r&#10;Definition&#10;    send(string $method, string $url)&#10;&#10;Description&#10;     Fires the actual cURL request.&#10;&#10;Parameters:&#10;    string $method&#10;    string $url;;d1,418;;b1,0;;m0;;estring $method;;pstring $url;;p">
</treenode>
<treenode node="sendRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f11;809;2;826;;;;vpos;;v;;astring;;r&#10;Definition&#10;    sendRequest(array $curl_options = []): string&#10;&#10;Description&#10;     Does the actual work of initializing cURL, setting the options, and grabbing the output.&#10;&#10;Parameters:&#10;    array $curl_options;;d1,810;;b2,0;;m0;;earray $curl_options;;p">
</treenode>
<treenode node="setAuth;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;278;2;287;;;;vpos;;v;;a;;r&#10;Definition&#10;    setAuth(string $username, string $password, string $type = &apos;basic&apos;)&#10;&#10;Description&#10;     Set the HTTP Authentication.&#10;&#10;Parameters:&#10;    string $username&#10;    string $password&#10;    string $type - basic or digest;;d1,279;;b1,0;;m0;;estring $username;;pstring $password;;pstring $type;;p">
</treenode>
<treenode node="setCURLOptions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f11;622;2;795;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    setCURLOptions(array $curl_options = [], array $config = [])&#10;&#10;Description&#10;     Set CURL options&#10;&#10;Parameters:&#10;    array $curl_options&#10;    array $config;;d1,623;;b2,0;;m0;;earray $curl_options;;parray $config;;p">
</treenode>
<treenode node="setForm;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;299;2;311;;;;vpos;;v;;a;;r&#10;Definition&#10;    setForm(array $params, bool $multipart = false)&#10;&#10;Description&#10;     Set form data to be sent.&#10;&#10;Parameters:&#10;    array $params&#10;    boolean $multipart - Set TRUE if you are sending CURLFiles;;d1,300;;b1,0;;m0;;earray $params;;pboolean $multipart;;p">
</treenode>
<treenode node="setJSON;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f8;322;2;327;;;;vpos;;v;;a;;r&#10;Definition&#10;    setJSON($data)&#10;&#10;Description&#10;     Set JSON data to be sent.&#10;&#10;Parameters:&#10;    mixed $data;;d1,323;;b1,0;;m0;;emixed $data;;p">
</treenode>
<treenode node="setResponseHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\CURLRequest.php;f11;584;2;610;;;;vpos;;v;;a;;r&#10;Definition&#10;    setResponseHeaders(array $headers = [])&#10;&#10;Description&#10;     Parses the header retrieved from the cURL response into our Response object.&#10;&#10;Parameters:&#10;    array $headers;;d1,585;;b2,0;;m0;;earray $headers;;p">
</treenode>
</treenode>
<treenode node="Dashboard;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Dashboard.php;f0;2;1;11;;;;vpos;;v;;aBaseController;;c;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="index;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Dashboard.php;f8;4;2;8;;;;vpos;;v;;a;;r;;d1,5;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Database;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Database.php;f0;46;1;277;;O:\xampp\htdocs\2020\blog-4\system\Database\Database.php;f0;48;1;137;;O:\xampp\htdocs\2020\blog-4\app\Config\Database.php;f0;8;1;113;;;;vpos;;v;;aConfig;;c;;r&#10;Definition&#10;    class Database extends \CodeIgniter\Database\Config&#10;&#10;Description&#10;     Database Configuration;;d0,9;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Database.php;f8;97;2;100;;O:\xampp\htdocs\2020\blog-4\app\Config\Database.php;f8;83;2;109;;;;vpos;;v;;a;;r;;d1,84;;b1,0;;m0;;e">
</treenode>
<treenode node="collect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Database.php;f15;112;2;123;;;;vpos;;v;;a;;r&#10;Definition&#10;    collect(Query $query)&#10;&#10;Description&#10;     The static method used during Events to collect data.&#10;&#10;Parameters:&#10;    \CodeIgniter\Database\Query $query;;d1,113;;b1,5;;m0;;e\CodeIgniter\Database\Query $query;;p">
</treenode>
<treenode node="display;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Database.php;f8;167;2;224;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    display(): array&#10;&#10;Description&#10;     Returns the data of this collector to be formatted in the toolbar;;d1,168;;b1,0;;m0;;e">
</treenode>
<treenode node="formatTimelineData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Database.php;f11;132;2;158;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    formatTimelineData(): array&#10;&#10;Description&#10;     Returns timeline data formatted for the toolbar.&#10;&#10;Return:&#10;   The formatted data or an empty array;;d1,133;;b2,0;;m0;;e">
</treenode>
<treenode node="getBadgeValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Database.php;f8;233;2;236;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getBadgeValue(): int&#10;&#10;Description&#10;     Gets the &quot;badge&quot; value for the button.;;d1,234;;b1,0;;m0;;e">
</treenode>
<treenode node="getTitleDetails;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Database.php;f8;245;2;249;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getTitleDetails(): string&#10;&#10;Description&#10;     Information to be displayed next to the title.&#10;&#10;Return:&#10;   The number of queries (in parentheses) or an empty string;;d1,246;;b1,0;;m0;;e">
</treenode>
<treenode node="icon;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Database.php;f8;272;2;275;;;;vpos;;v;;astring;;r&#10;Definition&#10;    icon(): string&#10;&#10;Description&#10;     Display the icon.;;d1,273;;b1,0;;m0;;e">
</treenode>
<treenode node="isEmpty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Database.php;f8;258;2;261;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isEmpty(): bool&#10;&#10;Description&#10;     Does this collector have any data collected?;;d1,259;;b1,0;;m0;;e">
</treenode>
<treenode node="load;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Database.php;f8;72;2;90;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    load(array $params = [], string $alias)&#10;&#10;Description&#10;     Parses the connection binds and returns an instance of the driver ready to go.&#10;&#10;Parameters:&#10;    array $params&#10;    string $alias;;d1,73;;b1,0;;m0;;earray $params;;pstring $alias;;p">
</treenode>
<treenode node="loadForge;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Database.php;f8;101;2;112;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    loadForge(ConnectionInterface $db)&#10;&#10;Description&#10;     Creates a new Forge instance for the current database type.&#10;&#10;Parameters:&#10;    ConnectionInterface|BaseConnection $db;;d1,102;;b1,0;;m0;;eConnectionInterface|BaseConnection $db;;p">
</treenode>
<treenode node="loadUtils;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Database.php;f8;123;2;134;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    loadUtils(ConnectionInterface $db)&#10;&#10;Description&#10;     Loads the Database Utilities class.&#10;&#10;Parameters:&#10;    ConnectionInterface|BaseConnection $db;;d1,124;;b1,0;;m0;;eConnectionInterface|BaseConnection $db;;p">
</treenode>
</treenode>
<treenode node="DatabaseException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\DatabaseException.php;f0;42;1;50;;;;vpos;;v;;aError;;cExceptionInterface;;c;;r&#10;Definition&#10;    class DatabaseException extends \Error implements ExceptionInterface&#10;&#10;Description&#10;     CodeIgniter;;d0,43;;b0,0;;m0;;e">
</treenode>
<treenode node="DatabaseHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f0;49;1;429;;;;vpos;;v;;aBaseHandler;;cSessionHandlerInterface;;c;;r&#10;Definition&#10;    class DatabaseHandler extends BaseHandler implements \SessionHandlerInterface&#10;&#10;Description&#10;     Session handler using current Database for storage;;d0,50;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f8;95;2;122;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(BaseConfig $config, string $ipAddress)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    BaseConfig $config&#10;    string $ipAddress;;d1,96;;b1,0;;m0;;eBaseConfig $config;;pstring $ipAddress;;p">
</treenode>
<treenode node="close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f8;293;2;296;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    close(): bool&#10;&#10;Description&#10;     Close;;d1,294;;b1,0;;m0;;e">
</treenode>
<treenode node="destroy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f8;309;2;334;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    destroy($sessionID): bool&#10;&#10;Description&#10;     Destroy&#10;&#10;Parameters:&#10;    string $sessionID;;d1,310;;b1,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="gc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f8;347;2;350;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    gc($maxlifetime): bool&#10;&#10;Description&#10;     Garbage Collector&#10;&#10;Parameters:&#10;    integer $maxlifetime - Maximum lifetime of sessions;;d1,348;;b1,0;;m0;;einteger $maxlifetime;;p">
</treenode>
<treenode node="lockSession;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f11;360;2;387;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    lockSession(string $sessionID): bool&#10;&#10;Description&#10;     Lock the session.&#10;&#10;Parameters:&#10;    string $sessionID;;d1,361;;b2,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="open;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f8;137;2;145;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    open($savePath, $name): bool&#10;&#10;Description&#10;     Open&#10;&#10;Parameters:&#10;    string $savePath - Path to session files&apos; directory&#10;    string $name - Session cookie name;;d1,138;;b1,0;;m0;;estring $savePath;;pstring $name;;p">
</treenode>
<treenode node="read;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f8;158;2;210;;;;vpos;;v;;astring;;r&#10;Definition&#10;    read($sessionID): string&#10;&#10;Description&#10;     Read&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;&#10;Return:&#10;   Serialized session data;;d1,159;;b1,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="releaseLock;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f11;396;2;426;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    releaseLock(): bool&#10;&#10;Description&#10;     Releases the lock, if any.;;d1,397;;b2,0;;m0;;e">
</treenode>
<treenode node="write;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\DatabaseHandler.php;f8;224;2;282;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    write($sessionID, $sessionData): bool&#10;&#10;Description&#10;     Write&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;    string $sessionData - Serialized session data;;d1,225;;b1,0;;m0;;estring $sessionID;;pstring $sessionData;;p">
</treenode>
</treenode>
<treenode node="DataException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\DataException.php;f0;4;1;64;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="forEmptyDataset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\DataException.php;f15;26;2;29;;;;vpos;;v;;a;;r&#10;Definition&#10;    forEmptyDataset(string $mode)&#10;&#10;Description&#10;     Used by Model&apos;s insert/update methods when there isn&apos;t any data to actually work with.&#10;&#10;Parameters:&#10;    string $mode;;d1,27;;b1,5;;m0;;estring $mode;;p">
</treenode>
<treenode node="forEmptyInputGiven;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\DataException.php;f15;55;2;58;;;;vpos;;v;;a;;r;;d1,56;;b1,5;;m0;;eargument;;p">
</treenode>
<treenode node="forFindColumnHaveMultipleColumns;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\DataException.php;f15;60;2;63;;;;vpos;;v;;a;;r;;d1,61;;b1,5;;m0;;e">
</treenode>
<treenode node="forInvalidAllowedFields;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\DataException.php;f15;45;2;48;;;;vpos;;v;;a;;r;;d1,46;;b1,5;;m0;;emodel;;p">
</treenode>
<treenode node="forInvalidArgument;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\DataException.php;f15;40;2;43;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidArgument(string $argument)&#10;&#10;Description&#10;     Thrown when an argument for one of the Model&apos;s methods were empty or otherwise invalid, and they could not be to work correctly for that method.&#10;&#10;Parameters:&#10;    string $argument;;d1,41;;b1,5;;m0;;estring $argument;;p">
</treenode>
<treenode node="forInvalidMethodTriggered;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\DataException.php;f15;13;2;16;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidMethodTriggered(string $method)&#10;&#10;Description&#10;     Used by the Model&apos;s trigger() method when the callback cannot be found.&#10;&#10;Parameters:&#10;    string $method;;d1,14;;b1,5;;m0;;estring $method;;p">
</treenode>
<treenode node="forTableNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Exceptions\DataException.php;f15;50;2;53;;;;vpos;;v;;a;;r;;d1,51;;b1,5;;m0;;etable;;p">
</treenode>
</treenode>
<treenode node="DateTimeObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\DateTimeObject.php;f0;29;1;52;;;;vpos;;v;;aInstanceObject;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\DateTimeObject.php;f11;35;5;40;;;;vpos;;v;;a;;r;;d4,36;;b1,0;;m0;;edt;;p">
</treenode>
<treenode node="getValueShort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\DateTimeObject.php;f11;42;5;51;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="DateTimePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DateTimePlugin.php;f0;31;1;54;;;;vpos;;v;;aPlugin;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DateTimePlugin.php;f11;38;5;41;;;;vpos;;v;;a;;r;;d4,39;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DateTimePlugin.php;f11;33;5;36;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DateTimePlugin.php;f11;43;5;53;;;;vpos;;v;;a;;r;;d4,44;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="DebugToolbar;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Filters\DebugToolbar.php;f0;48;1;81;;;;vpos;;v;;aFilterInterface;;c;;r&#10;Definition&#10;    class DebugToolbar implements FilterInterface&#10;&#10;Description&#10;     Debug toolbar filter;;d0,49;;b0,0;;m0;;e">
<treenode node="after;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\DebugToolbar.php;f8;75;2;78;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    after(RequestInterface $request, ResponseInterface $response, $arguments = null)&#10;&#10;Description&#10;     If the debug flag is set (CI_DEBUG) then collect performance and debug information and display it in a toolbar.&#10;&#10;Parameters:&#10;    RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request&#10;    ResponseInterface|\CodeIgniter\HTTP\Response $response&#10;    array|null $arguments;;d1,76;;b1,0;;m0;;eRequestInterface|\CodeIgniter\HTTP\IncomingRequest $request;;pResponseInterface|\CodeIgniter\HTTP\Response $response;;parray|null $arguments;;p">
</treenode>
<treenode node="before;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\DebugToolbar.php;f8;59;2;61;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    before(RequestInterface $request, $arguments = null)&#10;&#10;Description&#10;     We don&apos;t need to do anything here.&#10;&#10;Parameters:&#10;    RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request&#10;    array|null $arguments;;d1,60;;b1,0;;m0;;eRequestInterface|\CodeIgniter\HTTP\IncomingRequest $request;;parray|null $arguments;;p">
</treenode>
</treenode>
<treenode node="DepthLimitPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\DepthLimitPlugin.php;f0;29;1;43;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\DepthLimitPlugin.php;f0;29;1;35;;;;vpos;;v;;aPlugin;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\DepthLimitPlugin.php;f11;31;5;42;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\DepthLimitPlugin.php;f11;31;5;34;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="DictionaryValidator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\DictionaryValidator.php;f0;12;1;80;;;;vpos;;v;;aBaseValidator;;cValidatorInterface;;c;;r&#10;Definition&#10;    class DictionaryValidator extends BaseValidator implements ValidatorInterface&#10;&#10;Description&#10;     Class DictionaryValidator;;d0,13;;b0,0;;m0;;e">
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\DictionaryValidator.php;f11;34;5;56;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    check(string $password, Entity $user=null): bool&#10;&#10;Description&#10;     Checks the password against the words in the file and returns false if a match is found. Returns true if no match is found. If true is returned the password will be passed to next validator. If false is returned the validation process will be immediately stopped.&#10;&#10;Parameters:&#10;    string $password&#10;    Entity $user;;d4,35;;b1,0;;m0;;estring $password;;pEntity $user;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\DictionaryValidator.php;f11;63;5;66;;;;vpos;;v;;astring;;r&#10;Definition&#10;    error(): string&#10;&#10;Description&#10;     Returns the error string that should be displayed to the user.;;d4,64;;b1,0;;m0;;e">
</treenode>
<treenode node="suggestion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\DictionaryValidator.php;f11;76;5;79;;;;vpos;;v;;astring;;r&#10;Definition&#10;    suggestion(): string&#10;&#10;Description&#10;     Returns a suggestion that may be displayed to the user to help them choose a better password. The method is required, but a suggestion is optional. May return an empty string instead.;;d4,77;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="DocstringPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\DocstringPlugin.php;f0;31;1;69;;;;vpos;;v;;aPlugin;;cTabPluginInterface;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="renderTab;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\DocstringPlugin.php;f11;33;5;68;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;er;;p">
</treenode>
</treenode>
<treenode node="DocstringRepresentation;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\DocstringRepresentation.php;f0;27;1;72;;;;vpos;;v;;aRepresentation;;c;;r;;d0,28;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\DocstringRepresentation.php;f11;34;5;42;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m0;;edocstring;;pfile;;pline;;pclass;;p">
</treenode>
<treenode node="getDocstringWithoutComments;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\DocstringRepresentation.php;f11;61;5;71;;;;vpos;;v;;anull;;r&#10;Definition&#10;    getDocstringWithoutComments()&#10;&#10;Description&#10;     Returns the representation&apos;s docstring without surrounding comments.&#10;&#10;Return:&#10;   |string Docstring with comments stripped;;d4,62;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="DocTypes;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\DocTypes.php;f0;8;1;32;;;;vpos;;v;;a;;r&#10;Definition&#10;    class DocTypes&#10;&#10;Description&#10;     DocTypes;;d0,9;;b0,0;;m0;;e">
</treenode>
<treenode node="DOMDocumentPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DOMDocumentPlugin.php;f0;39;1;327;;;;vpos;;v;;aPlugin;;c;;r&#10;Definition&#10;    class DOMDocumentPlugin extends Plugin&#10;&#10;Description&#10;     The DOMDocument parser plugin is particularly useful as it is both the only way to see inside the DOMNode without print_r, and the only way to see mixed text and node inside XML (SimpleXMLElement will strip out the text).;;d0,40;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DOMDocumentPlugin.php;f11;86;5;89;;;;vpos;;v;;a;;r;;d4,87;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DOMDocumentPlugin.php;f11;81;5;84;;;;vpos;;v;;a;;r;;d4,82;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DOMDocumentPlugin.php;f11;91;5;104;;;;vpos;;v;;a;;r;;d4,92;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="parseList;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DOMDocumentPlugin.php;f14;106;5;162;;;;vpos;;v;;a;;r;;d4,107;;b2,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="parseNode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DOMDocumentPlugin.php;f14;164;5;268;;;;vpos;;v;;a;;r;;d4,165;;b2,0;;m0;;evar;;po;;p">
</treenode>
<treenode node="parseProperty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DOMDocumentPlugin.php;f14;270;5;306;;;;vpos;;v;;a;;r;;d4,271;;b2,0;;m0;;eo;;pprop;;pvar;;p">
</treenode>
<treenode node="textualNodeToString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\DOMDocumentPlugin.php;f21;308;5;326;;;;vpos;;v;;a;;r;;d4,309;;b2,5;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="DOMParser;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f0;44;1;358;;;;vpos;;v;;a;;r&#10;Definition&#10;    class DOMParser&#10;&#10;Description&#10;     Load a response into a DOMDocument for testing assertions based on that;;d0,45;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;58;2;69;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct()&#10;&#10;Description&#10;     Constructor.;;d1,59;;b1,0;;m0;;e">
</treenode>
<treenode node="dontSee;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;161;2;164;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    dontSee(string $search = null, string $element = null): bool&#10;&#10;Description&#10;     Checks to see if the text is NOT found within the result.&#10;&#10;Parameters:&#10;    string $search&#10;    string|null $element;;d1,162;;b1,0;;m0;;estring $search;;pstring|null $element;;p">
</treenode>
<treenode node="dontSeeElement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;186;2;189;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    dontSeeElement(string $element): bool&#10;&#10;Description&#10;     Checks to see if the element is available within the result.&#10;&#10;Parameters:&#10;    string $element;;d1,187;;b1,0;;m0;;estring $element;;p">
</treenode>
<treenode node="doXPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f11;247;2;301;;;;vpos;;v;;atype;;r&#10;Definition&#10;    doXPath(string $search = null, string $element, array $paths = [])&#10;&#10;Description&#10;     Search the DOM using an XPath expression.&#10;&#10;Parameters:&#10;    string $search&#10;    string $element&#10;    array $paths;;d1,248;;b2,0;;m0;;estring $search;;pstring $element;;parray $paths;;p">
</treenode>
<treenode node="getBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;76;2;79;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getBody(): string&#10;&#10;Description&#10;     Returns the body of the current document.;;d1,77;;b1,0;;m0;;e">
</treenode>
<treenode node="parseSelector;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;309;2;356;;;;vpos;;v;;atype;;r&#10;Definition&#10;    parseSelector(string $selector)&#10;&#10;Description&#10;     Look for the a selector  in the passed text.&#10;&#10;Parameters:&#10;    string $selector;;d1,310;;b1,0;;m0;;estring $selector;;p">
</treenode>
<treenode node="see;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;139;2;151;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    see(string $search = null, string $element = null): bool&#10;&#10;Description&#10;     Checks to see if the text is found within the result.&#10;&#10;Parameters:&#10;    string $search&#10;    string $element;;d1,140;;b1,0;;m0;;estring $search;;pstring $element;;p">
</treenode>
<treenode node="seeCheckboxIsChecked;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;227;2;235;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    seeCheckboxIsChecked(string $element): bool&#10;&#10;Description&#10;     Checks for checkboxes that are currently checked.&#10;&#10;Parameters:&#10;    string $element;;d1,228;;b1,0;;m0;;estring $element;;p">
</treenode>
<treenode node="seeElement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;174;2;177;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    seeElement(string $element): bool&#10;&#10;Description&#10;     Checks to see if an element with the matching CSS specifier is found within the current DOM.&#10;&#10;Parameters:&#10;    string $element;;d1,175;;b1,0;;m0;;estring $element;;p">
</treenode>
<treenode node="seeInField;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;213;2;218;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    seeInField(string $field, string $value): bool&#10;&#10;Description&#10;     Checks for an input named $field with a value of $value.&#10;&#10;Parameters:&#10;    string $field&#10;    string $value;;d1,214;;b1,0;;m0;;estring $field;;pstring $value;;p">
</treenode>
<treenode node="seeLink;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;200;2;203;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    seeLink(string $text, string $details = null): bool&#10;&#10;Description&#10;     Determines if a link with the specified text is found within the results.&#10;&#10;Parameters:&#10;    string $text&#10;    string|null $details;;d1,201;;b1,0;;m0;;estring $text;;pstring|null $details;;p">
</treenode>
<treenode node="withFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;119;2;129;;;;vpos;;v;;a;;r&#10;Definition&#10;    withFile(string $path)&#10;&#10;Description&#10;     Loads the contents of a file as a string so that we can work with it.&#10;&#10;Parameters:&#10;    string $path;;d1,120;;b1,0;;m0;;estring $path;;p">
</treenode>
<treenode node="withString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\DOMParser.php;f8;88;2;109;;;;vpos;;v;;a;;r&#10;Definition&#10;    withString(string $content)&#10;&#10;Description&#10;     Sets a string as the body that we want to work with.&#10;&#10;Parameters:&#10;    string $content;;d1,89;;b1,0;;m0;;estring $content;;p">
</treenode>
</treenode>
<treenode node="DotEnv;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Config\DotEnv.php;f0;44;1;324;;;;vpos;;v;;a;;r&#10;Definition&#10;    class DotEnv&#10;&#10;Description&#10;     Environment-specific configuration;;d0,45;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\DotEnv.php;f8;62;2;65;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(string $path, string $file = &apos;.env&apos;)&#10;&#10;Description&#10;     Builds the path to our file.&#10;&#10;Parameters:&#10;    string $path&#10;    string $file;;d1,63;;b1,0;;m0;;estring $path;;pstring $file;;p">
</treenode>
<treenode node="getVariable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\DotEnv.php;f11;307;2;321;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getVariable(string $name)&#10;&#10;Description&#10;     Search the different places for environment variables and return first value found.&#10;&#10;Parameters:&#10;    string $name&#10;&#10;Return:&#10;   |null;;d1,308;;b2,0;;m0;;estring $name;;p">
</treenode>
<treenode node="load;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\DotEnv.php;f8;76;2;81;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    load(): bool&#10;&#10;Description&#10;     The main entry point, will load the .env file and process it so that we end up with all settings in the PHP environment vars (i.e. getenv(), $_ENV, and $_SERVER);;d1,77;;b1,0;;m0;;e">
</treenode>
<treenode node="normaliseVariable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\DotEnv.php;f8;165;2;194;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    normaliseVariable(string $name, string $value = &apos;&apos;): array&#10;&#10;Description&#10;     Parses for assignment, cleans the $name and $value, and ensures that nested variables are handled.&#10;&#10;Parameters:&#10;    string $name&#10;    string $value;;d1,166;;b1,0;;m0;;estring $name;;pstring $value;;p">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\DotEnv.php;f8;90;25;90;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Parse the .env file into an array of key =&gt; value&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="resolveNestedVariables;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\DotEnv.php;f11;270;2;293;;;;vpos;;v;;astring;;r&#10;Definition&#10;    resolveNestedVariables(string $value): string&#10;&#10;Description&#10;     Resolve the nested variables.&#10;&#10;Parameters:&#10;     $value;;d1,271;;b2,0;;m0;;e $value;;p">
</treenode>
<treenode node="sanitizeValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\DotEnv.php;f11;209;2;253;;;;vpos;;v;;astring;;r&#10;Definition&#10;    sanitizeValue(string $value): string&#10;&#10;Description&#10;     Strips quotes from the environment variable value.&#10;&#10;Parameters:&#10;    string $value;;d1,210;;b2,0;;m0;;estring $value;;p">
</treenode>
<treenode node="setVariable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\DotEnv.php;f11;138;2;152;;;;vpos;;v;;a;;r&#10;Definition&#10;    setVariable(string $name, string $value = &apos;&apos;)&#10;&#10;Description&#10;     Sets the variable into the environment. Will parse the string first to look for {name}={value} pattern, ensure that nested variables are handled, and strip it of single and double quotes.&#10;&#10;Parameters:&#10;    string $name&#10;    string $value;;d1,139;;b2,0;;m0;;estring $name;;pstring $value;;p">
</treenode>
</treenode>
<treenode node="DownloadException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\DownloadException.php;f0;8;1;35;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r&#10;Definition&#10;    class DownloadException extends \RuntimeException implements ExceptionInterface&#10;&#10;Description&#10;     Class DownloadException;;d0,9;;b0,0;;m0;;e">
<treenode node="forCannotSetBinary;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\DownloadException.php;f15;16;2;19;;;;vpos;;v;;a;;r;;d1,17;;b1,5;;m0;;e">
</treenode>
<treenode node="forCannotSetCache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\DownloadException.php;f15;26;2;29;;;;vpos;;v;;a;;r;;d1,27;;b1,5;;m0;;e">
</treenode>
<treenode node="forCannotSetFilePath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\DownloadException.php;f15;11;2;14;;;;vpos;;v;;a;;r;;d1,12;;b1,5;;m0;;epath;;p">
</treenode>
<treenode node="forCannotSetStatusCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\DownloadException.php;f15;31;2;34;;;;vpos;;v;;a;;r;;d1,32;;b1,5;;m0;;ecode;;preason;;p">
</treenode>
<treenode node="forNotFoundDownloadSource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\DownloadException.php;f15;21;2;24;;;;vpos;;v;;a;;r;;d1,22;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="DownloadResponse;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f0;48;1;548;;;;vpos;;v;;aMessage;;cResponseInterface;;c;;r&#10;Definition&#10;    class DownloadResponse extends Message implements ResponseInterface&#10;&#10;Description&#10;     HTTP response when a download is requested.;;d0,49;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;105;2;109;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(string $filename, bool $setMime)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    string $filename&#10;    boolean $setMime;;d1,106;;b1,0;;m0;;estring $filename;;pboolean $setMime;;p">
</treenode>
<treenode node="buildHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;451;2;463;;;;vpos;;v;;a;;r&#10;Definition&#10;    buildHeaders()&#10;&#10;Description&#10;     set header for file download.;;d1,452;;b1,0;;m0;;e">
</treenode>
<treenode node="getContentDisposition;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f9;233;2;252;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getContentDisposition() : string&#10;&#10;Description&#10;     get Content-Disposition Header string.;;d1,234;;b3,0;;m0;;e">
</treenode>
<treenode node="getContentLength;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;159;2;171;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getContentLength() : int&#10;&#10;Description&#10;     get content length.;;d1,160;;b1,0;;m0;;e">
</treenode>
<treenode node="getDownloadFileName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f9;205;2;226;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDownloadFileName(): string&#10;&#10;Description&#10;     get download filename.;;d1,206;;b3,0;;m0;;e">
</treenode>
<treenode node="getReason;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;295;2;298;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getReason(): string&#10;&#10;Description&#10;     Gets the response response phrase associated with the status code.;;d1,296;;b1,0;;m0;;e">
</treenode>
<treenode node="getStatusCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;257;2;260;;;;vpos;;v;;a;;r&#10;Definition&#10;    getStatusCode(): int&#10;&#10;Description&#10;     { inheritDoc};;d1,258;;b1,0;;m0;;e">
</treenode>
<treenode node="noCache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;354;2;361;;;;vpos;;v;;a;;r&#10;Definition&#10;    noCache(): self&#10;&#10;Description&#10;     Sets the appropriate headers to ensure this response is not cached by the browsers.;;d1,355;;b1,0;;m0;;e">
</treenode>
<treenode node="pretend;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;429;2;434;;;;vpos;;v;;a;;r&#10;Definition&#10;    pretend(bool $pretend = true)&#10;&#10;Description&#10;     For unit testing, don&apos;t actually send headers.&#10;&#10;Parameters:&#10;    boolean $pretend;;d1,430;;b1,0;;m0;;eboolean $pretend;;p">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;439;2;446;;;;vpos;;v;;a;;r&#10;Definition&#10;    send()&#10;&#10;Description&#10;     { inheritDoc};;d1,440;;b1,0;;m0;;e">
</treenode>
<treenode node="sendBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;505;2;517;;;;vpos;;v;;aDownloadResponse;;r&#10;Definition&#10;    sendBody()&#10;&#10;Description&#10;     output download file text.;;d1,506;;b1,0;;m0;;e">
</treenode>
<treenode node="sendBodyByBinary;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f9;542;2;547;;;;vpos;;v;;aDownloadResponse;;r&#10;Definition&#10;    sendBodyByBinary()&#10;&#10;Description&#10;     output download text by binary;;d1,543;;b3,0;;m0;;e">
</treenode>
<treenode node="sendBodyByFilePath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f9;524;2;535;;;;vpos;;v;;aDownloadResponse;;r&#10;Definition&#10;    sendBodyByFilePath()&#10;&#10;Description&#10;     output download text by file.;;d1,525;;b3,0;;m0;;e">
</treenode>
<treenode node="sendHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;470;2;496;;;;vpos;;v;;aDownloadResponse;;r&#10;Definition&#10;    sendHeaders()&#10;&#10;Description&#10;     Sends the headers of this HTTP request to the browser.;;d1,471;;b1,0;;m0;;e">
</treenode>
<treenode node="setBinary;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;116;2;124;;;;vpos;;v;;a;;r&#10;Definition&#10;    setBinary(string $binary)&#10;&#10;Description&#10;     set download for binary string.&#10;&#10;Parameters:&#10;    string $binary;;d1,117;;b1,0;;m0;;estring $binary;;p">
</treenode>
<treenode node="setCache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;393;2;396;;;;vpos;;v;;a;;r&#10;Definition&#10;    setCache(array $options = [])&#10;&#10;Description&#10;     A shortcut method that allows the developer to set all of the cache-control headers in one method call.&#10;&#10;Parameters:&#10;    array $options;;d1,394;;b1,0;;m0;;earray $options;;p">
</treenode>
<treenode node="setContentType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;332;2;348;;;;vpos;;v;;aResponseInterface;;r&#10;Definition&#10;    setContentType(string $mime, string $charset = &apos;UTF-8&apos;)&#10;&#10;Description&#10;     Sets the Content Type header for this response with the mime type and, optionally, the charset.&#10;&#10;Parameters:&#10;    string $mime&#10;    string $charset;;d1,333;;b1,0;;m0;;estring $mime;;pstring $charset;;p">
</treenode>
<treenode node="setContentTypeByMimeType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f9;176;2;198;;;;vpos;;v;;a;;r&#10;Definition&#10;    setContentTypeByMimeType()&#10;&#10;Description&#10;     Set content type by guessing mime type from file extension;;d1,177;;b3,0;;m0;;e">
</treenode>
<treenode node="setDate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;312;2;319;;;;vpos;;v;;aResponseInterface;;r&#10;Definition&#10;    setDate(\DateTime $date)&#10;&#10;Description&#10;     Sets the date header&#10;&#10;Parameters:&#10;    \DateTime $date;;d1,313;;b1,0;;m0;;e\DateTime $date;;p">
</treenode>
<treenode node="setFileName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;148;2;152;;;;vpos;;v;;a;;r&#10;Definition&#10;    setFileName(string $filename)&#10;&#10;Description&#10;     set name for the download.&#10;&#10;Parameters:&#10;    string $filename;;d1,149;;b1,0;;m0;;estring $filename;;p">
</treenode>
<treenode node="setFilePath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;131;2;139;;;;vpos;;v;;a;;r&#10;Definition&#10;    setFilePath(string $filepath)&#10;&#10;Description&#10;     set download for file.&#10;&#10;Parameters:&#10;    string $filepath;;d1,132;;b1,0;;m0;;estring $filepath;;p">
</treenode>
<treenode node="setLastModified;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;403;2;416;;;;vpos;;v;;a;;r&#10;Definition&#10;    setLastModified($date)&#10;&#10;Description&#10;     { inheritDoc};;d1,404;;b1,0;;m0;;edate;;p">
</treenode>
<treenode node="setStatusCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\DownloadResponse.php;f8;280;2;283;;;;vpos;;v;;a;;r&#10;Definition&#10;    setStatusCode(int $code, string $reason = &apos;&apos;)&#10;&#10;Description&#10;     Return an instance with the specified status code and, optionally, reason phrase.&#10;&#10;Parameters:&#10;    integer $code - The 3-digit integer result code to set&#10;    string $reason - The reason phrase to use with the;;d1,281;;b1,0;;m0;;einteger $code;;pstring $reason;;p">
</treenode>
</treenode>
<treenode node="DummyHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f0;45;1;184;;;;vpos;;v;;aCacheInterface;;c;;r&#10;Definition&#10;    class DummyHandler implements CacheInterface&#10;&#10;Description&#10;     Dummy cache handler;;d0,46;;b0,0;;m0;;e">
<treenode node="clean;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;137;2;140;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    clean()&#10;&#10;Description&#10;     Will delete all items in the entire cache.;;d1,138;;b1,0;;m0;;e">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;125;2;128;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    decrement(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic decrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,126;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;95;2;98;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    delete(string $key)&#10;&#10;Description&#10;     Deletes a specific item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,96;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;65;2;68;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get(string $key)&#10;&#10;Description&#10;     Attempts to fetch an item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,66;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getCacheInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;152;2;155;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCacheInfo()&#10;&#10;Description&#10;     Returns information on the entire cache.;;d1,153;;b1,0;;m0;;e">
</treenode>
<treenode node="getMetaData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;166;2;169;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getMetaData(string $key)&#10;&#10;Description&#10;     Returns detailed information about the specific item in the cache.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,167;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;110;2;113;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    increment(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic incrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,111;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;51;2;54;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Takes care of any handler-specific setup that must be done.;;d1,52;;b1,0;;m0;;e">
</treenode>
<treenode node="isSupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;178;2;181;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isSupported(): bool&#10;&#10;Description&#10;     Determines if the driver is supported on this system.;;d1,179;;b1,0;;m0;;e">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\DummyHandler.php;f8;81;2;84;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    save(string $key, $value, int $ttl = 60)&#10;&#10;Description&#10;     Saves an item to the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name&#10;    mixed $value - The data to save&#10;    integer $ttl - Time To Live, in seconds (default 60);;d1,82;;b1,0;;m0;;estring $key;;pmixed $value;;pinteger $ttl;;p">
</treenode>
</treenode>
<treenode node="Email;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f0;55;1;2187;;O:\xampp\htdocs\2020\blog-4\app\Config\Email.php;f0;5;1;170;;;;vpos;;v;;aBaseConfig;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;376;2;380;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config = null)&#10;&#10;Description&#10;     Constructor - Sets Email Preferences&#10;&#10;Parameters:&#10;    array|null $config;;d1,377;;b1,0;;m0;;earray|null $config;;p">
</treenode>
<treenode node="__destruct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;2136;2;2139;;;;vpos;;v;;a;;r&#10;Definition&#10;    __destruct()&#10;&#10;Description&#10;     Destructor;;d1,2137;;b1,0;;m0;;e">
</treenode>
<treenode node="appendAttachments;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1285;2;1305;;;;vpos;;v;;astring;;r&#10;Definition&#10;    appendAttachments(&amp;$body, $boundary, $multipart = null)&#10;&#10;Description&#10;     Prepares attachment string&#10;&#10;Parameters:&#10;    string - &amp;$body     Message body to append to&#10;    string $boundary - Multipart boundary&#10;    string|null $multipart - When provided, only attachments of this type will be processed;;d1,1286;;b2,0;;m0;;estring;;pstring $boundary;;pstring|null $multipart;;p">
</treenode>
<treenode node="attach;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;650;2;686;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    attach($file, $disposition = &apos;&apos;, $newname = null, $mime = &apos;&apos;)&#10;&#10;Description&#10;     Assign file attachments&#10;&#10;Parameters:&#10;    string $file - Can be local path, URL or buffered content&#10;    string $disposition - &apos;attachment&apos;&#10;    string|null $newname&#10;    string $mime;;d1,651;;b1,0;;m0;;estring $file;;pstring $disposition;;pstring|null $newname;;pstring $mime;;p">
</treenode>
<treenode node="attachmentsHaveMultipart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1264;2;1274;;;;vpos;;v;;a;;r;;d1,1265;;b2,0;;m0;;etype;;p">
</treenode>
<treenode node="batchBCCSend;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;1595;2;1636;;;;vpos;;v;;a;;r&#10;Definition&#10;    batchBCCSend()&#10;&#10;Description&#10;     Batch Bcc Send. Sends groups of BCCs in batches;;d1,1596;;b1,0;;m0;;e">
</treenode>
<treenode node="buildHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1093;2;1101;;;;vpos;;v;;a;;r&#10;Definition&#10;    buildHeaders()&#10;&#10;Description&#10;     Build final headers;;d1,1094;;b2,0;;m0;;e">
</treenode>
<treenode node="buildMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1135;2;1262;;;;vpos;;v;;a;;r&#10;Definition&#10;    buildMessage()&#10;&#10;Description&#10;     Build Final Body and attachments;;d1,1136;;b2,0;;m0;;e">
</treenode>
<treenode node="cleanEmail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;969;2;981;;;;vpos;;v;;astring;;r&#10;Definition&#10;    cleanEmail($email)&#10;&#10;Description&#10;     Clean Extended Email Address: Joe Smith &lt;joe smith.com&gt;&#10;&#10;Parameters:&#10;    string $email;;d1,970;;b1,0;;m0;;estring $email;;p">
</treenode>
<treenode node="clear;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;423;2;441;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    clear($clearAttachments = false)&#10;&#10;Description&#10;     Initialize the Email Data&#10;&#10;Parameters:&#10;    boolean $clearAttachments;;d1,424;;b1,0;;m0;;eboolean $clearAttachments;;p">
</treenode>
<treenode node="getAltMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;993;2;1008;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getAltMessage()&#10;&#10;Description&#10;     Build alternative plain text message;;d1,994;;b2,0;;m0;;e">
</treenode>
<treenode node="getContentType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;879;2;893;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getContentType()&#10;&#10;Description&#10;     Get content type (text/html/attachment);;d1,880;;b2,0;;m0;;e">
</treenode>
<treenode node="getEncoding;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;860;2;872;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getEncoding()&#10;&#10;Description&#10;     Get Mail Encoding;;d1,861;;b2,0;;m0;;e">
</treenode>
<treenode node="getHostname;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;2081;2;2088;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getHostname()&#10;&#10;Description&#10;     Get Hostname;;d1,2082;;b2,0;;m0;;e">
</treenode>
<treenode node="getMessageID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;837;2;841;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMessageID()&#10;&#10;Description&#10;     Get the Message ID;;d1,838;;b2,0;;m0;;e">
</treenode>
<treenode node="getMimeMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;914;2;917;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMimeMessage()&#10;&#10;Description&#10;     Mime message;;d1,915;;b2,0;;m0;;e">
</treenode>
<treenode node="getProtocol;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;848;2;853;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getProtocol()&#10;&#10;Description&#10;     Get Mail Protocol;;d1,849;;b2,0;;m0;;e">
</treenode>
<treenode node="getSMTPData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;2055;2;2067;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getSMTPData()&#10;&#10;Description&#10;     Get SMTP data;;d1,2056;;b2,0;;m0;;e">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;389;2;414;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    initialize($config)&#10;&#10;Description&#10;     Initialize preferences&#10;&#10;Parameters:&#10;    array|\Config\Email $config;;d1,390;;b1,0;;m0;;earray|\Config\Email $config;;p">
</treenode>
<treenode node="isValidEmail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;951;2;960;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isValidEmail($email)&#10;&#10;Description&#10;     Email Validation&#10;&#10;Parameters:&#10;    string $email;;d1,952;;b1,0;;m0;;estring $email;;p">
</treenode>
<treenode node="mimeTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;2127;2;2131;;;;vpos;;v;;astring;;r&#10;Definition&#10;    mimeTypes($ext = &apos;&apos;)&#10;&#10;Description&#10;     Mime Types&#10;&#10;Parameters:&#10;    string $ext;;d1,2128;;b2,0;;m0;;estring $ext;;p">
</treenode>
<treenode node="prepQEncoding;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1481;2;1536;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prepQEncoding($str)&#10;&#10;Description&#10;     Prep Q Encoding&#10;&#10;Parameters:&#10;    string $str;;d1,1482;;b2,0;;m0;;estring $str;;p">
</treenode>
<treenode node="prepQuotedPrintable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1317;2;1468;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prepQuotedPrintable($str)&#10;&#10;Description&#10;     Prep Quoted Printable&#10;&#10;Parameters:&#10;    string $str;;d1,1318;;b2,0;;m0;;estring $str;;p">
</treenode>
<treenode node="printDebugger;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;2098;2;2108;;;;vpos;;v;;astring;;r&#10;Definition&#10;    printDebugger($include = [&apos;headers&apos;, &apos;subject&apos;, &apos;body&apos;])&#10;&#10;Description&#10;     Get Debug Message&#10;&#10;Parameters:&#10;    array $include - List of raw data chunks to include in the output;;d1,2099;;b1,0;;m0;;earray $include;;p">
</treenode>
<treenode node="removeNLCallback;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1658;2;1665;;;;vpos;;v;;astring;;r&#10;Definition&#10;    removeNLCallback($matches)&#10;&#10;Description&#10;     Strip line-breaks via callback&#10;&#10;Parameters:&#10;    string $matches;;d1,1659;;b2,0;;m0;;estring $matches;;p">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;1545;2;1590;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    send($autoClear = true)&#10;&#10;Description&#10;     Send Email&#10;&#10;Parameters:&#10;    boolean $autoClear;;d1,1546;;b1,0;;m0;;eboolean $autoClear;;p">
</treenode>
<treenode node="sendCommand;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1897;2;1956;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    sendCommand($cmd, $data = &apos;&apos;)&#10;&#10;Description&#10;     Send SMTP command&#10;&#10;Parameters:&#10;    string $cmd&#10;    string $data;;d1,1898;;b2,0;;m0;;estring $cmd;;pstring $data;;p">
</treenode>
<treenode node="sendData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;2013;2;2048;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    sendData($data)&#10;&#10;Description&#10;     Send SMTP data&#10;&#10;Parameters:&#10;    string $data;;d1,2014;;b2,0;;m0;;estring $data;;p">
</treenode>
<treenode node="sendWithMail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1727;2;1741;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    sendWithMail()&#10;&#10;Description&#10;     Send using mail();;d1,1728;;b2,0;;m0;;e">
</treenode>
<treenode node="sendWithSendmail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1748;2;1777;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    sendWithSendmail()&#10;&#10;Description&#10;     Send using Sendmail;;d1,1749;;b2,0;;m0;;e">
</treenode>
<treenode node="sendWithSmtp;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1784;2;1841;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    sendWithSmtp()&#10;&#10;Description&#10;     Send using SMTP;;d1,1785;;b2,0;;m0;;e">
</treenode>
<treenode node="setAltMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;748;2;752;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setAltMessage($str)&#10;&#10;Description&#10;     Set Multipart Value&#10;&#10;Parameters:&#10;    string $str;;d1,749;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="setArchiveValues;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;2176;2;2186;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    setArchiveValues(): array&#10;&#10;Description&#10;     Determines the values that should be stored in $archive.&#10;&#10;Return:&#10;   The updated archive values;;d1,2177;;b2,0;;m0;;e">
</treenode>
<treenode node="setAttachmentCID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;697;2;709;;;;vpos;;v;;astring;;r&#10;Definition&#10;    setAttachmentCID($filename)&#10;&#10;Description&#10;     Set and return attachment Content-ID&#10;&#10;Parameters:&#10;    string $filename;;d1,698;;b1,0;;m0;;estring $filename;;p">
</treenode>
<treenode node="setBCC;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;587;2;609;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setBCC($bcc, $limit = &apos;&apos;)&#10;&#10;Description&#10;     Set BCC&#10;&#10;Parameters:&#10;    string $bcc&#10;    string $limit;;d1,588;;b1,0;;m0;;estring $bcc;;pstring $limit;;p">
</treenode>
<treenode node="setCC;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;563;2;577;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setCC($cc)&#10;&#10;Description&#10;     Set CC&#10;&#10;Parameters:&#10;    string $cc;;d1,564;;b1,0;;m0;;estring $cc;;p">
</treenode>
<treenode node="setCRLF;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;826;2;830;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setCRLF($CRLF = &quot;\n&quot;)&#10;&#10;Description&#10;     Set CRLF&#10;&#10;Parameters:&#10;    string $CRLF;;d1,827;;b1,0;;m0;;estring $CRLF;;p">
</treenode>
<treenode node="setDate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;900;2;907;;;;vpos;;v;;astring;;r&#10;Definition&#10;    setDate()&#10;&#10;Description&#10;     Set RFC 822 Date;;d1,901;;b2,0;;m0;;e">
</treenode>
<treenode node="setErrorMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;2115;2;2118;;;;vpos;;v;;a;;r&#10;Definition&#10;    setErrorMessage($msg)&#10;&#10;Description&#10;     Set Message&#10;&#10;Parameters:&#10;    string $msg;;d1,2116;;b2,0;;m0;;estring $msg;;p">
</treenode>
<treenode node="setFrom;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;452;2;491;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setFrom($from, $name = &apos;&apos;, $returnPath = null)&#10;&#10;Description&#10;     Set FROM&#10;&#10;Parameters:&#10;    string $from&#10;    string $name&#10;    string|null $returnPath - Return-Path;;d1,453;;b1,0;;m0;;estring $from;;pstring $name;;pstring|null $returnPath;;p">
</treenode>
<treenode node="setHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;719;2;723;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setHeader($header, $value)&#10;&#10;Description&#10;     Add a Header Item&#10;&#10;Parameters:&#10;    string $header&#10;    string $value;;d1,720;;b1,0;;m0;;estring $header;;pstring $value;;p">
</treenode>
<treenode node="setMailType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;761;2;765;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setMailType($type = &apos;text&apos;)&#10;&#10;Description&#10;     Set Mailtype&#10;&#10;Parameters:&#10;    string $type;;d1,762;;b1,0;;m0;;estring $type;;p">
</treenode>
<treenode node="setMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;634;2;638;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setMessage($body)&#10;&#10;Description&#10;     Set Body&#10;&#10;Parameters:&#10;    string $body;;d1,635;;b1,0;;m0;;estring $body;;p">
</treenode>
<treenode node="setNewline;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;813;2;817;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setNewline($newline = &quot;\n&quot;)&#10;&#10;Description&#10;     Set Newline Character&#10;&#10;Parameters:&#10;    string $newline;;d1,814;;b1,0;;m0;;estring $newline;;p">
</treenode>
<treenode node="setPriority;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;800;2;804;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setPriority($n = 3)&#10;&#10;Description&#10;     Set Priority&#10;&#10;Parameters:&#10;    integer $n;;d1,801;;b1,0;;m0;;einteger $n;;p">
</treenode>
<treenode node="setProtocol;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;787;2;791;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setProtocol($protocol = &apos;mail&apos;)&#10;&#10;Description&#10;     Set Protocol&#10;&#10;Parameters:&#10;    string $protocol;;d1,788;;b1,0;;m0;;estring $protocol;;p">
</treenode>
<treenode node="setReplyTo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;501;2;531;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setReplyTo($replyto, $name = &apos;&apos;)&#10;&#10;Description&#10;     Set Reply-to&#10;&#10;Parameters:&#10;    string $replyto&#10;    string $name;;d1,502;;b1,0;;m0;;estring $replyto;;pstring $name;;p">
</treenode>
<treenode node="setSubject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;618;2;625;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setSubject($subject)&#10;&#10;Description&#10;     Set Email Subject&#10;&#10;Parameters:&#10;    string $subject;;d1,619;;b1,0;;m0;;estring $subject;;p">
</treenode>
<treenode node="setTo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;540;2;554;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setTo($to)&#10;&#10;Description&#10;     Set Recipients&#10;&#10;Parameters:&#10;    string|array $to;;d1,541;;b1,0;;m0;;estring|array $to;;p">
</treenode>
<treenode node="setWordWrap;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;774;2;778;;;;vpos;;v;;aEmail;;r&#10;Definition&#10;    setWordWrap($wordWrap = true)&#10;&#10;Description&#10;     Set Wordwrap&#10;&#10;Parameters:&#10;    boolean $wordWrap;;d1,775;;b1,0;;m0;;eboolean $wordWrap;;p">
</treenode>
<treenode node="SMTPAuthenticate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1963;2;2004;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    SMTPAuthenticate()&#10;&#10;Description&#10;     SMTP Authenticate;;d1,1964;;b2,0;;m0;;e">
</treenode>
<treenode node="SMTPConnect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1858;2;1887;;;;vpos;;v;;astring;;r&#10;Definition&#10;    SMTPConnect()&#10;&#10;Description&#10;     SMTP Connect;;d1,1859;;b2,0;;m0;;e">
</treenode>
<treenode node="SMTPEnd;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1848;2;1851;;;;vpos;;v;;a;;r&#10;Definition&#10;    SMTPEnd()&#10;&#10;Description&#10;     SMTP End;;d1,1849;;b2,0;;m0;;e">
</treenode>
<treenode node="spoolEmail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1672;2;1693;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    spoolEmail()&#10;&#10;Description&#10;     Spool mail to the mail server;;d1,1673;;b2,0;;m0;;e">
</treenode>
<treenode node="stringToArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;732;2;739;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    stringToArray($email)&#10;&#10;Description&#10;     Convert a String to an Array&#10;&#10;Parameters:&#10;    string $email;;d1,733;;b2,0;;m0;;estring $email;;p">
</treenode>
<treenode node="strlen;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f18;2148;2;2151;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    strlen($str)&#10;&#10;Description&#10;     Byte-safe strlen()&#10;&#10;Parameters:&#10;    string $str;;d1,2149;;b2,5;;m0;;estring $str;;p">
</treenode>
<treenode node="substr;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f18;2162;2;2169;;;;vpos;;v;;astring;;r&#10;Definition&#10;    substr($str, $start, $length = null)&#10;&#10;Description&#10;     Byte-safe substr()&#10;&#10;Parameters:&#10;    string $str&#10;    integer $start&#10;    integer|null $length;;d1,2163;;b2,5;;m0;;estring $str;;pinteger $start;;pinteger|null $length;;p">
</treenode>
<treenode node="unwrapSpecials;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1641;2;1649;;;;vpos;;v;;a;;r&#10;Definition&#10;    unwrapSpecials()&#10;&#10;Description&#10;     Unwrap special elements;;d1,1642;;b2,0;;m0;;e">
</treenode>
<treenode node="validateEmail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;926;2;942;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    validateEmail($email)&#10;&#10;Description&#10;     Validate Email Address&#10;&#10;Parameters:&#10;    string|array $email;;d1,927;;b1,0;;m0;;estring|array $email;;p">
</treenode>
<treenode node="validateEmailForShell;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1711;2;1720;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    validateEmailForShell(&amp;$email)&#10;&#10;Description&#10;     Validate email for shell&#10;&#10;Parameters:&#10;    string - &amp;$email;;d1,1712;;b2,0;;m0;;estring;;p">
</treenode>
<treenode node="wordWrap;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f8;1018;2;1088;;;;vpos;;v;;astring;;r&#10;Definition&#10;    wordWrap($str, $charlim = null)&#10;&#10;Description&#10;     Word Wrap&#10;&#10;Parameters:&#10;    string $str&#10;    integer|null $charlim - Line-length limit;;d1,1019;;b1,0;;m0;;estring $str;;pinteger|null $charlim;;p">
</treenode>
<treenode node="writeHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Email\Email.php;f11;1106;2;1130;;;;vpos;;v;;a;;r&#10;Definition&#10;    writeHeaders()&#10;&#10;Description&#10;     Write Headers as a string;;d1,1107;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="EmailActivator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\EmailActivator.php;f0;13;1;60;;;;vpos;;v;;aBaseActivator;;cActivatorInterface;;c;;r&#10;Definition&#10;    class EmailActivator extends BaseActivator implements ActivatorInterface&#10;&#10;Description&#10;     Class EmailActivator;;d0,14;;b0,0;;m0;;e">
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\EmailActivator.php;f11;55;5;58;;;;vpos;;v;;astring;;r&#10;Definition&#10;    error(): string&#10;&#10;Description&#10;     Returns the error string that should be displayed to the user.;;d4,56;;b1,0;;m0;;e">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\EmailActivator.php;f11;27;5;48;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    send(Entity $user = null): bool&#10;&#10;Description&#10;     Sends an activation email&#10;&#10;Parameters:&#10;    User $user;;d4,28;;b1,0;;m0;;eUser $user;;p">
</treenode>
</treenode>
<treenode node="EmailResetter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\EmailResetter.php;f0;13;1;60;;;;vpos;;v;;aBaseResetter;;cResetterInterface;;c;;r&#10;Definition&#10;    class EmailResetter extends BaseResetter implements ResetterInterface&#10;&#10;Description&#10;     Class EmailResetter;;d0,14;;b0,0;;m0;;e">
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\EmailResetter.php;f11;55;5;58;;;;vpos;;v;;astring;;r&#10;Definition&#10;    error(): string&#10;&#10;Description&#10;     Returns the error string that should be displayed to the user.;;d4,56;;b1,0;;m0;;e">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\EmailResetter.php;f11;27;5;48;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    send(Entity $user = null): bool&#10;&#10;Description&#10;     Sends a reset email&#10;&#10;Parameters:&#10;    User $user;;d4,28;;b1,0;;m0;;eUser $user;;p">
</treenode>
</treenode>
<treenode node="EmergencyError;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\EmergencyError.php;f0;6;1;9;;;;vpos;;v;;aError;;c;;r&#10;Definition&#10;    class EmergencyError extends \Error&#10;&#10;Description&#10;     Error: system is unusable;;d0,7;;b0,0;;m0;;e">
</treenode>
<treenode node="Encryption;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Encryption.php;f0;50;1;207;;O:\xampp\htdocs\2020\blog-4\app\Config\Encryption.php;f0;11;1;35;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Encryption&#10;&#10;Description&#10;     CodeIgniter Encryption Manager;;d0,51;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Encryption.php;f8;99;2;121;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    __construct(BaseConfig $config = null)&#10;&#10;Description&#10;     Class constructor&#10;&#10;Parameters:&#10;    BaseConfig $config - Configuration parameters;;d1,100;;b1,0;;m0;;eBaseConfig $config;;p">
</treenode>
<treenode node="__get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Encryption.php;f8;186;2;194;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __get($key)&#10;&#10;Description&#10;     __get() magic, providing readonly access to some of our protected properties&#10;&#10;Parameters:&#10;    string $key - Property name;;d1,187;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="__isset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Encryption.php;f8;202;2;205;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    __isset($key): bool&#10;&#10;Description&#10;     __isset() magic, providing checking for some of our protected properties&#10;&#10;Parameters:&#10;    string $key - Property name;;d1,203;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="createKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Encryption.php;f15;173;2;176;;;;vpos;;v;;astring;;r&#10;Definition&#10;    createKey($length = 32)&#10;&#10;Description&#10;     Create a random key&#10;&#10;Parameters:&#10;    integer $length - Output length;;d1,174;;b1,5;;m0;;einteger $length;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Encryption.php;f8;131;2;163;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize(BaseConfig $config = null)&#10;&#10;Description&#10;     Initialize or re-initialize an encrypter&#10;&#10;Parameters:&#10;    BaseConfig $config - Configuration parameters;;d1,132;;b1,0;;m0;;eBaseConfig $config;;p">
</treenode>
</treenode>
<treenode node="EncryptionException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Exceptions\EncryptionException.php;f0;8;1;40;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r&#10;Definition&#10;    class EncryptionException extends \RuntimeException implements ExceptionInterface&#10;&#10;Description&#10;     Encryption exception;;d0,9;;b0,0;;m0;;e">
<treenode node="forAuthenticationFailed;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Exceptions\EncryptionException.php;f15;31;2;34;;;;vpos;;v;;a;;r;;d1,32;;b1,5;;m0;;e">
</treenode>
<treenode node="forEncryptionFailed;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Exceptions\EncryptionException.php;f15;35;2;38;;;;vpos;;v;;a;;r;;d1,36;;b1,5;;m0;;e">
</treenode>
<treenode node="forNeedsStarterKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Exceptions\EncryptionException.php;f15;26;2;29;;;;vpos;;v;;a;;r;;d1,27;;b1,5;;m0;;e">
</treenode>
<treenode node="forNoDriverRequested;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Exceptions\EncryptionException.php;f15;11;2;14;;;;vpos;;v;;a;;r;;d1,12;;b1,5;;m0;;e">
</treenode>
<treenode node="forNoHandlerAvailable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Exceptions\EncryptionException.php;f15;16;2;19;;;;vpos;;v;;a;;r;;d1,17;;b1,5;;m0;;e">
</treenode>
<treenode node="forUnKnownHandler;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Exceptions\EncryptionException.php;f15;21;2;24;;;;vpos;;v;;a;;r;;d1,22;;b1,5;;m0;;edriver;;p">
</treenode>
</treenode>
<treenode node="Entity;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f0;47;1;613;;;;vpos;;v;;aJsonSerializable;;c;;r&#10;Definition&#10;    class Entity implements \JsonSerializable&#10;&#10;Description&#10;     Entity encapsulation, for use with CodeIgniter\Model;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;101;2;106;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(array $data = null)&#10;&#10;Description&#10;     Allows filling in Entity parameters during construction.&#10;&#10;Parameters:&#10;    array|null $data;;d1,102;;b1,0;;m0;;earray|null $data;;p">
</treenode>
<treenode node="__get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;275;2;309;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __get(string $key)&#10;&#10;Description&#10;     Magic method to allow retrieval of protected and private class properties either by their name, or through a `getCamelCasedProperty()` method.&#10;&#10;Parameters:&#10;    string $key;;d1,276;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="__isset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;417;2;429;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    __isset(string $key): bool&#10;&#10;Description&#10;     Returns true if a property exists names $key, or a getter method exists named like for __get().&#10;&#10;Parameters:&#10;    string $key;;d1,418;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="__set;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;328;2;391;;;;vpos;;v;;a;;r&#10;Definition&#10;    __set(string $key, $value = null)&#10;&#10;Description&#10;     Magic method to all protected/private class properties to be easily set, either through a direct access or a `setCamelCasedProperty()` method.&#10;&#10;Parameters:&#10;    string $key&#10;    null $value;;d1,329;;b1,0;;m0;;estring $key;;pnull $value;;p">
</treenode>
<treenode node="__unset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;402;2;405;;;;vpos;;v;;a;;r&#10;Definition&#10;    __unset(string $key)&#10;&#10;Description&#10;     Unsets an attribute property.&#10;&#10;Parameters:&#10;    string $key;;d1,403;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="castAs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f11;518;2;572;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    castAs($value, string $type)&#10;&#10;Description&#10;     Provides the ability to cast an item as a specific data type. Add ? at the beginning of $type  (i.e. ?string) to get NULL instead of casting $value if $value === null&#10;&#10;Parameters:&#10;     $value&#10;    string $type;;d1,519;;b2,0;;m0;;e $value;;pstring $type;;p">
</treenode>
<treenode node="castAsJson;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f9;585;2;601;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    castAsJson($value, bool $asArray = false)&#10;&#10;Description&#10;     Cast as JSON&#10;&#10;Parameters:&#10;    mixed $value&#10;    boolean $asArray;;d1,586;;b3,0;;m0;;emixed $value;;pboolean $asArray;;p">
</treenode>
<treenode node="fill;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;117;2;130;;;;vpos;;v;;a;;r&#10;Definition&#10;    fill(array $data = null)&#10;&#10;Description&#10;     Takes an array of key/value pairs and sets them as class properties, using any `setCamelCasedProperty()` methods that may or may not exist.&#10;&#10;Parameters:&#10;    array $data;;d1,118;;b1,0;;m0;;earray $data;;p">
</treenode>
<treenode node="hasChanged;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;237;2;258;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasChanged(string $key = null): bool&#10;&#10;Description&#10;     Checks a property to see if it has changed since the entity was created. Or, without a parameter, checks if any properties have changed.&#10;&#10;Parameters:&#10;    string $key;;d1,238;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="jsonSerialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;609;2;612;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    jsonSerialize()&#10;&#10;Description&#10;     Support for json_encode()&#10;&#10;Return:&#10;   |mixed;;d1,610;;b1,0;;m0;;e">
</treenode>
<treenode node="mapProperty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f11;454;2;467;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    mapProperty(string $key)&#10;&#10;Description&#10;     Checks the datamap to see if this column name is being mapped, and returns the mapped name, if any, or the original name.&#10;&#10;Parameters:&#10;    string $key&#10;&#10;Return:&#10;   |string;;d1,455;;b2,0;;m0;;estring $key;;p">
</treenode>
<treenode node="mutateDate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f11;480;2;503;;;;vpos;;v;;a;;r&#10;Definition&#10;    mutateDate($value)&#10;&#10;Description&#10;     Converts the given string|timestamp|DateTime|Time instance into a \CodeIgniter\I18n\Time object.&#10;&#10;Parameters:&#10;     $value;;d1,481;;b2,0;;m0;;e $value;;p">
</treenode>
<treenode node="setAttributes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;437;2;442;;;;vpos;;v;;a;;r&#10;Definition&#10;    setAttributes(array $data)&#10;&#10;Description&#10;     Set raw data array without any mutations&#10;&#10;Parameters:&#10;    array $data;;d1,438;;b1,0;;m0;;earray $data;;p">
</treenode>
<treenode node="syncOriginal;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;222;2;227;;;;vpos;;v;;a;;r&#10;Definition&#10;    syncOriginal()&#10;&#10;Description&#10;     Ensures our &quot;original&quot; values match the current values.;;d1,223;;b1,0;;m0;;e">
</treenode>
<treenode node="toArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;146;2;182;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    toArray(bool $onlyChanged = false, bool $cast = true): array&#10;&#10;Description&#10;     General method that will return all public and protected values of this entity as an array. All values are accessed through the __get() magic method so will have any casts, etc applied to them.&#10;&#10;Parameters:&#10;    boolean $onlyChanged - If true, only return values that have changed since object creation&#10;    boolean $cast - If true, properties will be casted;;d1,147;;b1,0;;m0;;eboolean $onlyChanged;;pboolean $cast;;p">
</treenode>
<treenode node="toRawArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Entity.php;f8;193;2;213;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    toRawArray(bool $onlyChanged = false): array&#10;&#10;Description&#10;     Returns the raw values of the current attributes.&#10;&#10;Parameters:&#10;    boolean $onlyChanged;;d1,194;;b1,0;;m0;;eboolean $onlyChanged;;p">
</treenode>
</treenode>
<treenode node="Escaper;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f0;13;1;390;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Escaper&#10;&#10;Description&#10;     Context specific methods for use in secure output escaping;;d0,14;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f11;93;5;125;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($encoding = null)&#10;&#10;Description&#10;     Constructor: Single parameter allows setting of global encoding for use by the current object.&#10;&#10;Parameters:&#10;    string $encoding;;d4,94;;b1,0;;m0;;estring $encoding;;p">
</treenode>
<treenode node="convertEncoding;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f14;371;5;389;;;;vpos;;v;;astring;;r&#10;Definition&#10;    convertEncoding($string, $to, $from)&#10;&#10;Description&#10;     Encoding conversion helper which wraps iconv and mbstring where they exist or throws and exception where neither is available.&#10;&#10;Parameters:&#10;    string $string&#10;    string $to&#10;    array|string $from;;d4,372;;b2,0;;m0;;estring $string;;pstring $to;;parray|string $from;;p">
</treenode>
<treenode node="cssMatcher;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f14;298;5;308;;;;vpos;;v;;astring;;r&#10;Definition&#10;    cssMatcher($matches)&#10;&#10;Description&#10;     Callback function for preg_replace_callback that applies CSS escaping to all matches.&#10;&#10;Parameters:&#10;    array $matches;;d4,299;;b2,0;;m0;;earray $matches;;p">
</treenode>
<treenode node="escapeCss;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f11;211;5;220;;;;vpos;;v;;astring;;r&#10;Definition&#10;    escapeCss($string)&#10;&#10;Description&#10;     Escape a string for the CSS context. CSS escaping can be applied to any string being inserted into CSS and escapes everything except alphanumerics.&#10;&#10;Parameters:&#10;    string $string;;d4,212;;b1,0;;m0;;estring $string;;p">
</treenode>
<treenode node="escapeHtml;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f11;144;5;147;;;;vpos;;v;;astring;;r&#10;Definition&#10;    escapeHtml($string)&#10;&#10;Description&#10;     Escape a string for the HTML Body context where there are very few characters of special meaning. Internally this will use htmlspecialchars().&#10;&#10;Parameters:&#10;    string $string;;d4,145;;b1,0;;m0;;estring $string;;p">
</treenode>
<treenode node="escapeHtmlAttr;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f11;157;5;166;;;;vpos;;v;;astring;;r&#10;Definition&#10;    escapeHtmlAttr($string)&#10;&#10;Description&#10;     Escape a string for the HTML Attribute context. We use an extended set of characters to escape that are not covered by htmlspecialchars() to cover cases where an attribute might be unquoted or quoted illegally (e.g. backticks are valid quotes for IE).&#10;&#10;Parameters:&#10;    string $string;;d4,158;;b1,0;;m0;;estring $string;;p">
</treenode>
<treenode node="escapeJs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f11;180;5;189;;;;vpos;;v;;astring;;r&#10;Definition&#10;    escapeJs($string)&#10;&#10;Description&#10;     Escape a string for the Javascript context. This does not use json_encode(). An extended set of characters are escaped beyond ECMAScript&apos;s rules for Javascript literal string escaping in order to prevent misinterpretation of Javascript as HTML leading to the injection of special characters and entities. The escaping used should be tolerant of cases where HTML escaping was not applied on top of Javascript escaping correctly. Backslash escaping is not used as it still leaves the escaped character as-is and so is not useful in a HTML context.&#10;&#10;Parameters:&#10;    string $string;;d4,181;;b1,0;;m0;;estring $string;;p">
</treenode>
<treenode node="escapeUrl;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f11;199;5;202;;;;vpos;;v;;astring;;r&#10;Definition&#10;    escapeUrl($string)&#10;&#10;Description&#10;     Escape a string for the URI or Parameter contexts. This should not be used to escape an entire URI - only a subcomponent being inserted. The function is a simple proxy to rawurlencode() which now implements RFC 3986 since PHP 5.3 completely.&#10;&#10;Parameters:&#10;    string $string;;d4,200;;b1,0;;m0;;estring $string;;p">
</treenode>
<treenode node="fromUtf8;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f14;341;5;348;;;;vpos;;v;;astring;;r&#10;Definition&#10;    fromUtf8($string)&#10;&#10;Description&#10;     Converts a string from UTF-8 to the base encoding. The base encoding is set via this class&apos; constructor.&#10;&#10;Parameters:&#10;    string $string;;d4,342;;b2,0;;m0;;estring $string;;p">
</treenode>
<treenode node="getEncoding;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f11;132;5;135;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getEncoding()&#10;&#10;Description&#10;     Return the encoding that all output/input is expected to be encoded in.;;d4,133;;b1,0;;m0;;e">
</treenode>
<treenode node="htmlAttrMatcher;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f14;229;5;266;;;;vpos;;v;;astring;;r&#10;Definition&#10;    htmlAttrMatcher($matches)&#10;&#10;Description&#10;     Callback function for preg_replace_callback that applies HTML Attribute escaping to all matches.&#10;&#10;Parameters:&#10;    array $matches;;d4,230;;b2,0;;m0;;earray $matches;;p">
</treenode>
<treenode node="isUtf8;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f14;356;5;359;;;;vpos;;v;;abool;;r&#10;Definition&#10;    isUtf8($string)&#10;&#10;Description&#10;     Checks if a given string appears to be valid UTF-8 or not.&#10;&#10;Parameters:&#10;    string $string;;d4,357;;b2,0;;m0;;estring $string;;p">
</treenode>
<treenode node="jsMatcher;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f14;275;5;289;;;;vpos;;v;;astring;;r&#10;Definition&#10;    jsMatcher($matches)&#10;&#10;Description&#10;     Callback function for preg_replace_callback that applies Javascript escaping to all matches.&#10;&#10;Parameters:&#10;    array $matches;;d4,276;;b2,0;;m0;;earray $matches;;p">
</treenode>
<treenode node="toUtf8;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Escaper.php;f14;318;5;333;;;;vpos;;v;;astring;;r&#10;Definition&#10;    toUtf8($string)&#10;&#10;Description&#10;     Converts a string to UTF-8 from the base encoding. The base encoding is set via this class&apos; constructor.&#10;&#10;Parameters:&#10;    string $string;;d4,319;;b2,0;;m0;;estring $string;;p">
</treenode>
</treenode>
<treenode node="Events;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f0;50;1;347;;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Events.php;f0;47;1;186;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Events&#10;&#10;Description&#10;     Events;;d0,51;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Events.php;f8;94;2;97;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct()&#10;&#10;Description&#10;     Constructor.;;d1,95;;b1,0;;m0;;e">
</treenode>
<treenode node="display;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Events.php;f8;133;2;159;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    display(): array&#10;&#10;Description&#10;     Returns the data of this collector to be formatted in the toolbar;;d1,134;;b1,0;;m0;;e">
</treenode>
<treenode node="formatTimelineData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Events.php;f11;107;2;124;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    formatTimelineData(): array&#10;&#10;Description&#10;     Child classes should implement this to return the timeline data formatted for correct usage.;;d1,108;;b2,0;;m0;;e">
</treenode>
<treenode node="getBadgeValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Events.php;f8;168;2;171;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getBadgeValue(): int&#10;&#10;Description&#10;     Gets the &quot;badge&quot; value for the button.;;d1,169;;b1,0;;m0;;e">
</treenode>
<treenode node="getFiles;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f8;315;2;318;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getFiles()&#10;&#10;Description&#10;     Returns the files that were found/loaded during this request.;;d1,316;;b1,0;;m0;;e">
</treenode>
<treenode node="getPerformanceLogs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f15;341;2;344;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getPerformanceLogs()&#10;&#10;Description&#10;     Getter for the performance log records.;;d1,342;;b1,5;;m0;;e">
</treenode>
<treenode node="icon;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Events.php;f8;182;2;185;;;;vpos;;v;;astring;;r&#10;Definition&#10;    icon(): string&#10;&#10;Description&#10;     Display the icon.;;d1,183;;b1,0;;m0;;e">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f15;96;2;125;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Ensures that we have a events file ready.;;d1,97;;b1,5;;m0;;e">
</treenode>
<treenode node="listeners;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f15;220;2;238;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    listeners($event_name): array&#10;&#10;Description&#10;     Returns an array of listeners for a single event. They are sorted by priority.&#10;&#10;Parameters:&#10;     $event_name;;d1,221;;b1,5;;m0;;e $event_name;;p">
</treenode>
<treenode node="on;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f15;142;2;158;;;;vpos;;v;;a;;r&#10;Definition&#10;    on($event_name, $callback, $priority = EVENT_PRIORITY_NORMAL)&#10;&#10;Description&#10;     Registers an action to happen on an event. The action can be any sort of callable:&#10;&#10;Parameters:&#10;     $event_name&#10;    callable $callback&#10;    integer $priority;;d1,143;;b1,5;;m0;;e $event_name;;pcallable $callback;;pinteger $priority;;p">
</treenode>
<treenode node="removeAllListeners;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f15;284;2;294;;;;vpos;;v;;a;;r&#10;Definition&#10;    removeAllListeners($event_name = null)&#10;&#10;Description&#10;     Removes all listeners.&#10;&#10;Parameters:&#10;    null $event_name;;d1,285;;b1,5;;m0;;enull $event_name;;p">
</treenode>
<treenode node="removeListener;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f15;253;2;272;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    removeListener($event_name, callable $listener): bool&#10;&#10;Description&#10;     Removes a single listener from an event.&#10;&#10;Parameters:&#10;     $event_name&#10;    callable $listener;;d1,254;;b1,5;;m0;;e $event_name;;pcallable $listener;;p">
</treenode>
<treenode node="setFiles;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f15;303;2;306;;;;vpos;;v;;a;;r&#10;Definition&#10;    setFiles(array $files)&#10;&#10;Description&#10;     Sets the path to the file that routes are read from.&#10;&#10;Parameters:&#10;    array $files;;d1,304;;b1,5;;m0;;earray $files;;p">
</treenode>
<treenode node="simulate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f15;329;2;332;;;;vpos;;v;;a;;r&#10;Definition&#10;    simulate(bool $choice = true)&#10;&#10;Description&#10;     Turns simulation on or off. When on, events will not be triggered, simply logged. Useful during testing when you don&apos;t actually want the tests to run.&#10;&#10;Parameters:&#10;    boolean $choice;;d1,330;;b1,5;;m0;;eboolean $choice;;p">
</treenode>
<treenode node="trigger;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Events\Events.php;f15;173;2;205;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    trigger($eventName, ...$arguments): bool&#10;&#10;Description&#10;     Runs through all subscribed methods running them one at a time, until either: a) All subscribers have finished or b) a method returns false, at which point execution of subscribers stops.&#10;&#10;Parameters:&#10;     $eventName&#10;     $arguments;;d1,174;;b1,5;;m0;;e $eventName;;p $arguments;;p">
</treenode>
</treenode>
<treenode node="Exceptions;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f0;52;1;512;;O:\xampp\htdocs\2020\blog-4\app\Config\Exceptions.php;f0;9;1;41;;;;vpos;;v;;aResponseTrait;;c;;r&#10;Definition&#10;    class Exceptions&#10;&#10;Description&#10;     Exceptions manager;;d0,53;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f8;102;2;112;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(\Config\Exceptions $config, IncomingRequest $request, Response $response)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \Config\Exceptions $config&#10;    \CodeIgniter\HTTP\IncomingRequest $request&#10;    \CodeIgniter\HTTP\Response $response;;d1,103;;b1,0;;m0;;e\Config\Exceptions $config;;p\CodeIgniter\HTTP\IncomingRequest $request;;p\CodeIgniter\HTTP\Response $response;;p">
</treenode>
<treenode node="cleanPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f15;381;2;400;;;;vpos;;v;;astring;;r&#10;Definition&#10;    cleanPath(string $file): string&#10;&#10;Description&#10;     Clean Path&#10;&#10;Parameters:&#10;    string $file;;d1,382;;b1,5;;m0;;estring $file;;p">
</treenode>
<treenode node="collectVars;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f11;323;2;334;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    collectVars(Throwable $exception, int $statusCode): array&#10;&#10;Description&#10;     Gathers the variables that will be made available to the view.&#10;&#10;Parameters:&#10;    \Throwable $exception&#10;    integer $statusCode;;d1,324;;b2,0;;m0;;e\Throwable $exception;;pinteger $statusCode;;p">
</treenode>
<treenode node="describeMemory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f15;412;2;424;;;;vpos;;v;;astring;;r&#10;Definition&#10;    describeMemory(int $bytes): string&#10;&#10;Description&#10;     Describes memory usage in real-world units. Intended for use with memory_get_usage, etc.&#10;&#10;Parameters:&#10;     $bytes;;d1,413;;b1,5;;m0;;e $bytes;;p">
</treenode>
<treenode node="determineCodes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f11;343;2;365;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    determineCodes(Throwable $exception): array&#10;&#10;Description&#10;     Determines the HTTP status code and the exit status code for this request.&#10;&#10;Parameters:&#10;    \Throwable $exception;;d1,344;;b2,0;;m0;;e\Throwable $exception;;p">
</treenode>
<treenode node="determineView;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f11;239;2;263;;;;vpos;;v;;astring;;r&#10;Definition&#10;    determineView(Throwable $exception, string $template_path): string&#10;&#10;Description&#10;     Determines the view to display based on the exception thrown, whether an HTTP or CLI request, etc.&#10;&#10;Parameters:&#10;    \Throwable $exception&#10;    string $template_path&#10;&#10;Return:&#10;   The path and filename of the view file to use;;d1,240;;b2,0;;m0;;e\Throwable $exception;;pstring $template_path;;p">
</treenode>
<treenode node="errorHandler;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f8;194;2;203;;;;vpos;;v;;a;;r&#10;Definition&#10;    errorHandler(int $severity, string $message, string $file = null, int $line = null)&#10;&#10;Description&#10;     Even in PHP7, some errors make it through to the errorHandler, so convert these to Exceptions and let the exception handler log it and display it.&#10;&#10;Parameters:&#10;    integer $severity&#10;    string $message&#10;    string|null $file&#10;    integer|null $line;;d1,195;;b1,0;;m0;;einteger $severity;;pstring $message;;pstring|null $file;;pinteger|null $line;;p">
</treenode>
<treenode node="exceptionHandler;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f8;144;2;176;;;;vpos;;v;;a;;r&#10;Definition&#10;    exceptionHandler(Throwable $exception)&#10;&#10;Description&#10;     Catches any uncaught errors and exceptions, including most Fatal errors (Yay PHP7!). Will log the error, display it if display_errors is on, and fire an event that allows custom actions to be taken at this point.&#10;&#10;Parameters:&#10;    \Throwable $exception;;d1,145;;b1,0;;m0;;e\Throwable $exception;;p">
</treenode>
<treenode node="highlightFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f15;437;2;509;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    highlightFile(string $file, int $lineNumber, int $lines = 15)&#10;&#10;Description&#10;     Creates a syntax-highlighted version of a PHP file.&#10;&#10;Parameters:&#10;    string $file&#10;    integer $lineNumber&#10;    integer $lines&#10;&#10;Return:&#10;   |string;;d1,438;;b1,5;;m0;;estring $file;;pinteger $lineNumber;;pinteger $lines;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f8;120;2;131;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Responsible for registering the error, exception and shutdown handling of our application.;;d1,121;;b1,0;;m0;;e">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f11;273;2;311;;;;vpos;;v;;a;;r&#10;Definition&#10;    render(Throwable $exception, int $statusCode)&#10;&#10;Description&#10;     Given an exception and status code will display the error to the client.&#10;&#10;Parameters:&#10;    \Throwable $exception&#10;    integer $statusCode;;d1,274;;b2,0;;m0;;e\Throwable $exception;;pinteger $statusCode;;p">
</treenode>
<treenode node="shutdownHandler;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f8;211;2;226;;;;vpos;;v;;a;;r&#10;Definition&#10;    shutdownHandler()&#10;&#10;Description&#10;     Checks to see if any errors have happened during shutdown that need to be caught and handle them.;;d1,212;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Fabricator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f0;50;1;647;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Fabricator&#10;&#10;Description&#10;     Fabricator;;d0,51;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;126;2;164;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($model, array $formatters = null, string $locale = null)&#10;&#10;Description&#10;     Store the model instance and initialize Faker to the locale.&#10;&#10;Parameters:&#10;    string|object $model - Instance or classname of the model to use&#10;    array|null $formatters - Array of property =&gt; formatter&#10;    string|null $locale - Locale for Faker provider;;d1,127;;b1,0;;m0;;estring|object $model;;parray|null $formatters;;pstring|null $locale;;p">
</treenode>
<treenode node="create;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;560;2;587;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    create(int $count = null, bool $mock = false)&#10;&#10;Description&#10;     Generate new entities from the database&#10;&#10;Parameters:&#10;    integer|null $count - Optional number to create a collection&#10;    array $override - Array of data to add/override&#10;    boolean $mock - Whether to execute or mock the insertion&#10;&#10;Return:&#10;   |object  An array or object (based on returnType), or an array of returnTypes;;d1,561;;b1,0;;m0;;ecount;;pmock;;p">
</treenode>
<treenode node="createMock;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f11;596;2;646;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    createMock(int $count = null)&#10;&#10;Description&#10;     Generate new database entities without actually inserting them&#10;&#10;Parameters:&#10;    integer|null $count - Optional number to create a collection&#10;&#10;Return:&#10;   |object  An array or object (based on returnType), or an array of returnTypes;;d1,597;;b2,0;;m0;;einteger|null $count;;p">
</treenode>
<treenode node="detectFormatters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f11;336;2;349;;;;vpos;;v;;a;;r&#10;Definition&#10;    detectFormatters(): self&#10;&#10;Description&#10;     Try to identify the appropriate Faker formatter for each field.;;d1,337;;b2,0;;m0;;e">
</treenode>
<treenode node="downCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f15;221;2;224;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    downCount(string $table): int&#10;&#10;Description&#10;     Decrement the count for a table&#10;&#10;Parameters:&#10;    string $table - Name of the target table&#10;&#10;Return:&#10;   The new count value;;d1,222;;b1,5;;m0;;estring $table;;p">
</treenode>
<treenode node="getCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f15;183;2;186;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getCount(string $table): int&#10;&#10;Description&#10;     Get the count for a specific table&#10;&#10;Parameters:&#10;    string $table - Name of the target table;;d1,184;;b1,5;;m0;;estring $table;;p">
</treenode>
<treenode node="getFaker;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;253;2;256;;;;vpos;;v;;aFaker;;r&#10;Definition&#10;    getFaker(): Generator&#10;&#10;Description&#10;     Returns the Faker generator&#10;&#10;Return:&#10;   \Generator;;d1,254;;b1,0;;m0;;e">
</treenode>
<treenode node="getFormatters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;301;33;301;;;;vpos;;v;;aarray;;r&#10;Description&#10;     Returns the current formatters&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getLocale;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;243;2;246;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getLocale(): string&#10;&#10;Description&#10;     Returns the locale;;d1,244;;b1,0;;m0;;e">
</treenode>
<treenode node="getModel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;233;2;236;;;;vpos;;v;;aobject;;r&#10;Definition&#10;    getModel()&#10;&#10;Description&#10;     Returns the model instance&#10;&#10;Return:&#10;   Framework or compatible model;;d1,234;;b1,0;;m0;;e">
</treenode>
<treenode node="getOverrides;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;265;2;272;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getOverrides(): array&#10;&#10;Description&#10;     Return and reset tempOverrides;;d1,266;;b1,0;;m0;;e">
</treenode>
<treenode node="guessFormatter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f11;358;2;410;;;;vpos;;v;;astring;;r&#10;Definition&#10;    guessFormatter($field): string&#10;&#10;Description&#10;     Guess at the correct formatter to match a field name.&#10;&#10;Parameters:&#10;     $field - Name of the field&#10;&#10;Return:&#10;   Name of the formatter;;d1,359;;b2,0;;m0;;e $field;;p">
</treenode>
<treenode node="make;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;421;2;441;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    make(int $count = null)&#10;&#10;Description&#10;     Generate new entities with faked data&#10;&#10;Parameters:&#10;    integer|null $count - Optional number to create a collection&#10;&#10;Return:&#10;   |object  An array or object (based on returnType), or an array of returnTypes;;d1,422;;b1,0;;m0;;einteger|null $count;;p">
</treenode>
<treenode node="makeArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;450;2;487;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    makeArray()&#10;&#10;Description&#10;     Generate an array of faked data&#10;&#10;Return:&#10;   An array of faked data;;d1,451;;b1,0;;m0;;e">
</treenode>
<treenode node="makeObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;498;2;547;;;;vpos;;v;;aobject;;r&#10;Definition&#10;    makeObject(string $className = null): object&#10;&#10;Description&#10;     Generate an object of faked data&#10;&#10;Parameters:&#10;    string|null $className - Class name of the object to create;s null to use model default&#10;&#10;Return:&#10;   An instance of the class with faked data;;d1,499;;b1,0;;m0;;estring|null $className;;p">
</treenode>
<treenode node="resetCounts;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f15;171;2;174;;;;vpos;;v;;a;;r&#10;Definition&#10;    resetCounts()&#10;&#10;Description&#10;     Reset internal counts;;d1,172;;b1,5;;m0;;e">
</treenode>
<treenode node="setCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f15;196;2;200;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    setCount(string $table, int $count): int&#10;&#10;Description&#10;     Set the count for a specific table&#10;&#10;Parameters:&#10;    string $table - Name of the target table&#10;    integer $count - Count value&#10;&#10;Return:&#10;   The new count value;;d1,197;;b1,5;;m0;;estring $table;;pinteger $count;;p">
</treenode>
<treenode node="setFormatters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;313;2;329;;;;vpos;;v;;a;;r&#10;Definition&#10;    setFormatters(array $formatters = null): self&#10;&#10;Description&#10;     Set the formatters to use. Will attempt to autodetect if none are available.&#10;&#10;Parameters:&#10;    array|null $formatters - Array of [field =&gt; formatter], or null to detect;;d1,314;;b1,0;;m0;;earray|null $formatters;;p">
</treenode>
<treenode node="setOverrides;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f8;282;2;292;;;;vpos;;v;;a;;r&#10;Definition&#10;    setOverrides(array $overrides = [], $persist = true): self&#10;&#10;Description&#10;     Set the overrides, once or persistent&#10;&#10;Parameters:&#10;    array $overrides - Array of [field =&gt; value]&#10;    boolean $persist - Whether these overrides should persist through the next operation;;d1,283;;b1,0;;m0;;earray $overrides;;pboolean $persist;;p">
</treenode>
<treenode node="upCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Fabricator.php;f15;209;2;212;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    upCount(string $table): int&#10;&#10;Description&#10;     Increment the count for a table&#10;&#10;Parameters:&#10;    string $table - Name of the target table&#10;&#10;Return:&#10;   The new count value;;d1,210;;b1,5;;m0;;estring $table;;p">
</treenode>
</treenode>
<treenode node="FeatureResponse;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f0;48;1;438;;;;vpos;;v;;aTestCase;;c;;r&#10;Definition&#10;    class FeatureResponse extends TestCase&#10;&#10;Description&#10;     Assertions for a response;;d0,49;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;70;2;79;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(ResponseInterface $response = null)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    ResponseInterface $response;;d1,71;;b1,0;;m0;;eResponseInterface $response;;p">
</treenode>
<treenode node="assertCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;258;2;261;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertCookie(string $key, $value = null, string $prefix = &apos;&apos;)&#10;&#10;Description&#10;     Asserts that the response has the specified cookie.&#10;&#10;Parameters:&#10;    string $key&#10;    null $value&#10;    string|null $prefix;;d1,259;;b1,0;;m0;;estring $key;;pnull $value;;pstring|null $prefix;;p">
</treenode>
<treenode node="assertCookieExpired;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;281;2;285;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertCookieExpired(string $key, string $prefix = &apos;&apos;)&#10;&#10;Description&#10;     Asserts that a cookie exists and has an expired time.&#10;&#10;Parameters:&#10;    string $key&#10;    string $prefix;;d1,282;;b1,0;;m0;;estring $key;;pstring $prefix;;p">
</treenode>
<treenode node="assertCookieMissing;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;268;2;271;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertCookieMissing(string $key)&#10;&#10;Description&#10;     Assert the Response does not have the specified cookie set.&#10;&#10;Parameters:&#10;    string $key;;d1,269;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="assertDontSee;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;312;2;315;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertDontSee(string $search = null, string $element = null)&#10;&#10;Description&#10;     Asserts that we do not see the specified text.&#10;&#10;Parameters:&#10;    string|null $search&#10;    string|null $element;;d1,313;;b1,0;;m0;;estring|null $search;;pstring|null $element;;p">
</treenode>
<treenode node="assertDontSeeElement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;336;2;339;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertDontSeeElement(string $search)&#10;&#10;Description&#10;     Assert that we do not see an element selected via a CSS selector.&#10;&#10;Parameters:&#10;    string $search;;d1,337;;b1,0;;m0;;estring $search;;p">
</treenode>
<treenode node="assertHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;223;2;231;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertHeader(string $key, $value = null)&#10;&#10;Description&#10;     Asserts that the Response contains a specific header.&#10;&#10;Parameters:&#10;    string $key&#10;    null $value;;d1,224;;b1,0;;m0;;estring $key;;pnull $value;;p">
</treenode>
<treenode node="assertHeaderMissing;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;240;2;243;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertHeaderMissing(string $key)&#10;&#10;Description&#10;     Asserts the Response headers does not contain the specified header.&#10;&#10;Parameters:&#10;    string $key;;d1,241;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="assertJSONExact;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;410;2;422;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertJSONExact($test)&#10;&#10;Description&#10;     Asserts that the JSON exactly matches the passed in data. If the value being passed in is a string, it must be a json_encoded string.&#10;&#10;Parameters:&#10;    string|array $test;;d1,411;;b1,0;;m0;;estring|array $test;;p">
</treenode>
<treenode node="assertJSONFragment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;395;2;400;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertJSONFragment(array $fragment)&#10;&#10;Description&#10;     Test that the response contains a matching JSON fragment.&#10;&#10;Parameters:&#10;    array $fragment;;d1,396;;b1,0;;m0;;earray $fragment;;p">
</treenode>
<treenode node="assertOK;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;172;2;175;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertOK()&#10;&#10;Description&#10;     Asserts that the Response is considered OK.;;d1,173;;b1,0;;m0;;e">
</treenode>
<treenode node="assertRedirect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;126;2;129;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertRedirect()&#10;&#10;Description&#10;     Assert that the given response was a redirect.;;d1,127;;b1,0;;m0;;e">
</treenode>
<treenode node="assertSee;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;299;2;302;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertSee(string $search = null, string $element = null)&#10;&#10;Description&#10;     Assert that the desired text can be found in the result body.&#10;&#10;Parameters:&#10;    string|null $search&#10;    string|null $element;;d1,300;;b1,0;;m0;;estring|null $search;;pstring|null $element;;p">
</treenode>
<treenode node="assertSeeElement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;324;2;327;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertSeeElement(string $search)&#10;&#10;Description&#10;     Assert that we see an element selected via a CSS selector.&#10;&#10;Parameters:&#10;    string $search;;d1,325;;b1,0;;m0;;estring $search;;p">
</treenode>
<treenode node="assertSeeInField;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;362;2;365;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertSeeInField(string $field, string $value = null)&#10;&#10;Description&#10;     Assert that we see an input with name/value.&#10;&#10;Parameters:&#10;    string $field&#10;    string|null $value;;d1,363;;b1,0;;m0;;estring $field;;pstring|null $value;;p">
</treenode>
<treenode node="assertSeeLink;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;349;2;352;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertSeeLink(string $text, string $details = null)&#10;&#10;Description&#10;     Assert that we see a link with the matching text and/or class.&#10;&#10;Parameters:&#10;    string $text&#10;    string|null $details;;d1,350;;b1,0;;m0;;estring $text;;pstring|null $details;;p">
</treenode>
<treenode node="assertSessionHas;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;189;2;197;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertSessionHas(string $key, $value = null)&#10;&#10;Description&#10;     Asserts that an SESSION key has been set and, optionally, test it&apos;s value.&#10;&#10;Parameters:&#10;    string $key&#10;    null $value;;d1,190;;b1,0;;m0;;estring $key;;pnull $value;;p">
</treenode>
<treenode node="assertSessionMissing;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;206;2;209;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertSessionMissing(string $key)&#10;&#10;Description&#10;     Asserts the session is missing $key.&#10;&#10;Parameters:&#10;    string $key;;d1,207;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="assertStatus;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;162;2;165;;;;vpos;;v;;a;;r&#10;Definition&#10;    assertStatus(int $code)&#10;&#10;Description&#10;     Asserts that the status is a specific value.&#10;&#10;Parameters:&#10;    integer $code;;d1,163;;b1,0;;m0;;einteger $code;;p">
</treenode>
<treenode node="getJSON;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;376;2;386;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getJSON()&#10;&#10;Description&#10;     Returns the response&apos;s body as JSON&#10;&#10;Return:&#10;   |false;;d1,377;;b1,0;;m0;;e">
</treenode>
<treenode node="getRedirectUrl;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;136;34;136;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the URL set for redirection.&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getXML;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;433;2;436;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getXML()&#10;&#10;Description&#10;     Returns the response&apos; body as XML&#10;&#10;Return:&#10;   |string;;d1,434;;b1,0;;m0;;e">
</treenode>
<treenode node="isOK;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;91;2;109;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isOK(): bool&#10;&#10;Description&#10;     Boils down the possible responses into a bolean valid/not-valid response type.;;d1,92;;b1,0;;m0;;e">
</treenode>
<treenode node="isRedirect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureResponse.php;f8;116;2;119;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isRedirect(): bool&#10;&#10;Description&#10;     Returns whether or not the Response was a redirect response;;d1,117;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="FeatureTestCase;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestCase.php;f0;48;1;74;;;;vpos;;v;;aCIDatabaseTestCase;;cFeatureTestTrait;;c;;r&#10;Definition&#10;    class FeatureTestCase extends CIDatabaseTestCase&#10;&#10;Description&#10;     Class FeatureTestCase;;d0,49;;b0,0;;m0;;e">
</treenode>
<treenode node="FeatureTestTrait;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f0;56;1;337;;;;vpos;;v;;a;;r&#10;Definition&#10;    trait FeatureTestTrait&#10;&#10;Description&#10;     Trait FeatureTestTrait;;d0,57;;b0,0;;m0;;e">
<treenode node="call;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f8;127;2;184;;;;vpos;;v;;a;;r&#10;Definition&#10;    call(string $method, string $path, array $params = null)&#10;&#10;Description&#10;     Calls a single URI, executes it, and returns a FeatureResponse instance that can be used to run many assertions against.&#10;&#10;Parameters:&#10;    string $method&#10;    string $path&#10;    array|null $params;;d1,128;;b1,0;;m0;;estring $method;;pstring $path;;parray|null $params;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f8;256;2;259;;;;vpos;;v;;a;;r&#10;Definition&#10;    delete(string $path, array $params = null)&#10;&#10;Description&#10;     Performs a DELETE request.&#10;&#10;Parameters:&#10;    string $path&#10;    array|null $params;;d1,257;;b1,0;;m0;;estring $path;;parray|null $params;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f8;196;2;199;;;;vpos;;v;;a;;r&#10;Definition&#10;    get(string $path, array $params = null)&#10;&#10;Description&#10;     Performs a GET request.&#10;&#10;Parameters:&#10;    string $path&#10;    array|null $params;;d1,197;;b1,0;;m0;;estring $path;;parray|null $params;;p">
</treenode>
<treenode node="options;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f8;271;2;274;;;;vpos;;v;;a;;r&#10;Definition&#10;    options(string $path, array $params = null)&#10;&#10;Description&#10;     Performs an OPTIONS request.&#10;&#10;Parameters:&#10;    string $path&#10;    array|null $params;;d1,272;;b1,0;;m0;;estring $path;;parray|null $params;;p">
</treenode>
<treenode node="patch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f8;241;2;244;;;;vpos;;v;;a;;r&#10;Definition&#10;    patch(string $path, array $params = null)&#10;&#10;Description&#10;     Performss a PATCH request&#10;&#10;Parameters:&#10;    string $path&#10;    array|null $params;;d1,242;;b1,0;;m0;;estring $path;;parray|null $params;;p">
</treenode>
<treenode node="populateGlobals;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f11;317;2;336;;;;vpos;;v;;a;;r&#10;Definition&#10;    populateGlobals(string $method, Request $request, array $params = null)&#10;&#10;Description&#10;     Populates the data of our Request with &quot;global&quot; data relevant to the request, like $_POST data.&#10;&#10;Parameters:&#10;    string $method&#10;    \CodeIgniter\HTTP\Request $request&#10;    array|null $params;;d1,318;;b2,0;;m0;;estring $method;;p\CodeIgniter\HTTP\Request $request;;parray|null $params;;p">
</treenode>
<treenode node="post;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f8;211;2;214;;;;vpos;;v;;a;;r&#10;Definition&#10;    post(string $path, array $params = null)&#10;&#10;Description&#10;     Performs a POST request.&#10;&#10;Parameters:&#10;    string $path&#10;    array|null $params;;d1,212;;b1,0;;m0;;estring $path;;parray|null $params;;p">
</treenode>
<treenode node="put;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f8;226;2;229;;;;vpos;;v;;a;;r&#10;Definition&#10;    put(string $path, array $params = null)&#10;&#10;Description&#10;     Performs a PUT request&#10;&#10;Parameters:&#10;    string $path&#10;    array|null $params;;d1,227;;b1,0;;m0;;estring $path;;parray|null $params;;p">
</treenode>
<treenode node="setupRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f11;285;2;302;;;;vpos;;v;;a;;r&#10;Definition&#10;    setupRequest(string $method, string $path = null): IncomingRequest&#10;&#10;Description&#10;     Setup a Request object to use so that CodeIgniter won&apos;t try to auto-populate some of the items.&#10;&#10;Parameters:&#10;    string $method&#10;    string|null $path;;d1,286;;b2,0;;m0;;estring $method;;pstring|null $path;;p">
</treenode>
<treenode node="skipEvents;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f8;108;2;113;;;;vpos;;v;;a;;r&#10;Definition&#10;    skipEvents()&#10;&#10;Description&#10;     Don&apos;t run any events while running this test.;;d1,109;;b1,0;;m0;;e">
</treenode>
<treenode node="withRoutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f11;71;2;87;;;;vpos;;v;;a;;r&#10;Definition&#10;    withRoutes(array $routes = null)&#10;&#10;Description&#10;     Sets a RouteCollection that will override the application&apos;s route collection.&#10;&#10;Parameters:&#10;    array $routes;;d1,72;;b2,0;;m0;;earray $routes;;p">
</treenode>
<treenode node="withSession;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\FeatureTestTrait.php;f8;96;2;101;;;;vpos;;v;;a;;r&#10;Definition&#10;    withSession(array $values = null)&#10;&#10;Description&#10;     Sets any values that should exist during this session.&#10;&#10;Parameters:&#10;    array|null - Array of values, or null to use the current $_SESSION;;d1,97;;b1,0;;m0;;earray|null;;p">
</treenode>
</treenode>
<treenode node="File;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Files\File.php;f0;50;1;247;;;;vpos;;v;;aSplFileInfo;;c;;r&#10;Definition&#10;    class File extends SplFileInfo&#10;&#10;Description&#10;     Wrapper for PHP&apos;s built-in SplFileInfo, with goodies.;;d0,51;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\File.php;f8;69;2;77;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(string $path, bool $checkFile = false)&#10;&#10;Description&#10;     Run our SplFileInfo constructor with an optional verification that the path is really a file.&#10;&#10;Parameters:&#10;    string $path&#10;    boolean $checkFile;;d1,70;;b1,0;;m0;;estring $path;;pboolean $checkFile;;p">
</treenode>
<treenode node="getDestination;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\File.php;f8;217;2;244;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDestination(string $destination, string $delimiter = &apos;_&apos;, int $i = 0): string&#10;&#10;Description&#10;     Returns the destination path for the move operation where overwriting is not expected.&#10;&#10;Parameters:&#10;    string $destination&#10;    string $delimiter&#10;    integer $i;;d1,218;;b1,0;;m0;;estring $destination;;pstring $delimiter;;pinteger $i;;p">
</treenode>
<treenode node="getMimeType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\File.php;f8;142;2;155;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMimeType(): string&#10;&#10;Description&#10;     Retrieve the media type of the file. SHOULD not use information from the $_FILES array, but should use other methods to more accurately determine the type of file, like finfo, or mime_content_type().&#10;&#10;Return:&#10;   |null The media type we determined it to be;;d1,143;;b1,0;;m0;;e">
</treenode>
<treenode node="getRandomName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\File.php;f8;165;2;170;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getRandomName(): string&#10;&#10;Description&#10;     Generates a random names based on a simple hash and the time, with the correct file extension attached.;;d1,166;;b1,0;;m0;;e">
</treenode>
<treenode node="getSize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\File.php;f8;90;2;98;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getSize()&#10;&#10;Description&#10;     Retrieve the file size.&#10;&#10;Return:&#10;   The file size in bytes;;d1,91;;b1,0;;m0;;e">
</treenode>
<treenode node="getSizeByUnit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\File.php;f8;107;2;118;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getSizeByUnit(string $unit = &apos;b&apos;)&#10;&#10;Description&#10;     Retrieve the file size by unit.&#10;&#10;Parameters:&#10;    string $unit&#10;&#10;Return:&#10;   |string;;d1,108;;b1,0;;m0;;estring $unit;;p">
</treenode>
<treenode node="guessExtension;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\File.php;f8;128;34;128;;;;vpos;;v;;astring;;r&#10;Description&#10;     Attempts to determine the file extension based on the trusted getType() method. If the mime type is unknown, will return null.&#10;&#10;Return:&#10;   |null;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="move;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\File.php;f8;183;2;200;;;;vpos;;v;;a;;r&#10;Definition&#10;    move(string $targetPath, string $name = null, bool $overwrite = false)&#10;&#10;Description&#10;     Moves a file to a new location.&#10;&#10;Parameters:&#10;    string $targetPath&#10;    string|null $name&#10;    boolean $overwrite;;d1,184;;b1,0;;m0;;estring $targetPath;;pstring|null $name;;pboolean $overwrite;;p">
</treenode>
</treenode>
<treenode node="FileCollection;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\FileCollection.php;f0;49;1;324;;;;vpos;;v;;a;;r&#10;Definition&#10;    class FileCollection&#10;&#10;Description&#10;     Class FileCollection;;d0,50;;b0,0;;m0;;e">
<treenode node="all;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\FileCollection.php;f8;71;2;76;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    all()&#10;&#10;Description&#10;     Returns an array of all uploaded files that were found. Each element in the array will be an instance of UploadedFile. The key of each element will be the client filename.&#10;&#10;Return:&#10;   |null;;d1,72;;b1,0;;m0;;e">
</treenode>
<treenode node="createFileObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\FileCollection.php;f11;223;2;245;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    createFileObject(array $array)&#10;&#10;Description&#10;     Given a file array, will create UploadedFile instances. Will loop over an array and create objects for each.&#10;&#10;Parameters:&#10;    array $array&#10;&#10;Return:&#10;   |UploadedFile;;d1,224;;b2,0;;m0;;earray $array;;p">
</treenode>
<treenode node="fixFilesArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\FileCollection.php;f11;262;2;298;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    fixFilesArray(array $data): array&#10;&#10;Description&#10;     Reformats the odd $_FILES array into something much more like we would expect, with each object having its own array.&#10;&#10;Parameters:&#10;    array $data;;d1,263;;b2,0;;m0;;earray $data;;p">
</treenode>
<treenode node="getFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\FileCollection.php;f8;87;2;110;;;;vpos;;v;;aUploadedFile;;r&#10;Definition&#10;    getFile(string $name)&#10;&#10;Description&#10;     Attempts to get a single file from the collection of uploaded files.&#10;&#10;Parameters:&#10;    string $name&#10;&#10;Return:&#10;   |null;;d1,88;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="getFileMultiple;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\FileCollection.php;f8;121;2;145;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFileMultiple(string $name)&#10;&#10;Description&#10;     Verify if a file exist in the collection of uploaded files and is have been uploaded with multiple option.&#10;&#10;Parameters:&#10;    string $name&#10;&#10;Return:&#10;   |null;;d1,122;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="getValueDotNotationSyntax;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\FileCollection.php;f11;310;2;322;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getValueDotNotationSyntax(array $index, array $value)&#10;&#10;Description&#10;     Navigate through a array looking for a particular index&#10;&#10;Parameters:&#10;    array $index - The index sequence we are navigating down&#10;    array $value - The portion of the array to process;;d1,311;;b2,0;;m0;;earray $index;;parray $value;;p">
</treenode>
<treenode node="hasFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\FileCollection.php;f8;157;2;181;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasFile(string $fileID): bool&#10;&#10;Description&#10;     Checks whether an uploaded file with name $fileID exists in this request.&#10;&#10;Parameters:&#10;    string $fileID - The name of the uploaded file (from the input);;d1,158;;b1,0;;m0;;estring $fileID;;p">
</treenode>
<treenode node="populateFiles;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\FileCollection.php;f11;191;2;211;;;;vpos;;v;;a;;r&#10;Definition&#10;    populateFiles()&#10;&#10;Description&#10;     Taking information from the $_FILES array, it creates an instance of UploadedFile for each one, saving the results to this-&gt;files.;;d1,192;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="FileException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Files\Exceptions\FileException.php;f0;4;1;12;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="forUnableToMove;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\Exceptions\FileException.php;f15;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,5;;m0;;efrom;;pto;;perror;;p">
</treenode>
</treenode>
<treenode node="FileHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\FileHandler.php;f0;47;1;421;;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\FileHandler.php;f0;44;1;163;;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f0;47;1;534;;;;vpos;;v;;aBaseHandler;;cSessionHandlerInterface;;c;;r&#10;Definition&#10;    class FileHandler extends BaseHandler implements \SessionHandlerInterface&#10;&#10;Description&#10;     Session handler using file system for storage;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\FileHandler.php;f8;93;2;117;;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\FileHandler.php;f8;75;2;85;;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;72;2;82;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config, string $ipAddress)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    BaseConfig $config&#10;    string $ipAddress;;d1,94;;b1,0;;m0;;eBaseConfig $config;;pstring $ipAddress;;p">
</treenode>
<treenode node="clean;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;232;2;235;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    clean()&#10;&#10;Description&#10;     Will delete all items in the entire cache.;;d1,233;;b1,0;;m0;;e">
</treenode>
<treenode node="close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\FileHandler.php;f8;293;2;306;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    close(): bool&#10;&#10;Description&#10;     Close;;d1,294;;b1,0;;m0;;e">
</treenode>
<treenode node="configureSessionIDRegex;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\FileHandler.php;f11;393;2;420;;;;vpos;;v;;a;;r&#10;Definition&#10;    configureSessionIDRegex()&#10;&#10;Description&#10;     Configure Session ID regular expression;;d1,394;;b2,0;;m0;;e">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;202;2;223;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    decrement(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic decrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,203;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;152;2;157;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    delete(string $key)&#10;&#10;Description&#10;     Deletes a specific item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,153;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="deleteFiles;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f11;390;2;418;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    deleteFiles(string $path, bool $del_dir = false, bool $htdocs = false, int $_level = 0): bool&#10;&#10;Description&#10;     Delete Files&#10;&#10;Parameters:&#10;    string $path - File path&#10;    boolean $del_dir - Whether to delete any directories found in the path&#10;    boolean $htdocs - Whether to skip deleting &#10;    integer $_level - Current directory depth level (default: 0;s internal use only);;d1,391;;b2,0;;m0;;estring $path;;pboolean $del_dir;;pboolean $htdocs;;pinteger $_level;;p">
</treenode>
<treenode node="destroy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\FileHandler.php;f8;319;2;335;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    destroy($session_id): bool&#10;&#10;Description&#10;     Destroy&#10;&#10;Parameters:&#10;    string $session_id - Session ID;;d1,320;;b1,0;;m0;;estring $session_id;;p">
</treenode>
<treenode node="gc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\FileHandler.php;f8;348;2;386;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    gc($maxlifetime): bool&#10;&#10;Description&#10;     Garbage Collector&#10;&#10;Parameters:&#10;    integer $maxlifetime - Maximum lifetime of sessions;;d1,349;;b1,0;;m0;;einteger $maxlifetime;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;103;2;110;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get(string $key)&#10;&#10;Description&#10;     Attempts to fetch an item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,104;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getCacheInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;247;2;250;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCacheInfo()&#10;&#10;Description&#10;     Returns information on the entire cache.;;d1,248;;b1,0;;m0;;e">
</treenode>
<treenode node="getDirFileInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f11;436;2;470;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getDirFileInfo(string $source_dir, bool $top_level_only = true, bool $_recursion = false)&#10;&#10;Description&#10;     Get Directory File Information&#10;&#10;Parameters:&#10;    string $source_dir - Path to source&#10;    boolean $top_level_only - Look only at the top level directory specified?&#10;    boolean $_recursion - Internal variable to determine recursion status - do not use in calls&#10;&#10;Return:&#10;   |false;;d1,437;;b2,0;;m0;;estring $source_dir;;pboolean $top_level_only;;pboolean $_recursion;;p">
</treenode>
<treenode node="getFileInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f11;487;2;531;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFileInfo(string $file, $returned_values = [&apos;name&apos;, &apos;server_path&apos;, &apos;size&apos;, &apos;date&apos;])&#10;&#10;Description&#10;     Get File Info&#10;&#10;Parameters:&#10;    string $file - Path to file&#10;    mixed $returned_values - Array or comma separated string of information returned&#10;&#10;Return:&#10;   |false;;d1,488;;b2,0;;m0;;estring $file;;pmixed $returned_values;;p">
</treenode>
<treenode node="getItem;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f11;313;2;334;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    getItem(string $key)&#10;&#10;Description&#10;     Does the heavy lifting of actually retrieving the file and verifying it&apos;s age.&#10;&#10;Parameters:&#10;    string $key&#10;&#10;Return:&#10;   |mixed;;d1,314;;b2,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getMetaData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;261;2;289;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getMetaData(string $key)&#10;&#10;Description&#10;     Returns detailed information about the specific item in the cache.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,262;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="handle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Handlers\FileHandler.php;f8;101;2;160;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    handle($level, $message): bool&#10;&#10;Description&#10;     Handles logging the message. If the handler returns false, then execution of handlers will stop. Any handlers that have not run, yet, will not be run.&#10;&#10;Parameters:&#10;     $level&#10;     $message;;d1,102;;b1,0;;m0;;e $level;;p $message;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;169;2;190;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    increment(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic incrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,170;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;89;2;92;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Takes care of any handler-specific setup that must be done.;;d1,90;;b1,0;;m0;;e">
</treenode>
<treenode node="isSupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;298;2;301;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isSupported(): bool&#10;&#10;Description&#10;     Determines if the driver is supported on this system.;;d1,299;;b1,0;;m0;;e">
</treenode>
<treenode node="open;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\FileHandler.php;f8;132;2;152;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    open($savePath, $name): bool&#10;&#10;Description&#10;     Open&#10;&#10;Parameters:&#10;    string $savePath - Path to session files&apos; directory&#10;    string $name - Session cookie name;;d1,133;;b1,0;;m0;;estring $savePath;;pstring $name;;p">
</treenode>
<treenode node="read;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\FileHandler.php;f8;165;2;223;;;;vpos;;v;;astring;;r&#10;Definition&#10;    read($sessionID): string&#10;&#10;Description&#10;     Read&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;&#10;Return:&#10;   Serialized session data;;d1,166;;b1,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f8;123;2;141;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    save(string $key, $value, int $ttl = 60)&#10;&#10;Description&#10;     Saves an item to the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name&#10;    mixed $value - The data to save&#10;    integer $ttl - Time To Live, in seconds (default 60);;d1,124;;b1,0;;m0;;estring $key;;pmixed $value;;pinteger $ttl;;p">
</treenode>
<treenode node="write;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\FileHandler.php;f8;237;2;282;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    write($sessionID, $sessionData): bool&#10;&#10;Description&#10;     Write&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;    string $sessionData - Serialized session data;;d1,238;;b1,0;;m0;;estring $sessionID;;pstring $sessionData;;p">
</treenode>
<treenode node="writeFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\FileHandler.php;f11;350;2;371;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    writeFile($path, $data, $mode = &apos;wb&apos;)&#10;&#10;Description&#10;     Writes a file to disk, or returns false if not successful.&#10;&#10;Parameters:&#10;    string $path&#10;    string $data&#10;    string $mode;;d1,351;;b2,0;;m0;;estring $path;;pstring $data;;pstring $mode;;p">
</treenode>
</treenode>
<treenode node="FileLocator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f0;49;1;504;;;;vpos;;v;;a;;r&#10;Definition&#10;    class FileLocator&#10;&#10;Description&#10;     Class FileLocator;;d0,50;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f8;65;2;68;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(Autoloader $autoloader)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    Autoloader $autoloader;;d1,66;;b1,0;;m0;;eAutoloader $autoloader;;p">
</treenode>
<treenode node="ensureExt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f11;289;2;302;;;;vpos;;v;;astring;;r&#10;Definition&#10;    ensureExt(string $path, string $ext): string&#10;&#10;Description&#10;     Ensures a extension is at the end of a filename&#10;&#10;Parameters:&#10;    string $path&#10;    string $ext;;d1,290;;b2,0;;m0;;estring $path;;pstring $ext;;p">
</treenode>
<treenode node="findQualifiedNameFromPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f8;354;2;390;;;;vpos;;v;;astring;;r&#10;Definition&#10;    findQualifiedNameFromPath(string $path)&#10;&#10;Description&#10;     Find the qualified name of a file according to the namespace of the first matched namespace path.&#10;&#10;Parameters:&#10;    string $path&#10;&#10;Return:&#10;   |false The qualified name or false if the path is not found;;d1,355;;b1,0;;m0;;estring $path;;p">
</treenode>
<treenode node="getClassname;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f8;169;2;215;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getClassname(string $file) : string&#10;&#10;Description&#10;     Examines a file and returns the fully qualified domain name.&#10;&#10;Parameters:&#10;    string $file;;d1,170;;b1,0;;m0;;estring $file;;p">
</treenode>
<treenode node="getNamespaces;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f11;311;2;342;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getNamespaces()&#10;&#10;Description&#10;     Return the namespace mappings we know about.&#10;&#10;Return:&#10;   |string;;d1,312;;b2,0;;m0;;e">
</treenode>
<treenode node="legacyLocate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f11;485;2;503;;;;vpos;;v;;astring;;r&#10;Definition&#10;    legacyLocate(string $file, string $folder = null)&#10;&#10;Description&#10;     Checks the application folder to see if the file can be found. Only for use with filenames that DO NOT include namespacing.&#10;&#10;Parameters:&#10;    string $file&#10;    string|null $folder&#10;&#10;Return:&#10;   |false The path to the file, or false if not found;;d1,486;;b2,0;;m0;;estring $file;;pstring|null $folder;;p">
</treenode>
<treenode node="listFiles;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f8;402;2;430;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    listFiles(string $path): array&#10;&#10;Description&#10;     Scans the defined namespaces, returning a list of all files that are contained within the subpath specified by $path.&#10;&#10;Parameters:&#10;    string $path;;d1,403;;b1,0;;m0;;estring $path;;p">
</treenode>
<treenode node="listNamespaceFiles;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f8;443;2;472;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    listNamespaceFiles(string $prefix, string $path): array&#10;&#10;Description&#10;     Scans the provided namespace, returning a list of all files that are contained within the subpath specified by $path.&#10;&#10;Parameters:&#10;    string $prefix&#10;    string $path;;d1,444;;b1,0;;m0;;estring $prefix;;pstring $path;;p">
</treenode>
<treenode node="locateFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f8;82;2;158;;;;vpos;;v;;astring;;r&#10;Definition&#10;    locateFile(string $file, string $folder = null, string $ext = &apos;php&apos;)&#10;&#10;Description&#10;     Attempts to locate a file by examining the name for a namespace and looking through the PSR-4 namespaced files that we know about.&#10;&#10;Parameters:&#10;    string $file - The namespaced file to locate&#10;    string $folder - The folder within the namespace that we should look for the file&#10;    string $ext - The file extension the file should have&#10;&#10;Return:&#10;   |false The path to the file, or false if not found;;d1,83;;b1,0;;m0;;estring $file;;pstring $folder;;pstring $ext;;p">
</treenode>
<treenode node="search;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Autoloader\FileLocator.php;f8;238;2;277;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    search(string $path, string $ext = &apos;php&apos;, bool $prioritizeApp = true): array&#10;&#10;Description&#10;     Searches through all of the defined namespaces looking for a file. Returns an array of all found locations for the defined file.&#10;&#10;Parameters:&#10;    string $path&#10;    string $ext&#10;    boolean $prioritizeApp;;d1,239;;b1,0;;m0;;estring $path;;pstring $ext;;pboolean $prioritizeApp;;p">
</treenode>
</treenode>
<treenode node="FileNotFoundException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Files\Exceptions\FileNotFoundException.php;f0;4;1;10;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="forFileNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Files\Exceptions\FileNotFoundException.php;f15;6;2;9;;;;vpos;;v;;a;;r;;d1,7;;b1,5;;m0;;epath;;p">
</treenode>
</treenode>
<treenode node="FileRules;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FileRules.php;f0;47;1;356;;;;vpos;;v;;a;;r&#10;Definition&#10;    class FileRules&#10;&#10;Description&#10;     File validation rules;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FileRules.php;f8;64;2;72;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(RequestInterface $request = null)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    RequestInterface $request;;d1,65;;b1,0;;m0;;eRequestInterface $request;;p">
</treenode>
<treenode node="ext_in;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FileRules.php;f8;269;2;300;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    ext_in(string $blank = null, string $params): bool&#10;&#10;Description&#10;     Checks to see if an uploaded file&apos;s extension matches one in the parameter.&#10;&#10;Parameters:&#10;    string|null $blank&#10;    string $params;;d1,270;;b1,0;;m0;;estring|null $blank;;pstring $params;;p">
</treenode>
<treenode node="is_image;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FileRules.php;f8;179;2;214;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    is_image(string $blank = null, string $params): bool&#10;&#10;Description&#10;     Uses the mime config file to determine if a file is considered an &quot;image&quot;, which for our purposes basically means that it&apos;s a raster image or svg.&#10;&#10;Parameters:&#10;    string|null $blank&#10;    string $params;;d1,180;;b1,0;;m0;;estring|null $blank;;pstring $params;;p">
</treenode>
<treenode node="max_dims;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FileRules.php;f8;313;2;353;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    max_dims(string $blank = null, string $params): bool&#10;&#10;Description&#10;     Checks an uploaded file to verify that the dimensions are within a specified allowable dimension.&#10;&#10;Parameters:&#10;    string|null $blank&#10;    string $params;;d1,314;;b1,0;;m0;;estring|null $blank;;pstring $params;;p">
</treenode>
<treenode node="max_size;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FileRules.php;f8;130;2;166;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    max_size(string $blank = null, string $params): bool&#10;&#10;Description&#10;     Verifies if the file&apos;s size in Kilobytes is no larger than the parameter.&#10;&#10;Parameters:&#10;    string|null $blank&#10;    string $params;;d1,131;;b1,0;;m0;;estring|null $blank;;pstring $params;;p">
</treenode>
<treenode node="mime_in;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FileRules.php;f8;226;2;257;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    mime_in(string $blank = null, string $params): bool&#10;&#10;Description&#10;     Checks to see if an uploaded file&apos;s mime type matches one in the parameter.&#10;&#10;Parameters:&#10;    string|null $blank&#10;    string $params;;d1,227;;b1,0;;m0;;estring|null $blank;;pstring $params;;p">
</treenode>
<treenode node="uploaded;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FileRules.php;f8;84;2;118;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    uploaded(string $blank = null, string $name): bool&#10;&#10;Description&#10;     Verifies that $name is the name of a valid uploaded file.&#10;&#10;Parameters:&#10;    string $blank&#10;    string $name;;d1,85;;b1,0;;m0;;estring $blank;;pstring $name;;p">
</treenode>
</treenode>
<treenode node="Files;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Files.php;f0;44;1;150;;;;vpos;;v;;aBaseCollector;;c;;r&#10;Definition&#10;    class Files extends BaseCollector&#10;&#10;Description&#10;     Files collector;;d0,45;;b0,0;;m0;;e">
<treenode node="display;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Files.php;f8;90;2;123;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    display(): array&#10;&#10;Description&#10;     Returns the data of this collector to be formatted in the toolbar;;d1,91;;b1,0;;m0;;e">
</treenode>
<treenode node="getBadgeValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Files.php;f8;132;2;135;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getBadgeValue(): int&#10;&#10;Description&#10;     Displays the number of included files as a badge in the tab button.;;d1,133;;b1,0;;m0;;e">
</treenode>
<treenode node="getTitleDetails;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Files.php;f8;78;2;81;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getTitleDetails(): string&#10;&#10;Description&#10;     Returns any information that should be shown next to the title.;;d1,79;;b1,0;;m0;;e">
</treenode>
<treenode node="icon;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Files.php;f8;146;2;149;;;;vpos;;v;;astring;;r&#10;Definition&#10;    icon(): string&#10;&#10;Description&#10;     Display the icon.;;d1,147;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="FilterException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Exceptions\FilterException.php;f0;47;1;73;;;;vpos;;v;;aConfigException;;cExceptionInterface;;c;;r&#10;Definition&#10;    class FilterException extends ConfigException implements ExceptionInterface&#10;&#10;Description&#10;     FilterException;;d0,48;;b0,0;;m0;;e">
<treenode node="forIncorrectInterface;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Exceptions\FilterException.php;f15;69;2;72;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    forIncorrectInterface(string $class)&#10;&#10;Description&#10;     Thrown when the filter class does not implement FilterInterface.&#10;&#10;Parameters:&#10;    string $class;;d1,70;;b1,5;;m0;;estring $class;;p">
</treenode>
<treenode node="forNoAlias;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Exceptions\FilterException.php;f15;57;2;60;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    forNoAlias(string $alias)&#10;&#10;Description&#10;     Thrown when the provided alias is not within the list of configured filter aliases.&#10;&#10;Parameters:&#10;    string $alias;;d1,58;;b1,5;;m0;;estring $alias;;p">
</treenode>
</treenode>
<treenode node="Filters;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f0;47;1;360;;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f0;48;1;515;;O:\xampp\htdocs\2020\blog-4\app\Config\Filters.php;f0;4;1;35;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Filters&#10;&#10;Description&#10;     View filters;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f8;107;2;112;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config, RequestInterface $request, ResponseInterface $response)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \Config\Filters $config&#10;    RequestInterface $request&#10;    ResponseInterface $response;;d1,108;;b1,0;;m0;;e\Config\Filters $config;;pRequestInterface $request;;pResponseInterface $response;;p">
</treenode>
<treenode node="addFilter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f8;271;2;290;;;;vpos;;v;;a;;r&#10;Definition&#10;    addFilter(string $class, string $alias = null, string $when = &apos;before&apos;, string $section = &apos;globals&apos;)&#10;&#10;Description&#10;     Adds a new alias to the config file. MUST be called prior to initialize();s Intended for use within routes files.&#10;&#10;Parameters:&#10;    string $class&#10;    string|null $alias&#10;    string $when&#10;    string $section;;d1,272;;b1,0;;m0;;estring $class;;pstring|null $alias;;pstring $when;;pstring $section;;p">
</treenode>
<treenode node="capitalize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;56;2;59;;;;vpos;;v;;astring;;r&#10;Definition&#10;    capitalize(string $value): string&#10;&#10;Description&#10;     Returns $value as all lowercase with the first letter capitalized.&#10;&#10;Parameters:&#10;     $value;;d1,57;;b1,5;;m0;;e $value;;p">
</treenode>
<treenode node="date;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;71;2;79;;;;vpos;;v;;astring;;r&#10;Definition&#10;    date($value, string $format): string&#10;&#10;Description&#10;     Formats a date into the given $format.&#10;&#10;Parameters:&#10;     $value&#10;    string $format;;d1,72;;b1,5;;m0;;e $value;;pstring $format;;p">
</treenode>
<treenode node="date_modify;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;96;2;101;;;;vpos;;v;;astring;;r&#10;Definition&#10;    date_modify($value, string $adjustment): string&#10;&#10;Description&#10;     Given a string or DateTime object, will return the date modified by the given value. Returns the value as a unix timestamp&#10;&#10;Parameters:&#10;     $value&#10;    string $adjustment;;d1,97;;b1,5;;m0;;e $value;;pstring $adjustment;;p">
</treenode>
<treenode node="default;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;113;2;118;;;;vpos;;v;;astring;;r&#10;Definition&#10;    default($value, string $default): string&#10;&#10;Description&#10;     Returns the given default value if $value is empty or undefined.&#10;&#10;Parameters:&#10;     $value&#10;    string $default;;d1,114;;b1,5;;m0;;e $value;;pstring $default;;p">
</treenode>
<treenode node="enableFilter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f8;306;2;332;;;;vpos;;v;;a;;r&#10;Definition&#10;    enableFilter(string $name, string $when = &apos;before&apos;)&#10;&#10;Description&#10;     Ensures that a specific filter is on and enabled for the current request.&#10;&#10;Parameters:&#10;    string $name&#10;    string $when;;d1,307;;b1,0;;m0;;estring $name;;pstring $when;;p">
</treenode>
<treenode node="esc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;130;2;133;;;;vpos;;v;;astring;;r&#10;Definition&#10;    esc($value, string $context = &apos;html&apos;): string&#10;&#10;Description&#10;     Escapes the given value with our `esc()` helper function.&#10;&#10;Parameters:&#10;     $value&#10;    string $context;;d1,131;;b1,5;;m0;;e $value;;pstring $context;;p">
</treenode>
<treenode node="excerpt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;146;2;151;;;;vpos;;v;;astring;;r&#10;Definition&#10;    excerpt(string $value, string $phrase, int $radius = 100): string&#10;&#10;Description&#10;     Returns an excerpt of the given string.&#10;&#10;Parameters:&#10;    string $value&#10;    string $phrase&#10;    integer $radius;;d1,147;;b1,5;;m0;;estring $value;;pstring $phrase;;pinteger $radius;;p">
</treenode>
<treenode node="getArguments;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f8;343;2;346;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getArguments(string $key = null)&#10;&#10;Description&#10;     Returns the arguments for a specified key, or all.&#10;&#10;Parameters:&#10;    string|null $key;;d1,344;;b1,0;;m0;;estring|null $key;;p">
</treenode>
<treenode node="getFilters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f8;254;2;257;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFilters(): array&#10;&#10;Description&#10;     Returns the processed filters array.;;d1,255;;b1,0;;m0;;e">
</treenode>
<treenode node="highlight;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;163;2;168;;;;vpos;;v;;astring;;r&#10;Definition&#10;    highlight(string $value, string $phrase): string&#10;&#10;Description&#10;     Highlights a given phrase within the text using &apos;&lt;mark&gt;&lt;/mark&gt;&apos; tags.&#10;&#10;Parameters:&#10;    string $value&#10;    string $phrase;;d1,164;;b1,5;;m0;;estring $value;;pstring $phrase;;p">
</treenode>
<treenode node="highlight_code;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;179;2;184;;;;vpos;;v;;astring;;r&#10;Definition&#10;    highlight_code($value): string&#10;&#10;Description&#10;     Highlights code samples with HTML/CSS.&#10;&#10;Parameters:&#10;     $value;;d1,180;;b1,5;;m0;;e $value;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f8;231;2;245;;;;vpos;;v;;aFilters;;r&#10;Definition&#10;    initialize(string $uri = null)&#10;&#10;Description&#10;     Runs through our list of filters provided by the configuration object to get them ready for use, including getting uri masks to proper regex, removing those we can from the possibilities based on HTTP method, etc.&#10;&#10;Parameters:&#10;    string $uri;;d1,232;;b1,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="limit_chars;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;197;2;202;;;;vpos;;v;;astring;;r&#10;Definition&#10;    limit_chars($value, int $limit = 500): string&#10;&#10;Description&#10;     Limits the number of characters to $limit, and trails of with an ellipsis. Will break at word break so may be more or less than $limit.&#10;&#10;Parameters:&#10;     $value&#10;    integer $limit;;d1,198;;b1,5;;m0;;e $value;;pinteger $limit;;p">
</treenode>
<treenode node="limit_words;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;214;2;219;;;;vpos;;v;;astring;;r&#10;Definition&#10;    limit_words($value, int $limit = 100): string&#10;&#10;Description&#10;     Limits the number of words to $limit, and trails of with an ellipsis.&#10;&#10;Parameters:&#10;     $value&#10;    integer $limit;;d1,215;;b1,5;;m0;;e $value;;pinteger $limit;;p">
</treenode>
<treenode node="local_currency;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;262;2;273;;;;vpos;;v;;astring;;r&#10;Definition&#10;    local_currency($value, string $currency, string $locale = null, $fraction = null): string&#10;&#10;Description&#10;     Returns the $value displayed as a currency string.&#10;&#10;Parameters:&#10;     $value&#10;    string $currency&#10;    string|null $locale&#10;    integer $fraction;;d1,263;;b1,5;;m0;;e $value;;pstring $currency;;pstring|null $locale;;pinteger $fraction;;p">
</treenode>
<treenode node="local_number;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;233;2;248;;;;vpos;;v;;astring;;r&#10;Definition&#10;    local_number($value, string $type = &apos;decimal&apos;, int $precision = 4, string $locale = null): string&#10;&#10;Description&#10;     Returns the $value displayed in a localized manner.&#10;&#10;Parameters:&#10;     $value&#10;    integer $precision&#10;    string $type&#10;    string|null $locale;;d1,234;;b1,5;;m0;;e $value;;pinteger $precision;;pstring $type;;pstring|null $locale;;p">
</treenode>
<treenode node="nl2br;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;283;2;288;;;;vpos;;v;;astring;;r&#10;Definition&#10;    nl2br(string $value): string&#10;&#10;Description&#10;     Returns a string with all instances of newline character (\n) converted to an HTML &lt;br/&gt; tag.&#10;&#10;Parameters:&#10;    string $value;;d1,284;;b1,5;;m0;;estring $value;;p">
</treenode>
<treenode node="pathApplies;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f9;484;2;513;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    pathApplies(string $uri, $paths)&#10;&#10;Description&#10;     Check paths for match for URI&#10;&#10;Parameters:&#10;    string $uri - URI to test against&#10;    mixed $paths - The path patterns to test&#10;&#10;Return:&#10;   True if any of the paths apply to the URI;;d1,485;;b3,0;;m0;;estring $uri;;pmixed $paths;;p">
</treenode>
<treenode node="processFilters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f11;443;2;474;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    processFilters(string $uri = null)&#10;&#10;Description&#10;     Add any applicable configured filters to the mix.&#10;&#10;Parameters:&#10;    string $uri;;d1,444;;b2,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="processGlobals;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f11;360;2;408;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    processGlobals(string $uri = null)&#10;&#10;Description&#10;     Add any applicable (not excluded) global filter settings to the mix.&#10;&#10;Parameters:&#10;    string $uri;;d1,361;;b2,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="processMethods;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f11;417;2;432;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    processMethods()&#10;&#10;Description&#10;     Add any method-specific flters to the mix.;;d1,418;;b2,0;;m0;;e">
</treenode>
<treenode node="prose;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;300;2;305;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prose(string $value): string&#10;&#10;Description&#10;     Takes a body of text and uses the auto_typography() method to turn it into prettier, easier-to-read, prose.&#10;&#10;Parameters:&#10;    string $value;;d1,301;;b1,5;;m0;;estring $value;;p">
</treenode>
<treenode node="round;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;322;2;342;;;;vpos;;v;;astring;;r&#10;Definition&#10;    round(string $value, $precision = 2, string $type = &apos;common&apos;): string&#10;&#10;Description&#10;     Rounds a given $value in one of 3 ways;s&#10;&#10;Parameters:&#10;    string $value&#10;    mixed $precision&#10;    string $type;;d1,323;;b1,5;;m0;;estring $value;;pmixed $precision;;pstring $type;;p">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f8;136;2;210;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(string $uri, string $position = &apos;before&apos;)&#10;&#10;Description&#10;     Runs through all of the filters for the specified uri and position.&#10;&#10;Parameters:&#10;    string $uri&#10;    string $position;;d1,137;;b1,0;;m0;;estring $uri;;pstring $position;;p">
</treenode>
<treenode node="setResponse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Filters.php;f8;119;2;122;;;;vpos;;v;;a;;r&#10;Definition&#10;    setResponse(ResponseInterface $response)&#10;&#10;Description&#10;     Set the response explicity.&#10;&#10;Parameters:&#10;    ResponseInterface $response;;d1,120;;b1,0;;m0;;eResponseInterface $response;;p">
</treenode>
<treenode node="title;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Filters.php;f15;353;2;356;;;;vpos;;v;;astring;;r&#10;Definition&#10;    title(string $value): string&#10;&#10;Description&#10;     Returns a &quot;title case&quot; version of the string.&#10;&#10;Parameters:&#10;    string $value;;d1,354;;b1,5;;m0;;estring $value;;p">
</treenode>
</treenode>
<treenode node="FlatAuthorization;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f0;6;1;744;;;;vpos;;v;;aAuthorizeInterface;;c;;r;;d0,7;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;33;2;37;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    __construct(Model $groupModel, Model $permissionModel)&#10;&#10;Description&#10;     Stores the models.&#10;&#10;Return:&#10;   |string|null;;d1,34;;b1,0;;m0;;egroupModel;;ppermissionModel;;p">
</treenode>
<treenode node="addPermissionToGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;259;2;285;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    addPermissionToGroup($permission, $group)&#10;&#10;Description&#10;     Adds a single permission to a single group.&#10;&#10;Parameters:&#10;    int|string $permission&#10;    int|string $group;;d1,260;;b1,0;;m0;;eint|string $permission;;pint|string $group;;p">
</treenode>
<treenode node="addPermissionToUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;332;2;364;;;;vpos;;v;;aint;;r&#10;Definition&#10;    addPermissionToUser($permission, int $userId)&#10;&#10;Description&#10;     Assigns a single permission to a user, irregardless of permissions assigned by roles. This is saved to the user&apos;s meta information.&#10;&#10;Parameters:&#10;    int|string $permission&#10;    int $userId&#10;&#10;Return:&#10;   |bool;;d1,333;;b1,0;;m0;;eint|string $permission;;pint $userId;;p">
</treenode>
<treenode node="addUserToGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;169;2;204;;;;vpos;;v;;abool;;r&#10;Definition&#10;    addUserToGroup(int $userid, $group)&#10;&#10;Description&#10;     Makes a member a part of a group.&#10;&#10;Parameters:&#10;    int $userid&#10;    mixed $group - Either ID or name, fails on anything else;;d1,170;;b1,0;;m0;;eint $userid;;pmixed $group;;p">
</treenode>
<treenode node="createGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;465;2;494;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    createGroup(string $name, string $description = &apos;&apos;)&#10;&#10;Description&#10;     &#10;&#10;Parameters:&#10;     $name&#10;    string $description;;d1,466;;b1,0;;m0;;e $name;;pstring $description;;p">
</treenode>
<treenode node="createPermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;611;2;640;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    createPermission(string $name, string $description = &apos;&apos;)&#10;&#10;Description&#10;     Creates a single permission.&#10;&#10;Parameters:&#10;     $name&#10;    string $description;;d1,612;;b1,0;;m0;;e $name;;pstring $description;;p">
</treenode>
<treenode node="deleteGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;503;2;513;;;;vpos;;v;;abool;;r&#10;Definition&#10;    deleteGroup(int $groupId)&#10;&#10;Description&#10;     Deletes a single group.&#10;&#10;Parameters:&#10;    int $groupId;;d1,504;;b1,0;;m0;;eint $groupId;;p">
</treenode>
<treenode node="deletePermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;649;2;662;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    deletePermission(int $permissionIdId)&#10;&#10;Description&#10;     Deletes a single permission and removes that permission from all groups.&#10;&#10;Parameters:&#10;    int $permissionIdId;;d1,650;;b1,0;;m0;;eint $permissionIdId;;p">
</treenode>
<treenode node="doesUserHavePermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;408;2;423;;;;vpos;;v;;abool;;r&#10;Definition&#10;    doesUserHavePermission($userId, $permission)&#10;&#10;Description&#10;     Checks to see if a user has private permission assigned to it.&#10;&#10;Parameters:&#10;     $userId&#10;     $permission&#10;&#10;Return:&#10;   |null;;d1,409;;b1,0;;m0;;e $userId;;p $permission;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;44;2;47;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    error()&#10;&#10;Description&#10;     Returns any error(s) from the last call.&#10;&#10;Return:&#10;   |string|null;;d1,45;;b1,0;;m0;;e">
</treenode>
<treenode node="getGroupID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f11;553;2;570;;;;vpos;;v;;aint;;r&#10;Definition&#10;    getGroupID($group)&#10;&#10;Description&#10;     Given a group, will return the group ID. The group can be either the ID or the name of the group.&#10;&#10;Parameters:&#10;    int|string $group&#10;&#10;Return:&#10;   |false;;d1,554;;b2,0;;m0;;eint|string $group;;p">
</treenode>
<treenode node="getPermissionID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f11;702;2;721;;;;vpos;;v;;aint;;r&#10;Definition&#10;    getPermissionID($permission)&#10;&#10;Description&#10;     Verifies that a permission (either ID or the name) exists and returns the permission ID.&#10;&#10;Parameters:&#10;    int|string $permission&#10;&#10;Return:&#10;   |null;;d1,703;;b2,0;;m0;;eint|string $permission;;p">
</treenode>
<treenode node="group;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;436;2;444;;;;vpos;;v;;aobject;;r&#10;Definition&#10;    group($group)&#10;&#10;Description&#10;     Grabs the details about a single group.&#10;&#10;Parameters:&#10;     $group&#10;&#10;Return:&#10;   |null;;d1,437;;b1,0;;m0;;e $group;;p">
</treenode>
<treenode node="groupPermissions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;731;2;742;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    groupPermissions($group)&#10;&#10;Description&#10;     Returns an array of all permissions in the system for a group The group can be either the ID or the name of the group.&#10;&#10;Parameters:&#10;    int|string $group;;d1,732;;b1,0;;m0;;eint|string $group;;p">
</treenode>
<treenode node="groups;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;451;2;456;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    groups()&#10;&#10;Description&#10;     Grabs an array of all groups.&#10;&#10;Return:&#10;   of objects;;d1,452;;b1,0;;m0;;e">
</treenode>
<treenode node="hasPermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;131;2;159;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    hasPermission($permission, int $userId)&#10;&#10;Description&#10;     Checks a user&apos;s groups to see if they have the specified permission.&#10;&#10;Parameters:&#10;    int|string $permission&#10;    int $userId;;d1,132;;b1,0;;m0;;eint|string $permission;;pint $userId;;p">
</treenode>
<treenode node="inGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;80;2;121;;;;vpos;;v;;abool;;r&#10;Definition&#10;    inGroup($groups, int $userId)&#10;&#10;Description&#10;     Checks to see if a user is in a group.&#10;&#10;Parameters:&#10;    mixed $groups&#10;    int $userId;;d1,81;;b1,0;;m0;;emixed $groups;;pint $userId;;p">
</treenode>
<treenode node="permission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;583;2;591;;;;vpos;;v;;aobject;;r&#10;Definition&#10;    permission($permission)&#10;&#10;Description&#10;     Returns the details about a single permission.&#10;&#10;Parameters:&#10;    int|string $permission&#10;&#10;Return:&#10;   |null;;d1,584;;b1,0;;m0;;eint|string $permission;;p">
</treenode>
<treenode node="permissions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;598;2;601;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    permissions()&#10;&#10;Description&#10;     Returns an array of all permissions in the system.;;d1,599;;b1,0;;m0;;e">
</treenode>
<treenode node="removePermissionFromGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;295;2;321;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    removePermissionFromGroup($permission, $group)&#10;&#10;Description&#10;     Removes a single permission from a group.&#10;&#10;Parameters:&#10;    int|string $permission&#10;    int|string $group;;d1,296;;b1,0;;m0;;eint|string $permission;;pint|string $group;;p">
</treenode>
<treenode node="removePermissionFromUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;376;2;398;;;;vpos;;v;;abool;;r&#10;Definition&#10;    removePermissionFromUser($permission, int $userId)&#10;&#10;Description&#10;     Removes a single permission from a user. Only applies to permissions that have been assigned with addPermissionToUser, not to permissions inherited based on groups they belong to.&#10;&#10;Parameters:&#10;    int/string $permission&#10;    int $userId&#10;&#10;Return:&#10;   |mixed|null;;d1,377;;b1,0;;m0;;eint/string $permission;;pint $userId;;p">
</treenode>
<treenode node="removeUserFromGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;214;2;249;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    removeUserFromGroup(int $userId, $group)&#10;&#10;Description&#10;     Removes a single user from a group.&#10;&#10;Parameters:&#10;    int $userId&#10;    mixed $group;;d1,215;;b1,0;;m0;;eint $userId;;pmixed $group;;p">
</treenode>
<treenode node="setUserModel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;57;2;62;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    setUserModel(Model $model)&#10;&#10;Description&#10;     Allows the consuming application to pass in a reference to the model that should be used.&#10;&#10;Parameters:&#10;    Model $model;;d1,58;;b1,0;;m0;;eModel $model;;p">
</treenode>
<treenode node="updateGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;524;2;543;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    updateGroup(int $id, string $name, string $description = &apos;&apos;)&#10;&#10;Description&#10;     Updates a single group&apos;s information.&#10;&#10;Parameters:&#10;     $id&#10;     $name&#10;    string $description;;d1,525;;b1,0;;m0;;e $id;;p $name;;pstring $description;;p">
</treenode>
<treenode node="updatePermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\FlatAuthorization.php;f8;673;2;692;;;;vpos;;v;;abool;;r&#10;Definition&#10;    updatePermission(int $id, string $name, string $description = &apos;&apos;)&#10;&#10;Description&#10;     Updates the details for a single permission.&#10;&#10;Parameters:&#10;    int $id&#10;    string $name&#10;    string $description;;d1,674;;b1,0;;m0;;eint $id;;pstring $name;;pstring $description;;p">
</treenode>
</treenode>
<treenode node="ForeignCharacters;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Config\ForeignCharacters.php;f0;44;1;142;;O:\xampp\htdocs\2020\blog-4\app\Config\ForeignCharacters.php;f0;2;1;5;;;;vpos;;v;;a;;r&#10;Definition&#10;    class ForeignCharacters&#10;&#10;Description&#10;     Describes foreign characters for transliteration with the text helper.;;d0,45;;b0,0;;m0;;e">
</treenode>
<treenode node="Forge;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f0;47;1;330;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Forge.php;f0;44;1;260;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Forge.php;f0;44;1;278;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f0;46;1;1327;;;;vpos;;v;;aForge;;c;;r&#10;Definition&#10;    class Forge extends \CodeIgniter\Database\Forge&#10;&#10;Description&#10;     Forge for SQLite3;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f8;71;2;80;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;194;2;197;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(ConnectionInterface $db)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;     $db - ConnectionInterface;;d1,72;;b1,0;;m0;;e $db;;p">
</treenode>
<treenode node="_alterTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f11;157;2;180;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Forge.php;f11;109;2;158;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Forge.php;f11;172;2;202;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;901;2;930;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _alterTable(string $alter_type, string $table, $field)&#10;&#10;Description&#10;     ALTER TABLE&#10;&#10;Parameters:&#10;    string $alter_type - ALTER type&#10;    string $table - Table name&#10;    mixed $field - Column definition&#10;&#10;Return:&#10;   |array;;d1,158;;b2,0;;m0;;estring $alter_type;;pstring $table;;pmixed $field;;p">
</treenode>
<treenode node="_attributeAutoIncrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f11;285;2;298;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Forge.php;f11;225;2;231;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;1183;2;1191;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    _attributeAutoIncrement(array &amp;$attributes, array &amp;$field)&#10;&#10;Description&#10;     Field attribute AUTO_INCREMENT&#10;&#10;Parameters:&#10;    array - &amp;$attributes&#10;    array - &amp;$field;;d1,286;;b2,0;;m0;;earray;;parray;;p">
</treenode>
<treenode node="_attributeDefault;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;1131;2;1153;;;;vpos;;v;;anull;;r&#10;Definition&#10;    _attributeDefault(array &amp;$attributes, array &amp;$field)&#10;&#10;Description&#10;     Field attribute DEFAULT&#10;&#10;Parameters:&#10;    array - &amp;$attributes&#10;    array - &amp;$field&#10;&#10;Return:&#10;   |void;;d1,1132;;b2,0;;m0;;earray;;parray;;p">
</treenode>
<treenode node="_attributeType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f11;262;2;273;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Forge.php;f11;189;2;213;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;1063;2;1066;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    _attributeType(array &amp;$attributes)&#10;&#10;Description&#10;     Field attribute TYPE&#10;&#10;Parameters:&#10;    array - &amp;$attributes;;d1,263;;b2,0;;m0;;earray;;p">
</treenode>
<treenode node="_attributeUnique;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;1165;2;1171;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    _attributeUnique(array &amp;$attributes, array &amp;$field)&#10;&#10;Description&#10;     Field attribute UNIQUE&#10;&#10;Parameters:&#10;    array - &amp;$attributes&#10;    array - &amp;$field;;d1,1166;;b2,0;;m0;;earray;;parray;;p">
</treenode>
<treenode node="_attributeUnsigned;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;1087;2;1119;;;;vpos;;v;;anull;;r&#10;Definition&#10;    _attributeUnsigned(array &amp;$attributes, array &amp;$field)&#10;&#10;Description&#10;     Field attribute UNSIGNED&#10;&#10;Parameters:&#10;    array - &amp;$attributes&#10;    array - &amp;$field&#10;&#10;Return:&#10;   |void;;d1,1088;;b2,0;;m0;;earray;;parray;;p">
</treenode>
<treenode node="_createTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;567;2;606;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    _createTable(string $table, bool $if_not_exists, array $attributes)&#10;&#10;Description&#10;     Create Table&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    boolean $if_not_exists - Whether to add &apos;IF NOT EXISTS&apos; condition&#10;    array $attributes - Associative array of table attributes;;d1,568;;b2,0;;m0;;estring $table;;pboolean $if_not_exists;;parray $attributes;;p">
</treenode>
<treenode node="_createTableAttributes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Forge.php;f11;93;2;96;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Forge.php;f11;128;2;160;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;617;2;630;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _createTableAttributes(array $attributes): string&#10;&#10;Description&#10;     CREATE TABLE attributes&#10;&#10;Parameters:&#10;    array $attributes - Associative array of table attributes;;d1,94;;b2,0;;m0;;earray $attributes;;p">
</treenode>
<treenode node="_dropTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Forge.php;f11;246;2;256;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;700;2;720;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _dropTable(string $table, bool $if_exists, bool $cascade): string&#10;&#10;Description&#10;     Drop Table&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    boolean $if_exists - Whether to add an IF EXISTS condition&#10;    boolean $cascade;;d1,247;;b2,0;;m0;;estring $table;;pboolean $if_exists;;pboolean $cascade;;p">
</treenode>
<treenode node="_processColumn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f11;191;2;205;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Forge.php;f11;168;2;176;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Forge.php;f11;212;2;231;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;1041;2;1050;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _processColumn(array $field): string&#10;&#10;Description&#10;     Process column&#10;&#10;Parameters:&#10;    array $field;;d1,192;;b2,0;;m0;;earray $field;;p">
</treenode>
<treenode node="_processFields;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;941;2;1030;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    _processFields(bool $create_table = false): array&#10;&#10;Description&#10;     Process fields&#10;&#10;Parameters:&#10;    boolean $create_table;;d1,942;;b2,0;;m0;;eboolean $create_table;;p">
</treenode>
<treenode node="_processForeignKeys;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;1277;2;1311;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _processForeignKeys(string $table): string&#10;&#10;Description&#10;     Process foreign keys&#10;&#10;Parameters:&#10;    string $table - Table name;;d1,1278;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_processIndexes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f11;216;2;250;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Forge.php;f11;241;2;275;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;1232;2;1266;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    _processIndexes(string $table): array&#10;&#10;Description&#10;     Process indexes&#10;&#10;Parameters:&#10;    string $table;;d1,217;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_processPrimaryKeys;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f11;1202;2;1221;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _processPrimaryKeys(string $table): string&#10;&#10;Description&#10;     Process primary keys&#10;&#10;Parameters:&#10;    string $table - Table name;;d1,1203;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="addColumn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;778;2;809;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    addColumn(string $table, $field): bool&#10;&#10;Description&#10;     Column Add&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    string|array $field - Column definition;;d1,779;;b1,0;;m0;;estring $table;;pstring|array $field;;p">
</treenode>
<treenode node="addField;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;398;2;430;;;;vpos;;v;;aForge;;r&#10;Definition&#10;    addField($field)&#10;&#10;Description&#10;     Add Field&#10;&#10;Parameters:&#10;    array|string $field;;d1,399;;b1,0;;m0;;earray|string $field;;p">
</treenode>
<treenode node="addForeignKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;446;2;461;;;;vpos;;v;;a;;r&#10;Definition&#10;    addForeignKey(string $fieldName = &apos;&apos;, string $tableName = &apos;&apos;, string $tableField = &apos;&apos;, string $onUpdate = &apos;&apos;, string $onDelete = &apos;&apos;)&#10;&#10;Description&#10;     Add Foreign Key&#10;&#10;Parameters:&#10;    string $fieldName&#10;    string $tableName&#10;    string $tableField&#10;    string $onUpdate&#10;    string $onDelete;;d1,447;;b1,0;;m0;;estring $fieldName;;pstring $tableName;;pstring $tableField;;pstring $onUpdate;;pstring $onDelete;;p">
</treenode>
<treenode node="addKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;340;2;359;;;;vpos;;v;;aForge;;r&#10;Definition&#10;    addKey($key, bool $primary = false, bool $unique = false)&#10;&#10;Description&#10;     Add Key&#10;&#10;Parameters:&#10;    string|array $key&#10;    boolean $primary&#10;    boolean $unique;;d1,341;;b1,0;;m0;;estring|array $key;;pboolean $primary;;pboolean $unique;;p">
</treenode>
<treenode node="addPrimaryKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;370;2;373;;;;vpos;;v;;aForge;;r&#10;Definition&#10;    addPrimaryKey($key)&#10;&#10;Description&#10;     Add Primary Key&#10;&#10;Parameters:&#10;    string|array $key;;d1,371;;b1,0;;m0;;estring|array $key;;p">
</treenode>
<treenode node="addUniqueKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;384;2;387;;;;vpos;;v;;aForge;;r&#10;Definition&#10;    addUniqueKey($key)&#10;&#10;Description&#10;     Add Unique Key&#10;&#10;Parameters:&#10;    string|array $key;;d1,385;;b1,0;;m0;;estring|array $key;;p">
</treenode>
<treenode node="createDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f8;92;2;97;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;222;2;259;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    createDatabase(string $dbName, bool $ifNotExists = false): bool&#10;&#10;Description&#10;     Create database&#10;&#10;Parameters:&#10;    string $dbName&#10;    boolean $ifNotExists - Whether to add IF NOT EXISTS condition;;d1,93;;b1,0;;m0;;estring $dbName;;pboolean $ifNotExists;;p">
</treenode>
<treenode node="createTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;504;2;554;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    createTable(string $table, bool $if_not_exists = false, array $attributes = [])&#10;&#10;Description&#10;     Create Table&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    boolean $if_not_exists - Whether to add IF NOT EXISTS condition&#10;    array $attributes - Associative array of table attributes;;d1,505;;b1,0;;m0;;estring $table;;pboolean $if_not_exists;;parray $attributes;;p">
</treenode>
<treenode node="databaseExists;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f9;271;2;284;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    databaseExists(string $dbName): bool&#10;&#10;Description&#10;     Determine if a database exists&#10;&#10;Parameters:&#10;    string $dbName;;d1,272;;b3,0;;m0;;estring $dbName;;p">
</treenode>
<treenode node="dropColumn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;822;2;836;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    dropColumn(string $table, $column_name)&#10;&#10;Description&#10;     Column Drop&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    string|array $column_name - Column name Array or comma separated;;d1,823;;b1,0;;m0;;estring $table;;pstring|array $column_name;;p">
</treenode>
<treenode node="dropDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f8;109;2;144;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;296;2;327;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    dropDatabase(string $dbName): bool&#10;&#10;Description&#10;     Drop database&#10;&#10;Parameters:&#10;    string $dbName;;d1,110;;b1,0;;m0;;estring $dbName;;p">
</treenode>
<treenode node="dropForeignKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Forge.php;f8;311;2;326;;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;474;2;490;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    dropForeignKey(string $table, string $foreignName): bool&#10;&#10;Description&#10;     Foreign Key Drop&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    string $foreignName - Foreign name;;d1,312;;b1,0;;m0;;estring $table;;pstring $foreignName;;p">
</treenode>
<treenode node="dropTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;644;2;685;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    dropTable(string $tableName, bool $ifExists = false, bool $cascade = false)&#10;&#10;Description&#10;     Drop Table&#10;&#10;Parameters:&#10;    string $tableName - Table name&#10;    boolean $ifExists - Whether to add an IF EXISTS condition&#10;    boolean $cascade - Whether to add an CASCADE condition;;d1,645;;b1,0;;m0;;estring $tableName;;pboolean $ifExists;;pboolean $cascade;;p">
</treenode>
<treenode node="getConnection;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;206;2;209;;;;vpos;;v;;aConnectionInterface;;r&#10;Definition&#10;    getConnection()&#10;&#10;Description&#10;     Provides access to the forge&apos;s current database connection.;;d1,207;;b1,0;;m0;;e">
</treenode>
<treenode node="modifyColumn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;849;2;888;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    modifyColumn(string $table, $field): bool&#10;&#10;Description&#10;     Column Modify&#10;&#10;Parameters:&#10;    string $table - Table name&#10;    string|array $field - Column definition;;d1,850;;b1,0;;m0;;estring $table;;pstring|array $field;;p">
</treenode>
<treenode node="renameTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;733;2;765;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    renameTable(string $table_name, string $new_table_name)&#10;&#10;Description&#10;     Rename Table&#10;&#10;Parameters:&#10;    string $table_name - Old table name&#10;    string $new_table_name - New table name;;d1,734;;b1,0;;m0;;estring $table_name;;pstring $new_table_name;;p">
</treenode>
<treenode node="reset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Forge.php;f8;1322;2;1325;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    reset()&#10;&#10;Description&#10;     Reset;;d1,1323;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Format;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\Format.php;f0;4;1;84;;;;vpos;;v;;aBaseConfig;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="getFormatter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Config\Format.php;f8;65;2;80;;;;vpos;;v;;a;;r&#10;Definition&#10;    getFormatter(string $mime)&#10;&#10;Description&#10;     A Factory method to return the appropriate formatter for the given mime type.&#10;&#10;Parameters:&#10;    string $mime;;d1,66;;b1,0;;m0;;estring $mime;;p">
</treenode>
</treenode>
<treenode node="FormatException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Format\Exceptions\FormatException.php;f0;4;1;21;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="forInvalidJSON;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Format\Exceptions\FormatException.php;f15;6;2;9;;;;vpos;;v;;a;;r;;d1,7;;b1,5;;m0;;eerror;;p">
</treenode>
<treenode node="forMissingExtension;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Format\Exceptions\FormatException.php;f15;16;2;19;;;;vpos;;v;;a;;r&#10;Definition&#10;    forMissingExtension()&#10;&#10;Description&#10;     This will never be thrown in travis-ci;;d1,17;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="FormatRules;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f0;46;1;399;;;;vpos;;v;;a;;r&#10;Definition&#10;    class FormatRules&#10;&#10;Description&#10;     Format validation Rules.;;d0,47;;b0,0;;m0;;e">
<treenode node="alpha;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;56;2;59;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    alpha(string $str = null): bool&#10;&#10;Description&#10;     Alpha&#10;&#10;Parameters:&#10;    string $str;;d1,57;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="alpha_dash;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;85;2;88;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    alpha_dash(string $str = null): bool&#10;&#10;Description&#10;     Alphanumeric with underscores and dashes&#10;&#10;Parameters:&#10;    string $str;;d1,86;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="alpha_numeric;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;113;2;116;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    alpha_numeric(string $str = null): bool&#10;&#10;Description&#10;     Alphanumeric&#10;&#10;Parameters:&#10;    string $str;;d1,114;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="alpha_numeric_punct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;101;2;104;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    alpha_numeric_punct($str)&#10;&#10;Description&#10;     Alphanumeric, spaces, and a limited set of punctuation characters. Accepted punctuation characters are: ~ tilde, ! exclamation, # number, $ dollar, % percent, &amp; ampersand, * asterisk, - dash, _ underscore, + plus, = equals, | vertical bar, : colon, . period ~ ! # $ % &amp; * - _ + = | : .&#10;&#10;Parameters:&#10;    string $str;;d1,102;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="alpha_numeric_space;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;125;2;128;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    alpha_numeric_space(string $str = null): bool&#10;&#10;Description&#10;     Alphanumeric w/ spaces&#10;&#10;Parameters:&#10;    string $str;;d1,126;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="alpha_space;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;68;2;76;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    alpha_space(string $value = null): bool&#10;&#10;Description&#10;     Alpha with spaces.&#10;&#10;Parameters:&#10;    string $value - Value&#10;&#10;Return:&#10;   True if alpha with spaces, else false;;d1,69;;b1,0;;m0;;estring $value;;p">
</treenode>
<treenode node="decimal;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;152;2;155;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    decimal(string $str = null): bool&#10;&#10;Description&#10;     Decimal number&#10;&#10;Parameters:&#10;    string $str;;d1,153;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="hex;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;164;2;167;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hex(string $str = null): bool&#10;&#10;Description&#10;     String of hexidecimal characters&#10;&#10;Parameters:&#10;    string $str;;d1,165;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="integer;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;176;2;179;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    integer(string $str = null): bool&#10;&#10;Description&#10;     Integer&#10;&#10;Parameters:&#10;    string $str;;d1,177;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="is_natural;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;187;2;190;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    is_natural(string $str = null): bool&#10;&#10;Description&#10;     Is a Natural number  (0,1,2,3, etc.)&#10;&#10;Parameters:&#10;    string $str;;d1,188;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="is_natural_no_zero;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;198;2;201;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    is_natural_no_zero(string $str = null): bool&#10;&#10;Description&#10;     Is a Natural number, but not a zero  (1,2,3, etc.)&#10;&#10;Parameters:&#10;    string $str;;d1,199;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="numeric;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;210;2;213;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    numeric(string $str = null): bool&#10;&#10;Description&#10;     Numeric&#10;&#10;Parameters:&#10;    string $str;;d1,211;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="regex_match;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;223;2;231;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    regex_match(string $str = null, string $pattern): bool&#10;&#10;Description&#10;     Compares value against a regular expression pattern.&#10;&#10;Parameters:&#10;    string $str&#10;    string $pattern;;d1,224;;b1,0;;m0;;estring $str;;pstring $pattern;;p">
</treenode>
<treenode node="string;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;140;2;143;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    string($str = null): bool&#10;&#10;Description&#10;     Any type of string&#10;&#10;Parameters:&#10;    string|null $str;;d1,141;;b1,0;;m0;;estring|null $str;;p">
</treenode>
<treenode node="timezone;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;243;2;246;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    timezone(string $str = null): bool&#10;&#10;Description&#10;     Validates that the string is a valid timezone as per the timezone_identifiers_list function.&#10;&#10;Parameters:&#10;    string $str;;d1,244;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="valid_base64;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;257;2;260;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    valid_base64(string $str = null): bool&#10;&#10;Description&#10;     Valid Base64&#10;&#10;Parameters:&#10;    string $str;;d1,258;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="valid_date;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;387;2;397;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    valid_date(string $str = null, string $format = null): bool&#10;&#10;Description&#10;     Checks for a valid date and matches a given date format&#10;&#10;Parameters:&#10;    string $str&#10;    string $format;;d1,388;;b1,0;;m0;;estring $str;;pstring $format;;p">
</treenode>
<treenode node="valid_email;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;282;2;290;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    valid_email(string $str = null): bool&#10;&#10;Description&#10;     Checks for a correctly formatted email address&#10;&#10;Parameters:&#10;    string $str;;d1,283;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="valid_emails;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;302;2;319;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    valid_emails(string $str = null): bool&#10;&#10;Description&#10;     Validate a comma-separated list of email addresses.&#10;&#10;Parameters:&#10;    string $str;;d1,303;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="valid_ip;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;329;2;349;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    valid_ip(string $ip = null, string $which = null): bool&#10;&#10;Description&#10;     Validate an IP address (human readable format or binary string - inet_pton)&#10;&#10;Parameters:&#10;    string $ip - IP Address&#10;    string $which - IP protocol: &apos;ipv4&apos; or &apos;ipv6&apos;;;d1,330;;b1,0;;m0;;estring $ip;;pstring $which;;p">
</treenode>
<treenode node="valid_json;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;269;2;273;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    valid_json(string $str = null): bool&#10;&#10;Description&#10;     Valid JSON&#10;&#10;Parameters:&#10;    string $str;;d1,270;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="valid_url;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\FormatRules.php;f8;358;2;377;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    valid_url(string $str = null): bool&#10;&#10;Description&#10;     Checks a URL to ensure it&apos;s formed correctly.&#10;&#10;Parameters:&#10;    string $str;;d1,359;;b1,0;;m0;;estring $str;;p">
</treenode>
</treenode>
<treenode node="FrameworkException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\FrameworkException.php;f0;11;1;37;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r&#10;Definition&#10;    class FrameworkException extends \RuntimeException implements ExceptionInterface&#10;&#10;Description&#10;     Class FrameworkException;;d0,12;;b0,0;;m0;;e">
<treenode node="forCopyError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\FrameworkException.php;f15;23;2;26;;;;vpos;;v;;a;;r;;d1,24;;b1,5;;m0;;epath;;p">
</treenode>
<treenode node="forEnabledZlibOutputCompression;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\FrameworkException.php;f15;13;2;16;;;;vpos;;v;;a;;r;;d1,14;;b1,5;;m0;;e">
</treenode>
<treenode node="forInvalidFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\FrameworkException.php;f15;18;2;21;;;;vpos;;v;;a;;r;;d1,19;;b1,5;;m0;;epath;;p">
</treenode>
<treenode node="forMissingExtension;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\FrameworkException.php;f15;28;2;31;;;;vpos;;v;;a;;r;;d1,29;;b1,5;;m0;;eextension;;p">
</treenode>
<treenode node="forNoHandlers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\FrameworkException.php;f15;33;2;36;;;;vpos;;v;;a;;r;;d1,34;;b1,5;;m0;;eclass;;p">
</treenode>
</treenode>
<treenode node="FsPathPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\FsPathPlugin.php;f0;31;1;71;;;;vpos;;v;;aPlugin;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\FsPathPlugin.php;f11;40;5;43;;;;vpos;;v;;a;;r;;d4,41;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\FsPathPlugin.php;f11;35;5;38;;;;vpos;;v;;a;;r;;d4,36;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\FsPathPlugin.php;f11;45;5;70;;;;vpos;;v;;a;;r;;d4,46;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="GDHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f0;45;1;619;;;;vpos;;v;;aBaseHandler;;c;;r&#10;Definition&#10;    class GDHandler extends BaseHandler&#10;&#10;Description&#10;     Image handler for GD package;;d0,46;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f8;54;2;65;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config = null)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \Config\Images|null $config;;d1,55;;b1,0;;m0;;e\Config\Images|null $config;;p">
</treenode>
<treenode node="_crop;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f8;200;2;203;;;;vpos;;v;;a;;r&#10;Definition&#10;    _crop()&#10;&#10;Description&#10;     Crops the image.;;d1,201;;b1,0;;m0;;e">
</treenode>
<treenode node="_flatten;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f8;111;2;138;;;;vpos;;v;;a;;r&#10;Definition&#10;    _flatten(int $red = 255, int $green = 255, int $blue = 255)&#10;&#10;Description&#10;     Flattens transparencies&#10;&#10;Parameters:&#10;    integer $red&#10;    integer $green&#10;    integer $blue;;d1,112;;b1,0;;m0;;einteger $red;;pinteger $green;;pinteger $blue;;p">
</treenode>
<treenode node="_flip;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f8;149;2;160;;;;vpos;;v;;a;;r&#10;Definition&#10;    _flip(string $direction)&#10;&#10;Description&#10;     Flips an image along it&apos;s vertical or horizontal axis.&#10;&#10;Parameters:&#10;    string $direction;;d1,150;;b1,0;;m0;;estring $direction;;p">
</treenode>
<treenode node="_getHeight;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f8;614;2;617;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    _getHeight()&#10;&#10;Description&#10;     Return image height.;;d1,615;;b1,0;;m0;;e">
</treenode>
<treenode node="_getWidth;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f8;604;2;607;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    _getWidth()&#10;&#10;Description&#10;     Return image width.;;d1,605;;b1,0;;m0;;e">
</treenode>
<treenode node="_resize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f8;188;2;191;;;;vpos;;v;;a;;r&#10;Definition&#10;    _resize()&#10;&#10;Description&#10;     Resizes the image.;;d1,189;;b1,0;;m0;;e">
</treenode>
<treenode node="_rotate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f11;77;2;98;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    _rotate(int $angle): bool&#10;&#10;Description&#10;     Handles the rotation of an image resource. Doesn&apos;t save the image, but replaces the current resource.&#10;&#10;Parameters:&#10;    integer $angle;;d1,78;;b2,0;;m0;;einteger $angle;;p">
</treenode>
<treenode node="_text;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f11;464;2;549;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    _text(string $text, array $options = [])&#10;&#10;Description&#10;     Add text overlay to an image.&#10;&#10;Parameters:&#10;    string $text&#10;    array $options;;d1,465;;b2,0;;m0;;estring $text;;parray $options;;p">
</treenode>
<treenode node="createImage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f11;370;2;388;;;;vpos;;v;;aresource;;r&#10;Definition&#10;    createImage(string $path = &apos;&apos;, string $imageType = &apos;&apos;)&#10;&#10;Description&#10;     Create Image Resource&#10;&#10;Parameters:&#10;    string $path&#10;    string $imageType&#10;&#10;Return:&#10;   |boolean;;d1,371;;b2,0;;m0;;estring $path;;pstring $imageType;;p">
</treenode>
<treenode node="ensureResource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f11;395;2;404;;;;vpos;;v;;a;;r&#10;Definition&#10;    ensureResource()&#10;&#10;Description&#10;     Make the image resource object if needed;;d1,396;;b2,0;;m0;;e">
</treenode>
<treenode node="getImageResource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f11;417;2;452;;;;vpos;;v;;aresource;;r&#10;Definition&#10;    getImageResource(string $path, int $imageType)&#10;&#10;Description&#10;     Check if image type is supported and return image resource&#10;&#10;Parameters:&#10;    string $path - Image path&#10;    integer $imageType - Image type&#10;&#10;Return:&#10;   |boolean;;d1,418;;b2,0;;m0;;estring $path;;pinteger $imageType;;p">
</treenode>
<treenode node="getVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f8;169;2;179;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getVersion()&#10;&#10;Description&#10;     Get GD version;;d1,170;;b1,0;;m0;;e">
</treenode>
<treenode node="process;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f11;214;2;260;;;;vpos;;v;;a;;r&#10;Definition&#10;    process(string $action)&#10;&#10;Description&#10;     Handles all of the grunt work of resizing, etc.&#10;&#10;Parameters:&#10;    string $action;;d1,215;;b2,0;;m0;;estring $action;;p">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f8;278;2;355;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    save(string $target = null, int $quality = 90): bool&#10;&#10;Description&#10;     Saves any changes that have been made to file. If no new filename is provided, the existing image is overwritten, otherwise a copy of the file is made at $target.&#10;&#10;Parameters:&#10;    string|null $target&#10;    integer $quality;;d1,279;;b1,0;;m0;;estring|null $target;;pinteger $quality;;p">
</treenode>
<treenode node="textOverlay;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\GDHandler.php;f11;562;2;595;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    textOverlay(string $text, array $options = [], bool $isShadow = false)&#10;&#10;Description&#10;     Handler-specific method for overlaying text on an image.&#10;&#10;Parameters:&#10;    string $text&#10;    array $options&#10;    boolean $isShadow - Whether we are drawing the dropshadow or actual text;;d1,563;;b2,0;;m0;;estring $text;;parray $options;;pboolean $isShadow;;p">
</treenode>
</treenode>
<treenode node="GroupFaker;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Test\Fakers\GroupFaker.php;f0;5;1;21;;;;vpos;;v;;aGroupModel;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="fake;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Test\Fakers\GroupFaker.php;f8;14;41;14;;;;vpos;;v;;aobject;;r&#10;Description&#10;     Faked data for Fabricator.&#10;&#10;Parameters:&#10;    Generator $faker;;d-1,-1;;b1,0;;m0;;eGenerator $faker;;p">
</treenode>
</treenode>
<treenode node="GroupModel;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f0;4;1;220;;;;vpos;;v;;aModel;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="addPermissionToGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f11;175;5;183;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    addPermissionToGroup(int $permissionId, int $groupId)&#10;&#10;Description&#10;     Add a single permission to a single group, by IDs.&#10;&#10;Parameters:&#10;     $permissionId&#10;     $groupId;;d4,176;;b1,0;;m0;;e $permissionId;;p $groupId;;p">
</treenode>
<treenode node="addUserToGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f11;35;5;46;;;;vpos;;v;;aobject;;r&#10;Definition&#10;    addUserToGroup(int $userId, int $groupId)&#10;&#10;Description&#10;     Adds a single user to a single group.&#10;&#10;Parameters:&#10;     $userId&#10;     $groupId;;d4,36;;b1,0;;m0;;e $userId;;p $groupId;;p">
</treenode>
<treenode node="getGroupsForUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f11;92;5;106;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getGroupsForUser(int $userId)&#10;&#10;Description&#10;     Returns an array of all groups that a user is a member of.&#10;&#10;Parameters:&#10;     $userId;;d4,93;;b1,0;;m0;;e $userId;;p">
</treenode>
<treenode node="getPermissionsForGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f11;149;5;165;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getPermissionsForGroup(int $groupId): array&#10;&#10;Description&#10;     Gets all permissions for a group in a way that can be easily used to check against:&#10;&#10;Parameters:&#10;    int $groupId;;d4,150;;b1,0;;m0;;eint $groupId;;p">
</treenode>
<treenode node="getUsersForGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f11;115;5;130;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getUsersForGroup(int $groupId)&#10;&#10;Description&#10;     Returns an array of all users that are members of a group.&#10;&#10;Parameters:&#10;     $groupId;;d4,116;;b1,0;;m0;;e $groupId;;p">
</treenode>
<treenode node="removePermissionFromAllGroups;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f11;214;5;219;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    removePermissionFromAllGroups(int $permissionId)&#10;&#10;Description&#10;     Removes a single permission from all groups.&#10;&#10;Parameters:&#10;     $permissionId;;d4,215;;b1,0;;m0;;e $permissionId;;p">
</treenode>
<treenode node="removePermissionFromGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f11;196;5;203;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    removePermissionFromGroup(int $permissionId, int $groupId)&#10;&#10;Description&#10;     Removes a single permission from a single group.&#10;&#10;Parameters:&#10;     $permissionId&#10;     $groupId;;d4,197;;b1,0;;m0;;e $permissionId;;p $groupId;;p">
</treenode>
<treenode node="removeUserFromAllGroups;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f11;75;5;83;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    removeUserFromAllGroups(int $userId)&#10;&#10;Description&#10;     Removes a single user from all groups.&#10;&#10;Parameters:&#10;     $userId;;d4,76;;b1,0;;m0;;e $userId;;p">
</treenode>
<treenode node="removeUserFromGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\GroupModel.php;f11;56;5;66;;;;vpos;;v;;abool;;r&#10;Definition&#10;    removeUserFromGroup(int $userId, $groupId)&#10;&#10;Description&#10;     Removes a single user from a single group.&#10;&#10;Parameters:&#10;     $userId&#10;     $groupId;;d4,57;;b1,0;;m0;;e $userId;;p $groupId;;p">
</treenode>
</treenode>
<treenode node="Header;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f0;47;1;238;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Header&#10;&#10;Description&#10;     Class Header;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f8;73;2;77;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(string $name, $value = null)&#10;&#10;Description&#10;     Header constructor. name is mandatory, if a value is provided, it will be set.&#10;&#10;Parameters:&#10;    string $name&#10;    string|array|null $value;;d1,74;;b1,0;;m0;;estring $name;;pstring|array|null $value;;p">
</treenode>
<treenode node="__toString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f8;232;2;235;;;;vpos;;v;;astring;;r&#10;Definition&#10;    __toString(): string&#10;&#10;Description&#10;     Returns a representation of the entire header string, including the header name and all values converted to the proper format.;;d1,233;;b1,0;;m0;;e">
</treenode>
<treenode node="appendValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f8;146;2;156;;;;vpos;;v;;a;;r&#10;Definition&#10;    appendValue($value = null)&#10;&#10;Description&#10;     Appends a value to the list of values for this header. If the header is a single value string, it will be converted to an array.&#10;&#10;Parameters:&#10;    null $value;;d1,147;;b1,0;;m0;;enull $value;;p">
</treenode>
<treenode node="getName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f8;86;2;89;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getName(): string&#10;&#10;Description&#10;     Returns the name of the header, in the same case it was set.;;d1,87;;b1,0;;m0;;e">
</treenode>
<treenode node="getValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f8;99;2;102;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getValue()&#10;&#10;Description&#10;     Gets the raw value of the header. This may return either a string of an array, depending on whether the header has multiple values or not.&#10;&#10;Return:&#10;   |null|string;;d1,100;;b1,0;;m0;;e">
</treenode>
<treenode node="getValueLine;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f8;191;2;222;;;;vpos;;v;;a;;r&#10;Definition&#10;    getValueLine(): string&#10;&#10;Description&#10;     Retrieves a comma-separated string of the values for a single header.;;d1,192;;b1,0;;m0;;e">
</treenode>
<treenode node="prependValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f8;168;2;178;;;;vpos;;v;;a;;r&#10;Definition&#10;    prependValue($value = null)&#10;&#10;Description&#10;     Prepends a value to the list of values for this header. If the header is a single value string, it will be converted to an array.&#10;&#10;Parameters:&#10;    null $value;;d1,169;;b1,0;;m0;;enull $value;;p">
</treenode>
<treenode node="setName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f8;113;2;118;;;;vpos;;v;;a;;r&#10;Definition&#10;    setName(string $name)&#10;&#10;Description&#10;     Sets the name of the header, overwriting any previous value.&#10;&#10;Parameters:&#10;    string $name;;d1,114;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="setValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Header.php;f8;129;2;134;;;;vpos;;v;;a;;r&#10;Definition&#10;    setValue($value = null)&#10;&#10;Description&#10;     Sets the value of the header, overwriting any previous value(s).&#10;&#10;Parameters:&#10;    null $value;;d1,130;;b1,0;;m0;;enull $value;;p">
</treenode>
</treenode>
<treenode node="Help;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Help.php;f0;51;1;120;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class Help extends BaseCommand&#10;&#10;Description&#10;     CI Help command for the spark script.;;d0,52;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Help.php;f8;106;2;118;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params)&#10;&#10;Description&#10;     Displays the help for the spark cli script itself.&#10;&#10;Parameters:&#10;    array $params;;d1,107;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="History;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\History.php;f0;44;1;182;;;;vpos;;v;;aBaseCollector;;c;;r&#10;Definition&#10;    class History extends BaseCollector&#10;&#10;Description&#10;     History collector;;d0,45;;b0,0;;m0;;e">
<treenode node="display;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\History.php;f8;142;2;145;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    display(): array&#10;&#10;Description&#10;     Returns the data of this collector to be formatted in the toolbar;;d1,143;;b1,0;;m0;;e">
</treenode>
<treenode node="getBadgeValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\History.php;f8;154;2;157;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getBadgeValue(): int&#10;&#10;Description&#10;     Displays the number of included files as a badge in the tab button.;;d1,155;;b1,0;;m0;;e">
</treenode>
<treenode node="icon;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\History.php;f8;178;2;181;;;;vpos;;v;;astring;;r&#10;Definition&#10;    icon(): string&#10;&#10;Description&#10;     Display the icon.;;d1,179;;b1,0;;m0;;e">
</treenode>
<treenode node="isEmpty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\History.php;f8;164;2;167;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isEmpty(): bool&#10;&#10;Description&#10;     Return true if there are no history files.;;d1,165;;b1,0;;m0;;e">
</treenode>
<treenode node="setFiles;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\History.php;f8;91;2;133;;;;vpos;;v;;a;;r&#10;Definition&#10;    setFiles(int $current, int $limit = 20)&#10;&#10;Description&#10;     Specify time limit &amp; file count for debug history.&#10;&#10;Parameters:&#10;    integer $current - Current history time&#10;    integer $limit - Max history files;;d1,92;;b1,0;;m0;;einteger $current;;pinteger $limit;;p">
</treenode>
</treenode>
<treenode node="Home;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Home.php;f0;2;1;12;;;;vpos;;v;;aBaseController;;c;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="index;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Home.php;f8;4;2;8;;;;vpos;;v;;a;;r;;d1,5;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Honeypot;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Honeypot.php;f0;48;1;137;;O:\xampp\htdocs\2020\blog-4\system\Filters\Honeypot.php;f0;49;1;85;;O:\xampp\htdocs\2020\blog-4\app\Config\Honeypot.php;f0;4;1;41;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Honeypot&#10;&#10;Description&#10;     class Honeypot;;d0,49;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Honeypot.php;f1;66;2;89;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(BaseConfig $config)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    BaseConfig $config;;d1,67;;b0,0;;m0;;eBaseConfig $config;;p">
</treenode>
<treenode node="after;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Honeypot.php;f8;79;2;83;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    after(RequestInterface $request, ResponseInterface $response, $arguments = null)&#10;&#10;Description&#10;     Attach a honeypot to the current response.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    \CodeIgniter\HTTP\ResponseInterface $response&#10;    array|null $arguments;;d1,80;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;p\CodeIgniter\HTTP\ResponseInterface $response;;parray|null $arguments;;p">
</treenode>
<treenode node="attachHoneypot;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Honeypot.php;f8;108;2;115;;;;vpos;;v;;a;;r&#10;Definition&#10;    attachHoneypot(ResponseInterface $response)&#10;&#10;Description&#10;     Attaches Honeypot template to response.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\ResponseInterface $response;;d1,109;;b1,0;;m0;;e\CodeIgniter\HTTP\ResponseInterface $response;;p">
</treenode>
<treenode node="before;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Filters\Honeypot.php;f8;61;2;68;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    before(RequestInterface $request, $arguments = null)&#10;&#10;Description&#10;     Checks if Honeypot field is empty;s if not then the requester is a bot&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    array|null $arguments;;d1,62;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;parray|null $arguments;;p">
</treenode>
<treenode node="hasContent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Honeypot.php;f8;98;2;101;;;;vpos;;v;;a;;r&#10;Definition&#10;    hasContent(RequestInterface $request)&#10;&#10;Description&#10;     Checks the request if honeypot field has data.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request;;d1,99;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;p">
</treenode>
<treenode node="prepareTemplate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Honeypot.php;f11;124;2;135;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prepareTemplate(string $template): string&#10;&#10;Description&#10;     Prepares the template by adding label content and field name.&#10;&#10;Parameters:&#10;    string $template;;d1,125;;b2,0;;m0;;estring $template;;p">
</treenode>
</treenode>
<treenode node="HoneypotException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Exceptions\HoneypotException.php;f0;5;1;27;;;;vpos;;v;;aConfigException;;cExceptionInterface;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="forNoHiddenValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Exceptions\HoneypotException.php;f15;17;2;20;;;;vpos;;v;;a;;r;;d1,18;;b1,5;;m0;;e">
</treenode>
<treenode node="forNoNameField;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Exceptions\HoneypotException.php;f15;12;2;15;;;;vpos;;v;;a;;r;;d1,13;;b1,5;;m0;;e">
</treenode>
<treenode node="forNoTemplate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Exceptions\HoneypotException.php;f15;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,5;;m0;;e">
</treenode>
<treenode node="isBot;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Honeypot\Exceptions\HoneypotException.php;f15;22;2;25;;;;vpos;;v;;a;;r;;d1,23;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="HTTPException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f0;46;1;263;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r&#10;Definition&#10;    class HTTPException extends FrameworkException implements ExceptionInterface&#10;&#10;Description&#10;     Things that can go wrong with HTTP;;d0,47;;b0,0;;m0;;e">
<treenode node="forAlreadyMoved;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;232;2;235;;;;vpos;;v;;a;;r&#10;Definition&#10;    forAlreadyMoved()&#10;&#10;Description&#10;     For Uploaded file move;;d1,233;;b1,5;;m0;;e">
</treenode>
<treenode node="forCurlError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;96;2;99;;;;vpos;;v;;a;;r&#10;Definition&#10;    forCurlError(string $errorNum, string $error)&#10;&#10;Description&#10;     For CurlRequest&#10;&#10;Parameters:&#10;    string $errorNum&#10;    string $error;;d1,97;;b1,5;;m0;;estring $errorNum;;pstring $error;;p">
</treenode>
<treenode node="forEmptySupportedNegotiations;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;130;2;133;;;;vpos;;v;;a;;r&#10;Definition&#10;    forEmptySupportedNegotiations()&#10;&#10;Description&#10;     For Negotiate;;d1,131;;b1,5;;m0;;e">
</treenode>
<treenode node="forInvalidFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;244;2;247;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidFile(string $path = null)&#10;&#10;Description&#10;     For Uploaded file move&#10;&#10;Parameters:&#10;    string|null $path;;d1,245;;b1,5;;m0;;estring|null $path;;p">
</treenode>
<treenode node="forInvalidHTTPProtocol;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;120;2;123;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidHTTPProtocol(string $protocols)&#10;&#10;Description&#10;     For Message&#10;&#10;Parameters:&#10;    string $protocols;;d1,121;;b1,5;;m0;;estring $protocols;;p">
</treenode>
<treenode node="forInvalidNegotiationType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;108;2;111;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidNegotiationType(string $type)&#10;&#10;Description&#10;     For IncomingRequest&#10;&#10;Parameters:&#10;    string $type;;d1,109;;b1,5;;m0;;estring $type;;p">
</treenode>
<treenode node="forInvalidPort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;212;2;215;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidPort(int $port)&#10;&#10;Description&#10;     For URI&#10;&#10;Parameters:&#10;    integer $port;;d1,213;;b1,5;;m0;;einteger $port;;p">
</treenode>
<treenode node="forInvalidRedirectRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;142;2;145;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidRedirectRoute(string $route)&#10;&#10;Description&#10;     For RedirectResponse&#10;&#10;Parameters:&#10;    string $route;;d1,143;;b1,5;;m0;;estring $route;;p">
</treenode>
<treenode node="forInvalidSSLKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;80;2;83;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidSSLKey(string $key)&#10;&#10;Description&#10;     For CurlRequest&#10;&#10;Parameters:&#10;    string $key;;d1,81;;b1,5;;m0;;estring $key;;p">
</treenode>
<treenode node="forInvalidStatusCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;164;2;167;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidStatusCode(int $code)&#10;&#10;Description&#10;     For Response&#10;&#10;Parameters:&#10;    integer $code;;d1,165;;b1,5;;m0;;einteger $code;;p">
</treenode>
<treenode node="forMalformedQueryString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;222;2;225;;;;vpos;;v;;a;;r&#10;Definition&#10;    forMalformedQueryString()&#10;&#10;Description&#10;     For URI;;d1,223;;b1,5;;m0;;e">
</treenode>
<treenode node="forMissingCurl;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;56;2;59;;;;vpos;;v;;a;;r&#10;Definition&#10;    forMissingCurl()&#10;&#10;Description&#10;     For CurlRequest;;d1,57;;b1,5;;m0;;e">
</treenode>
<treenode node="forMissingResponseStatus;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;152;2;155;;;;vpos;;v;;a;;r&#10;Definition&#10;    forMissingResponseStatus()&#10;&#10;Description&#10;     For Response;;d1,153;;b1,5;;m0;;e">
</treenode>
<treenode node="forMoveFailed;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;258;2;261;;;;vpos;;v;;a;;r&#10;Definition&#10;    forMoveFailed(string $source, string $target, string $error)&#10;&#10;Description&#10;     For Uploaded file move&#10;&#10;Parameters:&#10;    string $source&#10;    string $target&#10;    string $error;;d1,259;;b1,5;;m0;;estring $source;;pstring $target;;pstring $error;;p">
</treenode>
<treenode node="forSSLCertNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;68;2;71;;;;vpos;;v;;a;;r&#10;Definition&#10;    forSSLCertNotFound(string $cert)&#10;&#10;Description&#10;     For CurlRequest&#10;&#10;Parameters:&#10;    string $cert;;d1,69;;b1,5;;m0;;estring $cert;;p">
</treenode>
<treenode node="forUnableToParseURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;188;2;191;;;;vpos;;v;;a;;r&#10;Definition&#10;    forUnableToParseURI(string $uri)&#10;&#10;Description&#10;     For URI&#10;&#10;Parameters:&#10;    string $uri;;d1,189;;b1,5;;m0;;estring $uri;;p">
</treenode>
<treenode node="forUnkownStatusCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;176;2;179;;;;vpos;;v;;a;;r&#10;Definition&#10;    forUnkownStatusCode(int $code)&#10;&#10;Description&#10;     For Response&#10;&#10;Parameters:&#10;    integer $code;;d1,177;;b1,5;;m0;;einteger $code;;p">
</treenode>
<treenode node="forURISegmentOutOfRange;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Exceptions\HTTPException.php;f15;200;2;203;;;;vpos;;v;;a;;r&#10;Definition&#10;    forURISegmentOutOfRange(int $segment)&#10;&#10;Description&#10;     For URI&#10;&#10;Parameters:&#10;    integer $segment;;d1,201;;b1,5;;m0;;einteger $segment;;p">
</treenode>
</treenode>
<treenode node="I18nException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Exceptions\I18nException.php;f0;47;1;127;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r&#10;Definition&#10;    class I18nException extends FrameworkException implements ExceptionInterface&#10;&#10;Description&#10;     I18nException;;d0,48;;b0,0;;m0;;e">
<treenode node="forInvalidDay;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Exceptions\I18nException.php;f15;70;2;73;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    forInvalidDay(string $day)&#10;&#10;Description&#10;     Thrown when the supplied day falls outside the range of allowed days.&#10;&#10;Parameters:&#10;    string $day;;d1,71;;b1,5;;m0;;estring $day;;p">
</treenode>
<treenode node="forInvalidHour;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Exceptions\I18nException.php;f15;97;2;100;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    forInvalidHour(string $hour)&#10;&#10;Description&#10;     Thrown when the supplied hour falls outside the range of allowed hours.&#10;&#10;Parameters:&#10;    string $hour;;d1,98;;b1,5;;m0;;estring $hour;;p">
</treenode>
<treenode node="forInvalidMinutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Exceptions\I18nException.php;f15;110;2;113;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    forInvalidMinutes(string $minutes)&#10;&#10;Description&#10;     Thrown when the supplied minutes falls outside the range of allowed minutes.&#10;&#10;Parameters:&#10;    string $minutes;;d1,111;;b1,5;;m0;;estring $minutes;;p">
</treenode>
<treenode node="forInvalidMonth;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Exceptions\I18nException.php;f15;57;2;60;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    forInvalidMonth(string $month)&#10;&#10;Description&#10;     Thrown when the numeric representation of the month falls outside the range of allowed months.&#10;&#10;Parameters:&#10;    string $month;;d1,58;;b1,5;;m0;;estring $month;;p">
</treenode>
<treenode node="forInvalidOverDay;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Exceptions\I18nException.php;f15;84;2;87;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    forInvalidOverDay(string $lastDay, string $day)&#10;&#10;Description&#10;     Thrown when the day provided falls outside the allowed last day for the given month.&#10;&#10;Parameters:&#10;    string $lastDay&#10;    string $day;;d1,85;;b1,5;;m0;;estring $lastDay;;pstring $day;;p">
</treenode>
<treenode node="forInvalidSeconds;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Exceptions\I18nException.php;f15;123;2;126;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    forInvalidSeconds(string $seconds)&#10;&#10;Description&#10;     Thrown when the supplied seconds falls outside the range of allowed seconds.&#10;&#10;Parameters:&#10;    string $seconds;;d1,124;;b1,5;;m0;;estring $seconds;;p">
</treenode>
</treenode>
<treenode node="Image;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Images\Image.php;f0;47;1;174;;;;vpos;;v;;aFile;;c;;r&#10;Definition&#10;    class Image extends File&#10;&#10;Description&#10;     Encapsulation of an Image file;;d0,48;;b0,0;;m0;;e">
<treenode node="copy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Image.php;f8;98;2;122;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    copy(string $targetPath, string $targetName = null, int $perms = 0644): bool&#10;&#10;Description&#10;     Makes a copy of itself to the new location. If no filename is provided it will use the existing filename.&#10;&#10;Parameters:&#10;    string $targetPath - The directory to store the file in&#10;    string|null $targetName - The new name of the copied file&#10;    integer $perms - File permissions to be applied after copy;;d1,99;;b1,0;;m0;;estring $targetPath;;pstring|null $targetName;;pinteger $perms;;p">
</treenode>
<treenode node="getProperties;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Image.php;f8;135;2;171;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getProperties(bool $return = false)&#10;&#10;Description&#10;     Get image properties&#10;&#10;Parameters:&#10;    boolean $return&#10;&#10;Return:&#10;   |boolean;;d1,136;;b1,0;;m0;;eboolean $return;;p">
</treenode>
</treenode>
<treenode node="ImageException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f0;5;1;56;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="forEXIFUnsupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;32;2;35;;;;vpos;;v;;a;;r;;d1,33;;b1,5;;m0;;e">
</treenode>
<treenode node="forFileNotSupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;12;2;15;;;;vpos;;v;;a;;r;;d1,13;;b1,5;;m0;;e">
</treenode>
<treenode node="forImageProcessFailed;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;52;2;55;;;;vpos;;v;;a;;r;;d1,53;;b1,5;;m0;;e">
</treenode>
<treenode node="forInvalidDirection;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;22;2;25;;;;vpos;;v;;a;;r;;d1,23;;b1,5;;m0;;edir;;p">
</treenode>
<treenode node="forInvalidImageCreate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;37;2;40;;;;vpos;;v;;a;;r;;d1,38;;b1,5;;m0;;eextra;;p">
</treenode>
<treenode node="forInvalidImageLibraryPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;47;2;50;;;;vpos;;v;;a;;r;;d1,48;;b1,5;;m0;;epath;;p">
</treenode>
<treenode node="forInvalidPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;27;2;30;;;;vpos;;v;;a;;r;;d1,28;;b1,5;;m0;;e">
</treenode>
<treenode node="forMissingAngle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;17;2;20;;;;vpos;;v;;a;;r;;d1,18;;b1,5;;m0;;e">
</treenode>
<treenode node="forMissingImage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,5;;m0;;e">
</treenode>
<treenode node="forSaveFailed;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Exceptions\ImageException.php;f15;42;2;45;;;;vpos;;v;;a;;r;;d1,43;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="ImageMagickHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f0;56;1;562;;;;vpos;;v;;aBaseHandler;;c;;r&#10;Definition&#10;    class ImageMagickHandler extends BaseHandler&#10;&#10;Description&#10;     Class ImageMagickHandler;;d0,57;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;74;2;85;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config = null)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \Config\Images $config;;d1,75;;b1,0;;m0;;e\Config\Images $config;;p">
</treenode>
<treenode node="_crop;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;125;2;141;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    _crop()&#10;&#10;Description&#10;     Crops the image.&#10;&#10;Return:&#10;   |\CodeIgniter\Images\Handlers\ImageMagickHandler;;d1,126;;b1,0;;m0;;e">
</treenode>
<treenode node="_flatten;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;180;2;192;;;;vpos;;v;;a;;r&#10;Definition&#10;    _flatten(int $red = 255, int $green = 255, int $blue = 255)&#10;&#10;Description&#10;     Flattens transparencies, default white background&#10;&#10;Parameters:&#10;    integer $red&#10;    integer $green&#10;    integer $blue;;d1,181;;b1,0;;m0;;einteger $red;;pinteger $green;;pinteger $blue;;p">
</treenode>
<treenode node="_flip;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;204;2;216;;;;vpos;;v;;a;;r&#10;Definition&#10;    _flip(string $direction)&#10;&#10;Description&#10;     Flips an image along it&apos;s vertical or horizontal axis.&#10;&#10;Parameters:&#10;    string $direction;;d1,205;;b1,0;;m0;;estring $direction;;p">
</treenode>
<treenode node="_getHeight;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;518;2;521;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    _getHeight()&#10;&#10;Description&#10;     Return the height of an image.;;d1,519;;b1,0;;m0;;e">
</treenode>
<treenode node="_getWidth;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;508;2;511;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    _getWidth()&#10;&#10;Description&#10;     Return the width of an image.;;d1,509;;b1,0;;m0;;e">
</treenode>
<treenode node="_resize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;97;2;115;;;;vpos;;v;;aImageMagickHandler;;r&#10;Definition&#10;    _resize(bool $maintainRatio = false)&#10;&#10;Description&#10;     Handles the actual resizing of the image.&#10;&#10;Parameters:&#10;    boolean $maintainRatio;;d1,98;;b1,0;;m0;;eboolean $maintainRatio;;p">
</treenode>
<treenode node="_rotate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f11;154;2;166;;;;vpos;;v;;a;;r&#10;Definition&#10;    _rotate(int $angle)&#10;&#10;Description&#10;     Handles the rotation of an image resource. Doesn&apos;t save the image, but replaces the current resource.&#10;&#10;Parameters:&#10;    integer $angle;;d1,155;;b2,0;;m0;;einteger $angle;;p">
</treenode>
<treenode node="_text;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f11;408;2;499;;;;vpos;;v;;a;;r&#10;Definition&#10;    _text(string $text, array $options = [])&#10;&#10;Description&#10;     Handler-specific method for overlaying text on an image.&#10;&#10;Parameters:&#10;    string $text&#10;    array $options;;d1,409;;b2,0;;m0;;estring $text;;parray $options;;p">
</treenode>
<treenode node="ensureResource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f11;373;2;378;;;;vpos;;v;;a;;r&#10;Definition&#10;    ensureResource()&#10;&#10;Description&#10;     Make the image resource object if needed;;d1,374;;b2,0;;m0;;e">
</treenode>
<treenode node="getResourcePath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f11;349;2;364;;;;vpos;;v;;aresource;;r&#10;Definition&#10;    getResourcePath()&#10;&#10;Description&#10;     Get Image Resource&#10;&#10;Return:&#10;   |boolean;;d1,350;;b2,0;;m0;;e">
</treenode>
<treenode node="getVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;225;2;233;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getVersion(): string&#10;&#10;Description&#10;     Get driver version;;d1,226;;b1,0;;m0;;e">
</treenode>
<treenode node="process;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f11;246;2;281;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    process(string $action, int $quality = 100): array&#10;&#10;Description&#10;     Handles all of the grunt work of resizing, etc.&#10;&#10;Parameters:&#10;    string $action&#10;    integer $quality&#10;&#10;Return:&#10;   Lines of output from shell command;;d1,247;;b2,0;;m0;;estring $action;;pinteger $quality;;p">
</treenode>
<treenode node="reorient;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;535;2;561;;;;vpos;;v;;a;;r&#10;Definition&#10;    reorient(bool $silent = false)&#10;&#10;Description&#10;     Reads the EXIF information from the image and modifies the orientation so that displays correctly in the browser. This is especially an issue with images taken by smartphones who always store the image up-right, but set the orientation flag to display it correctly.&#10;&#10;Parameters:&#10;    boolean $silent - If true, will ignore exceptions when PHP doesn&apos;t support EXIF;;d1,536;;b1,0;;m0;;eboolean $silent;;p">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f8;299;2;330;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    save(string $target = null, int $quality = 90): bool&#10;&#10;Description&#10;     Saves any changes that have been made to file. If no new filename is provided, the existing image is overwritten, otherwise a copy of the file is made at $target.&#10;&#10;Parameters:&#10;    string|null $target&#10;    integer $quality;;d1,300;;b1,0;;m0;;estring|null $target;;pinteger $quality;;p">
</treenode>
<treenode node="supportedFormatCheck;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Images\Handlers\ImageMagickHandler.php;f11;385;2;396;;;;vpos;;v;;a;;r&#10;Definition&#10;    supportedFormatCheck()&#10;&#10;Description&#10;     Check if given image format is supported;;d1,386;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Images;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\Images.php;f0;4;1;30;;;;vpos;;v;;aBaseConfig;;c;;r;;d0,5;;b0,0;;m0;;e">
</treenode>
<treenode node="IncomingRequest;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f0;72;1;821;;;;vpos;;v;;aRequest;;c;;r&#10;Definition&#10;    class IncomingRequest extends Request&#10;&#10;Description&#10;     Class IncomingRequest;;d0,73;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;160;2;188;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config, URI $uri = null, $body = &apos;php://input&apos;, UserAgent $userAgent)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    object $config&#10;    \CodeIgniter\HTTP\URI $uri&#10;    string|null $body&#10;    \CodeIgniter\HTTP\UserAgent $userAgent;;d1,161;;b1,0;;m0;;eobject $config;;p\CodeIgniter\HTTP\URI $uri;;pstring|null $body;;p\CodeIgniter\HTTP\UserAgent $userAgent;;p">
</treenode>
<treenode node="detectLocale;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;198;2;208;;;;vpos;;v;;a;;r&#10;Definition&#10;    detectLocale($config)&#10;&#10;Description&#10;     Handles setting up the locale, perhaps auto-detecting through content negotiation.&#10;&#10;Parameters:&#10;     $config;;d1,199;;b1,0;;m0;;e $config;;p">
</treenode>
<treenode node="detectPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;642;2;664;;;;vpos;;v;;astring;;r&#10;Definition&#10;    detectPath(string $protocol = &apos;&apos;): string&#10;&#10;Description&#10;     Based on the URIProtocol Config setting, will attempt to detect the path portion of the current URI.&#10;&#10;Parameters:&#10;    string $protocol;;d1,643;;b1,0;;m0;;estring $protocol;;p">
</treenode>
<treenode node="detectURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f11;602;2;630;;;;vpos;;v;;a;;r&#10;Definition&#10;    detectURI(string $protocol, string $baseURL)&#10;&#10;Description&#10;     Sets up our URI object based on the information we have. This is either provided by the user in the baseURL Config setting, or determined from the environment as needed.&#10;&#10;Parameters:&#10;    string $protocol&#10;    string $baseURL;;d1,603;;b2,0;;m0;;estring $protocol;;pstring $baseURL;;p">
</treenode>
<treenode node="getCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;461;2;464;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCookie($index = null, $filter = null, $flags = null)&#10;&#10;Description&#10;     Fetch an item from the COOKIE array.&#10;&#10;Parameters:&#10;    string|array|null $index - Index for item to be fetched from $_COOKIE&#10;    integer|null $filter - A filter name to be applied&#10;    mixed $flags;;d1,462;;b1,0;;m0;;estring|array|null $index;;pinteger|null $filter;;pmixed $flags;;p">
</treenode>
<treenode node="getDefaultLocale;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;217;2;220;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDefaultLocale(): string&#10;&#10;Description&#10;     Returns the default locale as set in Config\App.php;;d1,218;;b1,0;;m0;;e">
</treenode>
<treenode node="getFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;582;2;590;;;;vpos;;v;;aUploadedFile;;r&#10;Definition&#10;    getFile(string $fileID)&#10;&#10;Description&#10;     Retrieves a single file by the name of the input field used to upload it.&#10;&#10;Parameters:&#10;    string $fileID&#10;&#10;Return:&#10;   |null;;d1,583;;b1,0;;m0;;estring $fileID;;p">
</treenode>
<treenode node="getFileMultiple;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;562;2;570;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFileMultiple(string $fileID)&#10;&#10;Description&#10;     Verify if a file exist, by the name of the input field used to upload it, in the collection of uploaded files and if is have been uploaded with multiple option.&#10;&#10;Parameters:&#10;    string $fileID&#10;&#10;Return:&#10;   |null;;d1,563;;b1,0;;m0;;estring $fileID;;p">
</treenode>
<treenode node="getFiles;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;542;2;550;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFiles(): array&#10;&#10;Description&#10;     Returns an array of all files that have been uploaded with this request. Each file is represented by an UploadedFile instance.;;d1,543;;b1,0;;m0;;e">
</treenode>
<treenode node="getGet;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;391;2;394;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getGet($index = null, $filter = null, $flags = null)&#10;&#10;Description&#10;     Fetch an item from GET data.&#10;&#10;Parameters:&#10;    string|array|null $index - Index for item to fetch from $_GET&#10;    integer|null $filter - A filter name to apply&#10;    mixed|null $flags;;d1,392;;b1,0;;m0;;estring|array|null $index;;pinteger|null $filter;;pmixed|null $flags;;p">
</treenode>
<treenode node="getGetPost;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;442;2;448;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getGetPost($index = null, $filter = null, $flags = null)&#10;&#10;Description&#10;     Fetch an item from GET data with fallback to POST.&#10;&#10;Parameters:&#10;    string|array|null $index - Index for item to be fetched from $_GET or $_POST&#10;    integer|null $filter - A filter name to apply&#10;    mixed $flags;;d1,443;;b1,0;;m0;;estring|array|null $index;;pinteger|null $filter;;pmixed $flags;;p">
</treenode>
<treenode node="getJSON;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;360;2;363;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getJSON(bool $assoc = false, int $depth = 512, int $options = 0)&#10;&#10;Description&#10;     A convenience method that grabs the raw input stream and decodes the JSON into an array.&#10;&#10;Parameters:&#10;    boolean $assoc - Whether to return objects as associative arrays&#10;    integer $depth - How many levels deep to decode&#10;    integer $options - Bitmask of options;;d1,361;;b1,0;;m0;;eboolean $assoc;;pinteger $depth;;pinteger $options;;p">
</treenode>
<treenode node="getLocale;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;230;2;233;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getLocale(): string&#10;&#10;Description&#10;     Gets the current locale, with a fallback to the default locale if none is set.;;d1,231;;b1,0;;m0;;e">
</treenode>
<treenode node="getOldInput;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;489;2;534;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getOldInput(string $key)&#10;&#10;Description&#10;     Attempts to get old Input data that has been flashed to the session with redirect_with_input(). It first checks for the data in the old POST data, then the old GET data and finally check for dot arrays&#10;&#10;Parameters:&#10;    string $key;;d1,490;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getPost;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;407;2;410;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getPost($index = null, $filter = null, $flags = null)&#10;&#10;Description&#10;     Fetch an item from POST.&#10;&#10;Parameters:&#10;    string|array|null $index - Index for item to fetch from $_POST&#10;    integer|null $filter - A filter name to apply&#10;    mixed $flags;;d1,408;;b1,0;;m0;;estring|array|null $index;;pinteger|null $filter;;pmixed $flags;;p">
</treenode>
<treenode node="getPostGet;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;423;2;429;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getPostGet($index = null, $filter = null, $flags = null)&#10;&#10;Description&#10;     Fetch an item from POST data with fallback to GET.&#10;&#10;Parameters:&#10;    string|array|null $index - Index for item to fetch from $_POST or $_GET&#10;    integer|null $filter - A filter name to apply&#10;    mixed $flags;;d1,424;;b1,0;;m0;;estring|array|null $index;;pinteger|null $filter;;pmixed $flags;;p">
</treenode>
<treenode node="getRawInput;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;373;2;378;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getRawInput()&#10;&#10;Description&#10;     A convenience method that grabs the raw input stream(send method in PUT, PATCH, DELETE) and decodes the String into an array.;;d1,374;;b1,0;;m0;;e">
</treenode>
<treenode node="getUserAgent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;473;2;476;;;;vpos;;v;;a;;r&#10;Definition&#10;    getUserAgent()&#10;&#10;Description&#10;     Fetch the user agent string;;d1,474;;b1,0;;m0;;e">
</treenode>
<treenode node="getVar;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;338;2;341;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getVar($index = null, $filter = null, $flags = null)&#10;&#10;Description&#10;     Fetch an item from the $_REQUEST object. This is the simplest way to grab data from the request object and can be used in lieu of the other get* methods in most cases.&#10;&#10;Parameters:&#10;    string|array|null $index&#10;    integer|null $filter - Filter constant&#10;    mixed $flags;;d1,339;;b1,0;;m0;;estring|array|null $index;;pinteger|null $filter;;pmixed $flags;;p">
</treenode>
<treenode node="isAJAX;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;294;2;297;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isAJAX(): bool&#10;&#10;Description&#10;     Test to see if a request contains the HTTP_X_REQUESTED_WITH header.;;d1,295;;b1,0;;m0;;e">
</treenode>
<treenode node="isCLI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;282;2;285;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isCLI(): bool&#10;&#10;Description&#10;     Determines if this request was made from the command line (CLI).;;d1,283;;b1,0;;m0;;e">
</treenode>
<treenode node="isSecure;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;307;2;323;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isSecure(): bool&#10;&#10;Description&#10;     Attempts to detect if the current connection is secure through a few different methods.;;d1,308;;b1,0;;m0;;e">
</treenode>
<treenode node="negotiate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;678;2;698;;;;vpos;;v;;astring;;r&#10;Definition&#10;    negotiate(string $type, array $supported, bool $strictMatch = false): string&#10;&#10;Description&#10;     Provides a convenient way to work with the Negotiate class for content negotiation.&#10;&#10;Parameters:&#10;    string $type&#10;    array $supported&#10;    boolean $strictMatch;;d1,679;;b1,0;;m0;;estring $type;;parray $supported;;pboolean $strictMatch;;p">
</treenode>
<treenode node="parseQueryString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f11;773;2;791;;;;vpos;;v;;astring;;r&#10;Definition&#10;    parseQueryString(): string&#10;&#10;Description&#10;     Parse QUERY_STRING;;d1,774;;b2,0;;m0;;e">
</treenode>
<treenode node="parseRequestURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f11;708;2;762;;;;vpos;;v;;astring;;r&#10;Definition&#10;    parseRequestURI(): string&#10;&#10;Description&#10;     Will parse the REQUEST_URI and automatically detect the URI from it, fixing the query string if necessary.&#10;&#10;Return:&#10;   The URI it found;;d1,709;;b2,0;;m0;;e">
</treenode>
<treenode node="removeRelativeDirectory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f11;804;2;818;;;;vpos;;v;;astring;;r&#10;Definition&#10;    removeRelativeDirectory(string $uri): string&#10;&#10;Description&#10;     Remove relative directory (../) and multi slashes (///)&#10;&#10;Parameters:&#10;    string $uri;;d1,805;;b2,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="setLocale;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\IncomingRequest.php;f8;244;2;273;;;;vpos;;v;;aIncomingRequest;;r&#10;Definition&#10;    setLocale(string $locale)&#10;&#10;Description&#10;     Sets the locale string for this request.&#10;&#10;Parameters:&#10;    string $locale;;d1,245;;b1,0;;m0;;estring $locale;;p">
</treenode>
</treenode>
<treenode node="InstanceObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\InstanceObject.php;f0;27;1;77;;;;vpos;;v;;aBasicObject;;c;;r;;d0,28;;b0,0;;m0;;e">
<treenode node="getType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\InstanceObject.php;f11;36;5;39;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;e">
</treenode>
<treenode node="sortByHierarchy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\InstanceObject.php;f18;53;5;76;;;;vpos;;v;;a;;r;;d4,54;;b1,5;;m0;;ea;;pb;;p">
</treenode>
<treenode node="transplant;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\InstanceObject.php;f11;41;5;51;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m0;;eold;;p">
</treenode>
</treenode>
<treenode node="InvalidArgumentException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\InvalidArgumentException.php;f0;4;1;6;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Exception\InvalidArgumentException.php;f0;13;1;16;;;;vpos;;v;;aInvalidArgumentException;;c;;r;;d0,5;;b0,0;;m0;;e">
</treenode>
<treenode node="Iterator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Iterator.php;f0;43;1;178;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Iterator&#10;&#10;Description&#10;     Iterator for debugging.;;d0,44;;b0,0;;m0;;e">
<treenode node="add;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Iterator.php;f8;73;2;80;;;;vpos;;v;;a;;r&#10;Definition&#10;    add(string $name, \Closure $closure)&#10;&#10;Description&#10;     Adds a test to run.&#10;&#10;Parameters:&#10;    string $name&#10;    \Closure $closure;;d1,74;;b1,0;;m0;;estring $name;;p\Closure $closure;;p">
</treenode>
<treenode node="getReport;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Iterator.php;f8;135;2;174;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getReport(): string&#10;&#10;Description&#10;     Get results.;;d1,136;;b1,0;;m0;;e">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Iterator.php;f8;94;2;126;;;;vpos;;v;;astring;;r&#10;Definition&#10;    run(int $iterations = 1000, bool $output = true)&#10;&#10;Description&#10;     Runs through all of the tests that have been added, recording time to execute the desired number of iterations, and the approximate memory usage used during those iterations.&#10;&#10;Parameters:&#10;    integer $iterations&#10;    boolean $output&#10;&#10;Return:&#10;   |null;;d1,95;;b1,0;;m0;;einteger $iterations;;pboolean $output;;p">
</treenode>
</treenode>
<treenode node="IteratorPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\IteratorPlugin.php;f0;31;1;109;;;;vpos;;v;;aPlugin;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\IteratorPlugin.php;f11;55;5;58;;;;vpos;;v;;a;;r;;d4,56;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\IteratorPlugin.php;f11;50;5;53;;;;vpos;;v;;a;;r;;d4,51;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\IteratorPlugin.php;f11;60;5;108;;;;vpos;;v;;a;;r;;d4,61;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="JSONFormatter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Format\JSONFormatter.php;f0;47;1;77;;;;vpos;;v;;aFormatterInterface;;c;;r&#10;Definition&#10;    class JSONFormatter implements FormatterInterface&#10;&#10;Description&#10;     JSON data formatter;;d0,48;;b0,0;;m0;;e">
<treenode node="format;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Format\JSONFormatter.php;f8;57;2;74;;;;vpos;;v;;astring;;r&#10;Definition&#10;    format($data)&#10;&#10;Description&#10;     Takes the given data and formats it.&#10;&#10;Parameters:&#10;     $data&#10;&#10;Return:&#10;   |boolean (JSON string | false);;d1,58;;b1,0;;m0;;e $data;;p">
</treenode>
</treenode>
<treenode node="JsonPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\JsonPlugin.php;f0;30;1;72;;;;vpos;;v;;aPlugin;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\JsonPlugin.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\JsonPlugin.php;f11;32;5;35;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\JsonPlugin.php;f11;42;5;71;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="Kint;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f0;34;1;755;;O:\xampp\htdocs\2020\blog-4\app\Config\Kint.php;f0;5;1;61;;;;vpos;;v;;a;;r;;d0,35;;b0,0;;m0;;e">
<treenode node="MODE_CLI;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f9;38;18;38;;;;vpos;;v;;a;;r&apos;c&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="MODE_PLAIN;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f9;39;20;39;;;;vpos;;v;;a;;r&apos;p&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="MODE_RICH;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f9;36;19;36;;;;vpos;;v;;a;;r&apos;r&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="MODE_TEXT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f9;37;19;37;;;;vpos;;v;;a;;r&apos;t&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f11;171;5;175;;;;vpos;;v;;a;;r;;d4,172;;b1,0;;m0;;ep;;pr;;p">
</treenode>
<treenode node="createFromStatics;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f18;320;5;348;;;;vpos;;v;;anull;;r&#10;Definition&#10;    createFromStatics(array $statics)&#10;&#10;Description&#10;     Creates a Kint instances based on static settings.&#10;&#10;Parameters:&#10;    array $statics - array of statics as returned by getStatics&#10;&#10;Return:&#10;   |\Kint\Kint;;d4,321;;b1,5;;m0;;earray $statics;;p">
</treenode>
<treenode node="dump;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f18;551;5;628;;;;vpos;;v;;aint;;r&#10;Definition&#10;    dump()&#10;&#10;Description&#10;     Dumps some data.&#10;&#10;Return:&#10;   |string;;d4,552;;b1,5;;m0;;e">
</treenode>
<treenode node="dumpAll;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f11;248;5;270;;;;vpos;;v;;astring;;r&#10;Definition&#10;    dumpAll(array $vars, array $base)&#10;&#10;Description&#10;     Renders a list of vars including the pre and post renders.&#10;&#10;Parameters:&#10;    array $vars - Data to dump&#10;    BasicObject[] $base - Base objects;;d4,249;;b1,0;;m0;;earray $vars;;pBasicObject[] $base;;p">
</treenode>
<treenode node="dumpVar;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f11;280;5;285;;;;vpos;;v;;astring;;r&#10;Definition&#10;    dumpVar(&amp;$var, BasicObject $base)&#10;&#10;Description&#10;     Dumps and renders a var.&#10;&#10;Parameters:&#10;    mixed $var - Data to dump&#10;    BasicObject $base - Base object;;d4,281;;b1,0;;m0;;emixed $var;;pBasicObject $base;;p">
</treenode>
<treenode node="getBasesFromParamInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f18;358;5;408;;;;vpos;;v;;aBasicObject;;r&#10;Definition&#10;    getBasesFromParamInfo(array $params, $argc)&#10;&#10;Description&#10;     Creates base objects given parameter info.&#10;&#10;Parameters:&#10;    array $params - Parameters as returned from getCallInfo&#10;    int $argc - Number of arguments the helper was called with&#10;&#10;Return:&#10;   [] Base objects for the arguments;;d4,359;;b1,5;;m0;;earray $params;;pint $argc;;p">
</treenode>
<treenode node="getCallInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f18;421;5;473;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getCallInfo(array $aliases, array $trace, $argc)&#10;&#10;Description&#10;     Gets call info from the backtrace, alias, and argument count.&#10;&#10;Parameters:&#10;    array $aliases - Call aliases as found in Kint::$aliases&#10;    array[] $trace - Backtrace&#10;    int $argc - Number of arguments&#10;&#10;Return:&#10;   {params:null|array, modifiers:array, callee:null|array, caller:null|array, trace:array[]} Call info;;d4,422;;b1,5;;m0;;earray $aliases;;parray[] $trace;;pint $argc;;p">
</treenode>
<treenode node="getIdeLink;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f18;676;5;679;;;;vpos;;v;;a;;r;;d4,677;;b1,5;;m0;;efile;;pline;;p">
</treenode>
<treenode node="getParser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f11;182;5;185;;;;vpos;;v;;a;;r;;d4,183;;b1,0;;m0;;e">
</treenode>
<treenode node="getRenderer;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f11;192;5;195;;;;vpos;;v;;a;;r;;d4,193;;b1,0;;m0;;e">
</treenode>
<treenode node="getSingleCall;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f21;689;5;754;;;;vpos;;v;;anull;;r&#10;Definition&#10;    getSingleCall(array $frame, $argc)&#10;&#10;Description&#10;     Returns specific function call info from a stack trace frame, or null if no match could be found.&#10;&#10;Parameters:&#10;    array $frame - The stack trace frame in question&#10;    int $argc - The amount of arguments received&#10;&#10;Return:&#10;   |array{parameters:array, modifiers:array} params and modifiers, or null if a specific call could not be determined;;d4,690;;b2,5;;m0;;earray $frame;;pint $argc;;p">
</treenode>
<treenode node="getStatics;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f18;292;5;309;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getStatics()&#10;&#10;Description&#10;     Gets all static settings at once.&#10;&#10;Return:&#10;   Current static settings;;d4,293;;b1,5;;m0;;e">
</treenode>
<treenode node="setParser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f11;177;5;180;;;;vpos;;v;;a;;r;;d4,178;;b1,0;;m0;;ep;;p">
</treenode>
<treenode node="setRenderer;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f11;187;5;190;;;;vpos;;v;;a;;r;;d4,188;;b1,0;;m0;;er;;p">
</treenode>
<treenode node="setStatesFromCallInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f11;229;5;238;;;;vpos;;v;;a;;r;;d4,230;;b1,0;;m0;;einfo;;p">
</treenode>
<treenode node="setStatesFromStatics;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f11;197;5;227;;;;vpos;;v;;a;;r;;d4,198;;b1,0;;m0;;estatics;;p">
</treenode>
<treenode node="shortenPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f18;638;5;674;;;;vpos;;v;;astring;;r&#10;Definition&#10;    shortenPath($file)&#10;&#10;Description&#10;     generic path display callback, can be configured in app_root_dirs;s purpose is to show relevant path info and hide as much of the path as possible.&#10;&#10;Parameters:&#10;    string $file;;d4,639;;b1,5;;m0;;estring $file;;p">
</treenode>
<treenode node="trace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Kint.php;f18;482;5;542;;;;vpos;;v;;aint;;r&#10;Definition&#10;    trace()&#10;&#10;Description&#10;     Dumps a backtrace.&#10;&#10;Return:&#10;   |string;;d4,483;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="Language;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f0;49;1;368;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Language&#10;&#10;Description&#10;     Handle system messages and localization.;;d0,50;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f8;86;2;94;;;;vpos;;v;;a;;r;;d1,87;;b1,0;;m0;;elocale;;p">
</treenode>
<treenode node="formatMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f11;258;2;275;;;;vpos;;v;;astring;;r&#10;Definition&#10;    formatMessage($message, array $args = [])&#10;&#10;Description&#10;     Advanced message formatting.&#10;&#10;Parameters:&#10;    string|array $message - Message&#10;    array $args - Arguments&#10;&#10;Return:&#10;   |array Returns formatted message;;d1,259;;b2,0;;m0;;estring|array $message;;parray $args;;p">
</treenode>
<treenode node="getLine;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f8;136;2;183;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getLine(string $line, array $args = [])&#10;&#10;Description&#10;     Parses the language string for a file, loads the file, if necessary, getting the line.&#10;&#10;Parameters:&#10;    string $line - Line&#10;    array $args - Arguments&#10;&#10;Return:&#10;   |string[] Returns line;;d1,137;;b1,0;;m0;;estring $line;;parray $args;;p">
</treenode>
<treenode node="getLocale;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f8;120;2;123;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getLocale(): string&#10;&#10;Description&#10;     ;;d1,121;;b1,0;;m0;;e">
</treenode>
<treenode node="getTranslationOutput;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f9;190;2;221;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getTranslationOutput(string $locale, string $file, string $parsedLine)&#10;&#10;Description&#10;      |string|null&#10;&#10;Return:&#10;   |string|null;;d1,191;;b3,0;;m0;;elocale;;pfile;;pparsedLine;;p">
</treenode>
<treenode node="load;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f11;290;2;326;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    load(string $file, string $locale, bool $return = false)&#10;&#10;Description&#10;     Loads a language file in the current locale. If $return is true, will return the file&apos;s contents, otherwise will merge with the existing language lines.&#10;&#10;Parameters:&#10;    string $file&#10;    string $locale&#10;    boolean $return&#10;&#10;Return:&#10;   |null;;d1,291;;b2,0;;m0;;estring $file;;pstring $locale;;pboolean $return;;p">
</treenode>
<treenode node="parseLine;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f11;232;2;246;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    parseLine(string $line, string $locale): array&#10;&#10;Description&#10;     Parses the language string which should include the filename as the first segment (separated by period).&#10;&#10;Parameters:&#10;    string $line&#10;    string $locale;;d1,233;;b2,0;;m0;;estring $line;;pstring $locale;;p">
</treenode>
<treenode node="requireFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f11;338;2;365;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    requireFile(string $path): array&#10;&#10;Description&#10;     A simple method for including files that can be overridden during testing.&#10;&#10;Parameters:&#10;    string $path;;d1,339;;b2,0;;m0;;estring $path;;p">
</treenode>
<treenode node="setLocale;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Language\Language.php;f8;105;2;113;;;;vpos;;v;;a;;r&#10;Definition&#10;    setLocale(string $locale = null)&#10;&#10;Description&#10;     Sets the current locale to use when performing string lookups.&#10;&#10;Parameters:&#10;    string $locale;;d1,106;;b1,0;;m0;;estring $locale;;p">
</treenode>
</treenode>
<treenode node="ListCommands;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\ListCommands.php;f0;52;1;195;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class ListCommands extends BaseCommand&#10;&#10;Description&#10;     CI Help command for the spark script.;;d0,53;;b0,0;;m0;;e">
<treenode node="describeCommands;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\ListCommands.php;f11;129;2;171;;;;vpos;;v;;a;;r&#10;Definition&#10;    describeCommands(array $commands = [])&#10;&#10;Description&#10;     Displays the commands on the CLI.&#10;&#10;Parameters:&#10;    array $commands;;d1,130;;b2,0;;m0;;earray $commands;;p">
</treenode>
<treenode node="padTitle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\ListCommands.php;f11;185;2;192;;;;vpos;;v;;astring;;r&#10;Definition&#10;    padTitle(string $item, int $max, int $extra = 2, int $indent = 0): string&#10;&#10;Description&#10;     Pads our string out so that all titles are the same length to nicely line up descriptions.&#10;&#10;Parameters:&#10;    string $item&#10;    integer $max&#10;    integer $extra - // How many extra spaces to add at the end&#10;    integer $indent;;d1,186;;b2,0;;m0;;estring $item;;pinteger $max;;pinteger $extra;;pinteger $indent;;p">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\ListCommands.php;f8;113;2;120;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params)&#10;&#10;Description&#10;     Displays the help for the spark cli script itself.&#10;&#10;Parameters:&#10;    array $params;;d1,114;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="ListGroups;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\ListGroups.php;f0;5;1;32;;;;vpos;;v;;aBaseCommand;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\ListGroups.php;f11;12;2;31;;;;vpos;;v;;a;;r;;d4,13;;b1,0;;m0;;eparams;;p">
</treenode>
</treenode>
<treenode node="LocalAuthenticator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\LocalAuthenticator.php;f0;7;1;189;;;;vpos;;v;;aAuthenticationBase;;cAuthenticatorInterface;;c;;r;;d0,8;;b0,0;;m0;;e">
<treenode node="attempt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\LocalAuthenticator.php;f11;17;5;60;;;;vpos;;v;;abool;;r&#10;Definition&#10;    attempt(array $credentials, bool $remember = null): bool&#10;&#10;Description&#10;     Attempts to validate the credentials and log a user in.&#10;&#10;Parameters:&#10;    array $credentials&#10;    bool $remember - Should we remember the user (if enabled);;d4,18;;b1,0;;m0;;earray $credentials;;pbool $remember;;p">
</treenode>
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\LocalAuthenticator.php;f11;67;5;119;;;;vpos;;v;;abool;;r&#10;Definition&#10;    check(): bool&#10;&#10;Description&#10;     Checks to see if the user is logged in or not.;;d4,68;;b1,0;;m0;;e">
</treenode>
<treenode node="validate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\LocalAuthenticator.php;f11;130;5;187;;;;vpos;;v;;abool;;r&#10;Definition&#10;    validate(array $credentials, bool $returnUser=false)&#10;&#10;Description&#10;     Checks the user&apos;s credentials to see if they could authenticate. Unlike `attempt()`, will not log the user into the system.&#10;&#10;Parameters:&#10;    array $credentials&#10;    bool $returnUser&#10;&#10;Return:&#10;   |User;;d4,131;;b1,0;;m0;;earray $credentials;;pbool $returnUser;;p">
</treenode>
</treenode>
<treenode node="LogException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Log\Exceptions\LogException.php;f0;5;1;12;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="forInvalidLogLevel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Exceptions\LogException.php;f15;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,5;;m0;;elevel;;p">
</treenode>
</treenode>
<treenode node="Logger;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f0;58;1;540;;O:\xampp\htdocs\2020\blog-4\app\Config\Logger.php;f0;4;1;131;;;;vpos;;v;;aLoggerInterface;;c;;r&#10;Definition&#10;    class Logger implements LoggerInterface&#10;&#10;Description&#10;     The CodeIgntier Logger;;d0,59;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;148;2;182;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config, bool $debug = CI_DEBUG)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \Config\Logger $config&#10;    boolean $debug;;d1,149;;b1,0;;m0;;e\Config\Logger $config;;pboolean $debug;;p">
</treenode>
<treenode node="alert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;212;2;215;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    alert($message, array $context = []): bool&#10;&#10;Description&#10;     Action must be taken immediately.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d1,213;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="cleanFileNames;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f11;531;2;537;;;;vpos;;v;;astring;;r&#10;Definition&#10;    cleanFileNames(string $file): string&#10;&#10;Description&#10;     Cleans the paths of filenames by replacing APPPATH, SYSTEMPATH, FCPATH with the actual var. i.e.&#10;&#10;Parameters:&#10;     $file;;d1,532;;b2,0;;m0;;e $file;;p">
</treenode>
<treenode node="critical;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;229;2;232;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    critical($message, array $context = []): bool&#10;&#10;Description&#10;     Critical conditions.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d1,230;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="debug;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;310;2;313;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    debug($message, array $context = []): bool&#10;&#10;Description&#10;     Detailed debug information.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d1,311;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="determineFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;476;2;515;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    determineFile(): array&#10;&#10;Description&#10;     Determines the file and line that the logging call was made from by analyzing the backtrace. Find the earliest stack frame that is part of our logging system.;;d1,477;;b1,0;;m0;;e">
</treenode>
<treenode node="emergency;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;194;2;197;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    emergency($message, array $context = []): bool&#10;&#10;Description&#10;     System is unusable.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d1,195;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;245;2;248;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    error($message, array $context = []): bool&#10;&#10;Description&#10;     Runtime errors that do not require immediate action but should typically be logged and monitored.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d1,246;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="info;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;295;2;298;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    info($message, array $context = []): bool&#10;&#10;Description&#10;     Interesting events.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d1,296;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="interpolate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f11;408;2;467;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    interpolate($message, array $context = [])&#10;&#10;Description&#10;     Replaces any placeholders in the message with variables from the context, as well as a few special items like:&#10;&#10;Parameters:&#10;    mixed $message&#10;    array $context;;d1,409;;b2,0;;m0;;emixed $message;;parray $context;;p">
</treenode>
<treenode node="log;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;326;2;387;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    log($level, $message, array $context = []): bool&#10;&#10;Description&#10;     Logs with an arbitrary level.&#10;&#10;Parameters:&#10;    mixed $level&#10;    string $message&#10;    array $context;;d1,327;;b1,0;;m0;;emixed $level;;pstring $message;;parray $context;;p">
</treenode>
<treenode node="notice;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;278;2;281;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    notice($message, array $context = []): bool&#10;&#10;Description&#10;     Normal but significant events.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d1,279;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="warning;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Log\Logger.php;f8;263;2;266;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    warning($message, array $context = []): bool&#10;&#10;Description&#10;     Exceptional occurrences that are not errors.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d1,264;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
</treenode>
<treenode node="LoggerAwareTrait;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerAwareTrait.php;f0;7;1;21;;;;vpos;;v;;a;;r&#10;Definition&#10;    trait LoggerAwareTrait&#10;&#10;Description&#10;     Basic Implementation of LoggerAwareInterface.;;d0,8;;b0,0;;m0;;e">
<treenode node="setLogger;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerAwareTrait.php;f11;17;5;20;;;;vpos;;v;;a;;r&#10;Definition&#10;    setLogger(LoggerInterface $logger)&#10;&#10;Description&#10;     Sets a logger.&#10;&#10;Parameters:&#10;    LoggerInterface $logger;;d4,18;;b1,0;;m0;;eLoggerInterface $logger;;p">
</treenode>
</treenode>
<treenode node="LoggerTrait;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f0;12;1;130;;;;vpos;;v;;a;;r&#10;Definition&#10;    trait LoggerTrait&#10;&#10;Description&#10;     This is a simple Logger trait that classes unable to extend AbstractLogger (because they extend another class, etc) can include.;;d0,13;;b0,0;;m0;;e">
<treenode node="alert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f11;36;5;39;;;;vpos;;v;;anull;;r&#10;Definition&#10;    alert($message, array $context = [])&#10;&#10;Description&#10;     Action must be taken immediately.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,37;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="critical;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f11;50;5;53;;;;vpos;;v;;anull;;r&#10;Definition&#10;    critical($message, array $context = [])&#10;&#10;Description&#10;     Critical conditions.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,51;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="debug;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f11;116;5;119;;;;vpos;;v;;anull;;r&#10;Definition&#10;    debug($message, array $context = [])&#10;&#10;Description&#10;     Detailed debug information.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,117;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="emergency;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f11;21;5;24;;;;vpos;;v;;anull;;r&#10;Definition&#10;    emergency($message, array $context = [])&#10;&#10;Description&#10;     System is unusable.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,22;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f11;63;5;66;;;;vpos;;v;;anull;;r&#10;Definition&#10;    error($message, array $context = [])&#10;&#10;Description&#10;     Runtime errors that do not require immediate action but should typically be logged and monitored.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,64;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="info;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f11;104;5;107;;;;vpos;;v;;anull;;r&#10;Definition&#10;    info($message, array $context = [])&#10;&#10;Description&#10;     Interesting events.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,105;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="log;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f20;129;71;129;;;;vpos;;v;;anull;;r&#10;Description&#10;     Logs with an arbitrary level.&#10;&#10;Parameters:&#10;    mixed $level&#10;    string $message&#10;    array $context;;d-1,-1;;b1,0;;m0;;emixed $level;;pstring $message;;parray $context;;p">
</treenode>
<treenode node="notice;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f11;90;5;93;;;;vpos;;v;;anull;;r&#10;Definition&#10;    notice($message, array $context = [])&#10;&#10;Description&#10;     Normal but significant events.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,91;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
<treenode node="warning;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LoggerTrait.php;f11;78;5;81;;;;vpos;;v;;anull;;r&#10;Definition&#10;    warning($message, array $context = [])&#10;&#10;Description&#10;     Exceptional occurrences that are not errors.&#10;&#10;Parameters:&#10;    string $message&#10;    array $context;;d4,79;;b1,0;;m0;;estring $message;;parray $context;;p">
</treenode>
</treenode>
<treenode node="LoginFilter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Filters\LoginFilter.php;f0;7;1;71;;;;vpos;;v;;aFilterInterface;;c;;r;;d0,8;;b0,0;;m0;;e">
<treenode node="after;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Filters\LoginFilter.php;f8;65;2;68;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    after(RequestInterface $request, ResponseInterface $response, $arguments = null)&#10;&#10;Description&#10;     Allows After filters to inspect and modify the response object as needed. This method does not allow any way to stop execution of other after filters, short of throwing an Exception or Error.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    \CodeIgniter\HTTP\ResponseInterface $response&#10;    array|null $arguments;;d1,66;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;p\CodeIgniter\HTTP\ResponseInterface $response;;parray|null $arguments;;p">
</treenode>
<treenode node="before;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Filters\LoginFilter.php;f8;24;2;49;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    before(RequestInterface $request, $params = null)&#10;&#10;Description&#10;     Do whatever processing this filter needs to do. By default it should not return anything during normal execution. However, when an abnormal state is found, it should return an instance of CodeIgniter\HTTP\Response. If it does, script execution will end and that Response will be sent back to the client, allowing for error pages, redirects, etc.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    array|null $params;;d1,25;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;parray|null $params;;p">
</treenode>
</treenode>
<treenode node="LoginModel;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\LoginModel.php;f0;4;1;110;;;;vpos;;v;;aModel;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="getRememberToken;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\LoginModel.php;f11;56;5;62;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getRememberToken(string $selector)&#10;&#10;Description&#10;     Returns the remember-me token info for a given selector.&#10;&#10;Parameters:&#10;    string $selector;;d4,57;;b1,0;;m0;;estring $selector;;p">
</treenode>
<treenode node="purgeOldRememberTokens;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\LoginModel.php;f11;97;5;109;;;;vpos;;v;;a;;r&#10;Definition&#10;    purgeOldRememberTokens()&#10;&#10;Description&#10;     Purges the &apos;auth_tokens&apos; table of any records that are past their expiration date already.;;d4,98;;b1,0;;m0;;e">
</treenode>
<treenode node="purgeRememberTokens;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\LoginModel.php;f11;88;5;91;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    purgeRememberTokens(int $id)&#10;&#10;Description&#10;     Removes all persistent login tokens (RememberMe) for a single user across all devices they may have logged in with.&#10;&#10;Parameters:&#10;    int $id;;d4,89;;b1,0;;m0;;eint $id;;p">
</treenode>
<treenode node="rememberUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\LoginModel.php;f11;37;5;47;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    rememberUser(int $userID, string $selector, string $validator, string $expires)&#10;&#10;Description&#10;     Stores a remember-me token for the user.&#10;&#10;Parameters:&#10;    int $userID&#10;    string $selector&#10;    string $validator&#10;    string $expires;;d4,38;;b1,0;;m0;;eint $userID;;pstring $selector;;pstring $validator;;pstring $expires;;p">
</treenode>
<treenode node="updateRememberValidator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\LoginModel.php;f11;72;5;77;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    updateRememberValidator(string $selector, string $validator)&#10;&#10;Description&#10;     Updates the validator for a given selector.&#10;&#10;Parameters:&#10;    string $selector&#10;    string $validator;;d4,73;;b1,0;;m0;;estring $selector;;pstring $validator;;p">
</treenode>
</treenode>
<treenode node="LogLevel;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LogLevel.php;f0;7;1;17;;;;vpos;;v;;a;;r&#10;Definition&#10;    class LogLevel&#10;&#10;Description&#10;     Describes log levels;;d0,8;;b0,0;;m0;;e">
<treenode node="ALERT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LogLevel.php;f9;10;15;10;;;;vpos;;v;;a;;r&apos;alert&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="CRITICAL;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LogLevel.php;f9;11;18;11;;;;vpos;;v;;a;;r&apos;critical&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="DEBUG;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LogLevel.php;f9;16;15;16;;;;vpos;;v;;a;;r&apos;debug&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="EMERGENCY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LogLevel.php;f9;9;19;9;;;;vpos;;v;;a;;r&apos;emergency&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="ERROR;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LogLevel.php;f9;12;15;12;;;;vpos;;v;;a;;r&apos;error&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="INFO;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LogLevel.php;f9;15;14;15;;;;vpos;;v;;a;;r&apos;info&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="NOTICE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LogLevel.php;f9;14;16;14;;;;vpos;;v;;a;;r&apos;notice&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="WARNING;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\LogLevel.php;f9;13;17;13;;;;vpos;;v;;a;;r&apos;warning&apos;;;d-1,-1;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Logs;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Logs.php;f0;46;1;138;;;;vpos;;v;;aBaseCollector;;c;;r&#10;Definition&#10;    class Logs extends BaseCollector&#10;&#10;Description&#10;     Loags collector;;d0,47;;b0,0;;m0;;e">
<treenode node="collectLogs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Logs.php;f11;127;2;135;;;;vpos;;v;;a;;r&#10;Definition&#10;    collectLogs()&#10;&#10;Description&#10;     Ensures the data has been collected.;;d1,128;;b2,0;;m0;;e">
</treenode>
<treenode node="display;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Logs.php;f8;87;2;92;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    display(): array&#10;&#10;Description&#10;     Returns the data of this collector to be formatted in the toolbar;;d1,88;;b1,0;;m0;;e">
</treenode>
<treenode node="icon;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Logs.php;f8;117;2;120;;;;vpos;;v;;astring;;r&#10;Definition&#10;    icon(): string&#10;&#10;Description&#10;     Display the icon.;;d1,118;;b1,0;;m0;;e">
</treenode>
<treenode node="isEmpty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Logs.php;f8;101;2;106;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isEmpty(): bool&#10;&#10;Description&#10;     Does this collector actually have any data to display?;;d1,102;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="MemcachedHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f0;46;1;404;;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f0;46;1;387;;;;vpos;;v;;aBaseHandler;;cSessionHandlerInterface;;c;;r&#10;Definition&#10;    class MemcachedHandler extends BaseHandler implements \SessionHandlerInterface&#10;&#10;Description&#10;     Session handler using Memcache for persistence;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f8;86;2;106;;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;82;2;90;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(BaseConfig $config, string $ipAddress)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    BaseConfig $config&#10;    string $ipAddress;;d1,87;;b1,0;;m0;;eBaseConfig $config;;pstring $ipAddress;;p">
</treenode>
<treenode node="__destruct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;97;2;107;;;;vpos;;v;;a;;r&#10;Definition&#10;    __destruct()&#10;&#10;Description&#10;     Class destructor;;d1,98;;b1,0;;m0;;e">
</treenode>
<treenode node="clean;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;325;2;328;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    clean()&#10;&#10;Description&#10;     Will delete all items in the entire cache.;;d1,326;;b1,0;;m0;;e">
</treenode>
<treenode node="close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f8;261;2;278;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    close(): bool&#10;&#10;Description&#10;     Close;;d1,262;;b1,0;;m0;;e">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;305;2;316;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    decrement(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic decrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,306;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;266;2;271;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    delete(string $key)&#10;&#10;Description&#10;     Deletes a specific item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,267;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="destroy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f8;291;2;301;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    destroy($session_id): bool&#10;&#10;Description&#10;     Destroy&#10;&#10;Parameters:&#10;    string $session_id - Session ID;;d1,292;;b1,0;;m0;;estring $session_id;;p">
</treenode>
<treenode node="gc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f8;314;2;318;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    gc($maxlifetime): bool&#10;&#10;Description&#10;     Garbage Collector&#10;&#10;Parameters:&#10;    integer $maxlifetime - Maximum lifetime of sessions;;d1,315;;b1,0;;m0;;einteger $maxlifetime;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;191;2;218;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get(string $key)&#10;&#10;Description&#10;     Attempts to fetch an item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,192;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getCacheInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;340;2;343;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCacheInfo()&#10;&#10;Description&#10;     Returns information on the entire cache.;;d1,341;;b1,0;;m0;;e">
</treenode>
<treenode node="getMetaData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;354;2;373;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getMetaData(string $key)&#10;&#10;Description&#10;     Returns detailed information about the specific item in the cache.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,355;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;283;2;293;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    increment(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic incrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,284;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;114;2;180;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Takes care of any handler-specific setup that must be done.;;d1,115;;b1,0;;m0;;e">
</treenode>
<treenode node="isSupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;382;2;385;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isSupported(): bool&#10;&#10;Description&#10;     Determines if the driver is supported on this system.;;d1,383;;b1,0;;m0;;e">
</treenode>
<treenode node="lockSession;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f11;331;2;372;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    lockSession(string $sessionID): bool&#10;&#10;Description&#10;     Get lock&#10;&#10;Parameters:&#10;    string $sessionID - Session ID;;d1,332;;b2,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="open;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f8;120;2;168;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    open($save_path, $name): bool&#10;&#10;Description&#10;     Open&#10;&#10;Parameters:&#10;    string $save_path - Server path(s)&#10;    string $name - Session cookie name, unused;;d1,121;;b1,0;;m0;;estring $save_path;;pstring $name;;p">
</treenode>
<treenode node="read;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f8;181;2;198;;;;vpos;;v;;astring;;r&#10;Definition&#10;    read($sessionID): string&#10;&#10;Description&#10;     Read&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;&#10;Return:&#10;   Serialized session data;;d1,182;;b1,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="releaseLock;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f11;383;2;401;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    releaseLock(): bool&#10;&#10;Description&#10;     Release lock;;d1,384;;b2,0;;m0;;e">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\MemcachedHandler.php;f8;231;2;255;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    save(string $key, $value, int $ttl = 60)&#10;&#10;Description&#10;     Saves an item to the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name&#10;    mixed $value - The data to save&#10;    integer $ttl - Time To Live, in seconds (default 60);;d1,232;;b1,0;;m0;;estring $key;;pmixed $value;;pinteger $ttl;;p">
</treenode>
<treenode node="write;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\MemcachedHandler.php;f8;212;2;250;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    write($sessionID, $sessionData): bool&#10;&#10;Description&#10;     Write&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;    string $sessionData - Serialized session data;;d1,213;;b1,0;;m0;;estring $sessionID;;pstring $sessionData;;p">
</treenode>
</treenode>
<treenode node="Menus;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Menus.php;f0;2;1;15;;;;vpos;;v;;aBaseController;;c;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="index;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Menus.php;f8;4;2;8;;;;vpos;;v;;a;;r;;d1,5;;b1,0;;m0;;e">
</treenode>
<treenode node="new;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Menus.php;f8;9;2;12;;;;vpos;;v;;a;;r;;d1,10;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Message;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f0;46;1;401;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Message&#10;&#10;Description&#10;     An HTTP message;;d0,47;;b0,0;;m0;;e">
<treenode node="appendBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;130;2;135;;;;vpos;;v;;aMessage;;r&#10;Definition&#10;    appendBody($data)&#10;&#10;Description&#10;     Appends data to the body of the current message.&#10;&#10;Parameters:&#10;     $data&#10;&#10;Return:&#10;   |Response;;d1,131;;b1,0;;m0;;e $data;;p">
</treenode>
<treenode node="appendHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;314;2;323;;;;vpos;;v;;aMessage;;r&#10;Definition&#10;    appendHeader(string $name, string $value)&#10;&#10;Description&#10;     Adds an additional header value to any headers that accept multiple values (i.e. are an array or implement ArrayAccess)&#10;&#10;Parameters:&#10;    string $name&#10;    string $value;;d1,315;;b1,0;;m0;;estring $name;;pstring $value;;p">
</treenode>
<treenode node="getBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;100;2;103;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getBody()&#10;&#10;Description&#10;     Returns the Message&apos;s body.;;d1,101;;b1,0;;m0;;e">
</treenode>
<treenode node="getHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;200;2;210;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getHeader(string $name)&#10;&#10;Description&#10;     Returns a single header object. If multiple headers with the same name exist, then will return an array of header objects.&#10;&#10;Parameters:&#10;    string $name&#10;&#10;Return:&#10;   |\CodeIgniter\HTTP\Header;;d1,201;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="getHeaderLine;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;245;2;255;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getHeaderLine(string $name): string&#10;&#10;Description&#10;     Retrieves a comma-separated string of the values for a single header.&#10;&#10;Parameters:&#10;    string $name;;d1,246;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="getHeaderName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f11;393;2;398;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getHeaderName(string $name): string&#10;&#10;Description&#10;     Takes a header name in any case, and returns the normal-case version of the header.&#10;&#10;Parameters:&#10;    string $name;;d1,394;;b2,0;;m0;;estring $name;;p">
</treenode>
<treenode node="getHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;177;2;188;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getHeaders(): array&#10;&#10;Description&#10;     Returns an array containing all headers.&#10;&#10;Return:&#10;   An array of the request headers;;d1,178;;b1,0;;m0;;e">
</treenode>
<treenode node="getProtocolVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;352;2;355;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getProtocolVersion(): string&#10;&#10;Description&#10;     Returns the HTTP Protocol Version.;;d1,353;;b1,0;;m0;;e">
</treenode>
<treenode node="hasHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;221;2;226;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasHeader(string $name): bool&#10;&#10;Description&#10;     Determines whether a header exists.&#10;&#10;Parameters:&#10;    string $name;;d1,222;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="populateHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;145;2;168;;;;vpos;;v;;a;;r&#10;Definition&#10;    populateHeaders()&#10;&#10;Description&#10;     Populates the $headers array with any headers the getServer knows about.;;d1,146;;b1,0;;m0;;e">
</treenode>
<treenode node="prependHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;336;2;343;;;;vpos;;v;;aMessage;;r&#10;Definition&#10;    prependHeader(string $name, string $value)&#10;&#10;Description&#10;     Adds an additional header value to any headers that accept multiple values (i.e. are an array or implement ArrayAccess)&#10;&#10;Parameters:&#10;    string $name&#10;    string $value;;d1,337;;b1,0;;m0;;estring $name;;pstring $value;;p">
</treenode>
<treenode node="removeHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;293;2;301;;;;vpos;;v;;aMessage;;r&#10;Definition&#10;    removeHeader(string $name)&#10;&#10;Description&#10;     Removes a header from the list of headers we track.&#10;&#10;Parameters:&#10;    string $name;;d1,294;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="setBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;114;2;119;;;;vpos;;v;;aMessage;;r&#10;Definition&#10;    setBody($data)&#10;&#10;Description&#10;     Sets the body of the current message.&#10;&#10;Parameters:&#10;    mixed $data&#10;&#10;Return:&#10;   |Response;;d1,115;;b1,0;;m0;;emixed $data;;p">
</treenode>
<treenode node="setHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;267;2;282;;;;vpos;;v;;aMessage;;r&#10;Definition&#10;    setHeader(string $name, $value)&#10;&#10;Description&#10;     Sets a header and it&apos;s value.&#10;&#10;Parameters:&#10;    string $name&#10;    array|null|string $value&#10;&#10;Return:&#10;   |Response;;d1,268;;b1,0;;m0;;estring $name;;parray|null|string $value;;p">
</treenode>
<treenode node="setProtocolVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Message.php;f8;366;2;381;;;;vpos;;v;;aMessage;;r&#10;Definition&#10;    setProtocolVersion(string $version)&#10;&#10;Description&#10;     Sets the HTTP protocol version.&#10;&#10;Parameters:&#10;    string $version;;d1,367;;b1,0;;m0;;estring $version;;p">
</treenode>
</treenode>
<treenode node="MethodObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\MethodObject.php;f0;32;1;252;;;;vpos;;v;;aBasicObject;;c;;r;;d0,33;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\MethodObject.php;f11;50;5;100;;;;vpos;;v;;a;;r;;d4,51;;b1,0;;m0;;emethod;;p">
</treenode>
<treenode node="getAccessPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\MethodObject.php;f11;194;5;203;;;;vpos;;v;;a;;r;;d4,195;;b1,0;;m0;;e">
</treenode>
<treenode node="getModifiers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\MethodObject.php;f11;172;5;192;;;;vpos;;v;;a;;r;;d4,173;;b1,0;;m0;;e">
</treenode>
<treenode node="getParams;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\MethodObject.php;f11;205;5;230;;;;vpos;;v;;a;;r;;d4,206;;b1,0;;m0;;e">
</treenode>
<treenode node="getPhpDocUrl;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\MethodObject.php;f11;232;5;251;;;;vpos;;v;;a;;r;;d4,233;;b1,0;;m0;;e">
</treenode>
<treenode node="getValueShort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\MethodObject.php;f11;143;5;170;;;;vpos;;v;;a;;r;;d4,144;;b1,0;;m0;;e">
</treenode>
<treenode node="setAccessPathFrom;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\MethodObject.php;f11;102;5;141;;;;vpos;;v;;a;;r;;d4,103;;b1,0;;m0;;eparent;;p">
</treenode>
</treenode>
<treenode node="MicrotimePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\MicrotimePlugin.php;f0;34;1;127;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\MicrotimePlugin.php;f0;31;1;67;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\MicrotimePlugin.php;f0;30;1;104;;;;vpos;;v;;aPlugin;;c;;r;;d0,35;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\MicrotimePlugin.php;f11;38;5;45;;;;vpos;;v;;a;;r;;d4,39;;b1,0;;m0;;er;;p">
</treenode>
<treenode node="clean;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\MicrotimePlugin.php;f18;97;5;103;;;;vpos;;v;;a;;r;;d4,98;;b1,5;;m0;;e">
</treenode>
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\MicrotimePlugin.php;f11;42;5;45;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\MicrotimePlugin.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\MicrotimePlugin.php;f11;47;5;95;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\MicrotimePlugin.php;f11;47;5;121;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderJs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\MicrotimePlugin.php;f18;123;5;126;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\MicrotimePlugin.php;f18;63;5;66;;;;vpos;;v;;a;;r;;d4,124;;b1,5;;m0;;e">
</treenode>
<treenode node="renderTab;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\MicrotimePlugin.php;f11;33;5;61;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;er;;p">
</treenode>
</treenode>
<treenode node="MicrotimeRepresentation;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\MicrotimeRepresentation.php;f0;29;1;70;;;;vpos;;v;;aRepresentation;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\MicrotimeRepresentation.php;f11;44;5;64;;;;vpos;;v;;a;;r;;d4,45;;b1,0;;m0;;eseconds;;pmicroseconds;;pgroup;;plap;;ptotal;;pi;;p">
</treenode>
<treenode node="getDateTime;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\MicrotimeRepresentation.php;f11;66;5;69;;;;vpos;;v;;a;;r;;d4,67;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Migrate;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\Migrate.php;f0;50;1;166;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class Migrate extends BaseCommand&#10;&#10;Description&#10;     Runs all new migrations.;;d0,51;;b0,0;;m0;;e">
<treenode node="isAllNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\Migrate.php;f9;156;2;164;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isAllNamespace(array $params): bool&#10;&#10;Description&#10;     To migrate all namespaces to the latest migration&#10;&#10;Parameters:&#10;    array $params;;d1,157;;b3,0;;m0;;earray $params;;p">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\Migrate.php;f8;104;2;144;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params = [])&#10;&#10;Description&#10;     Ensures that all migrations have been run.&#10;&#10;Parameters:&#10;    array $params;;d1,105;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="MigrateRefresh;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\MigrateRefresh.php;f0;50;1;126;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class MigrateRefresh extends BaseCommand&#10;&#10;Description&#10;     Does a rollback followed by a latest to refresh the current state of the database.;;d0,51;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\MigrateRefresh.php;f8;107;2;124;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params = [])&#10;&#10;Description&#10;     Does a rollback followed by a latest to refresh the current state of the database.&#10;&#10;Parameters:&#10;    array $params;;d1,108;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="MigrateRollback;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\MigrateRollback.php;f0;51;1;150;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class MigrateRollback extends BaseCommand&#10;&#10;Description&#10;     Runs all of the migrations in reverse order, until they have all been un-applied.;;d0,52;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\MigrateRollback.php;f8;107;2;149;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params = [])&#10;&#10;Description&#10;     Runs all of the migrations in reverse order, until they have all been un-applied.&#10;&#10;Parameters:&#10;    array $params;;d1,108;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="MigrateStatus;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\MigrateStatus.php;f0;50;1;191;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class MigrateStatus extends BaseCommand&#10;&#10;Description&#10;     Displays a list of all migrations and whether they&apos;ve been run or not.;;d0,51;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\MigrateStatus.php;f8;118;2;189;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params = [])&#10;&#10;Description&#10;     Displays a list of all migrations and whether they&apos;ve been run or not.&#10;&#10;Parameters:&#10;    array $params;;d1,119;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="Migration;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\Migration.php;f9;44;1;109;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Migration&#10;&#10;Description&#10;     Class Migration;;d0,45;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Migration.php;f8;75;2;80;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(Forge $forge = null)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \CodeIgniter\Database\Forge $forge;;d1,76;;b1,0;;m0;;e\CodeIgniter\Database\Forge $forge;;p">
</treenode>
<treenode node="down;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Migration.php;f17;106;32;106;;;;vpos;;v;;a;;r&#10;Description&#10;     Revert a migration step.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="getDBGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Migration.php;f8;89;30;89;;;;vpos;;v;;astring;;r&#10;Description&#10;     Returns the database group name this migration uses.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="up;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Migration.php;f17;99;30;99;;;;vpos;;v;;a;;r&#10;Description&#10;     Perform a migration step.;;d-1,-1;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="MigrationRunner;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f0;48;1;1063;;;;vpos;;v;;a;;r&#10;Definition&#10;    class MigrationRunner&#10;&#10;Description&#10;     Class MigrationRunner;;d0,49;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;160;2;176;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(BaseConfig $config, $db = null)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    BaseConfig $config&#10;    \CodeIgniter\Database\ConnectionInterface|array|string $db;;d1,161;;b1,0;;m0;;eBaseConfig $config;;p\CodeIgniter\Database\ConnectionInterface|array|string $db;;p">
</treenode>
<treenode node="addHistory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f11;745;2;762;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    addHistory($migration, int $batch)&#10;&#10;Description&#10;     Add a history to the table.&#10;&#10;Parameters:&#10;    object $migration&#10;    integer $batch;;d1,746;;b2,0;;m0;;eobject $migration;;pinteger $batch;;p">
</treenode>
<treenode node="clearCliMessages;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;712;2;717;;;;vpos;;v;;aMigrationRunner;;r&#10;Definition&#10;    clearCliMessages()&#10;&#10;Description&#10;     Clears any CLI messages.;;d1,713;;b1,0;;m0;;e">
</treenode>
<treenode node="clearHistory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;726;2;733;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    clearHistory()&#10;&#10;Description&#10;     Truncates the history table.;;d1,727;;b1,0;;m0;;e">
</treenode>
<treenode node="ensureTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;942;2;994;;;;vpos;;v;;a;;r&#10;Definition&#10;    ensureTable()&#10;&#10;Description&#10;     Ensures that we have created our migrations table in the database.;;d1,943;;b1,0;;m0;;e">
</treenode>
<treenode node="findMigrations;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;471;2;490;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    findMigrations(): array&#10;&#10;Description&#10;     Retrieves list of available migration scripts&#10;&#10;Return:&#10;   List of all located migrations by their UID;;d1,472;;b1,0;;m0;;e">
</treenode>
<treenode node="findNamespaceMigrations;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;501;2;534;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    findNamespaceMigrations(string $namespace): array&#10;&#10;Description&#10;     Retrieves a list of available migration scripts for one namespace&#10;&#10;Parameters:&#10;    string $namespace - The namespace to search for migrations&#10;&#10;Return:&#10;   List of unsorted migrations from the namespace;;d1,502;;b1,0;;m0;;estring $namespace;;p">
</treenode>
<treenode node="force;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;388;2;462;;;;vpos;;v;;a;;r&#10;Definition&#10;    force(string $path, string $namespace, string $group = null)&#10;&#10;Description&#10;     Migrate a single file regardless of order or batches. Method &quot;up&quot; or &quot;down&quot; determined by presence in history. NOTE: This is not recommended and provided mostly for testing.&#10;&#10;Parameters:&#10;    string $path - Full path to a valid migration file&#10;    string $path - Namespace of the target migration&#10;    string|null $group;;d1,389;;b1,0;;m0;;estring $path;;pstring $path;;pstring|null $group;;p">
</treenode>
<treenode node="getBatchEnd;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;917;2;934;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getBatchEnd(int $batch): string&#10;&#10;Description&#10;     Returns the version number of the last migration for a batch. Mostly just for tests.&#10;&#10;Parameters:&#10;    integer $batch;;d1,918;;b1,0;;m0;;einteger $batch;;p">
</treenode>
<treenode node="getBatches;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;841;2;853;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getBatches(): array&#10;&#10;Description&#10;     Returns all the batches from the database history in order;;d1,842;;b1,0;;m0;;e">
</treenode>
<treenode node="getBatchHistory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;822;2;832;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getBatchHistory(int $batch, $order = &apos;asc&apos;): array&#10;&#10;Description&#10;     Returns the migration history for a single batch.&#10;&#10;Parameters:&#10;    integer $batch;;d1,823;;b1,0;;m0;;ebatch;;porder;;p">
</treenode>
<treenode node="getBatchStart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;888;2;905;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getBatchStart(int $batch): string&#10;&#10;Description&#10;     Returns the version number of the first migration for a batch. Mostly just for tests.&#10;&#10;Parameters:&#10;    integer $batch;;d1,889;;b1,0;;m0;;einteger $batch;;p">
</treenode>
<treenode node="getCliMessages;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;700;2;703;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getCliMessages(): array&#10;&#10;Description&#10;     Retrieves messages formatted for CLI output&#10;&#10;Return:&#10;   Current migration version;;d1,701;;b1,0;;m0;;e">
</treenode>
<treenode node="getHistory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;793;2;811;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getHistory(string $group = &apos;default&apos;): array&#10;&#10;Description&#10;     Grabs the full migration history from the database for a group&#10;&#10;Parameters:&#10;    string $group;;d1,794;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getLastBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;862;2;876;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getLastBatch(): int&#10;&#10;Description&#10;     Returns the value of the last batch in the database.;;d1,863;;b1,0;;m0;;e">
</treenode>
<treenode node="getMigrationName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f11;670;2;676;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMigrationName(string $migration): string&#10;&#10;Description&#10;     Extracts the migration class name from a filename&#10;&#10;Parameters:&#10;    string $migration&#10;&#10;Return:&#10;   text portion of a migration filename;;d1,671;;b2,0;;m0;;estring $migration;;p">
</treenode>
<treenode node="getMigrationNumber;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f11;654;2;659;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMigrationNumber(string $migration): string&#10;&#10;Description&#10;     Extracts the migration number from a filename&#10;&#10;Parameters:&#10;    string $migration&#10;&#10;Return:&#10;   Numeric portion of a migration filename;;d1,655;;b2,0;;m0;;estring $migration;;p">
</treenode>
<treenode node="getObjectUid;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;688;2;691;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getObjectUid($object): string&#10;&#10;Description&#10;     Uses the non-repeatable portions of a migration or history to create a sortable unique key&#10;&#10;Parameters:&#10;    object $migration - or $history;;d1,689;;b1,0;;m0;;eobject $migration;;p">
</treenode>
<treenode node="latest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;185;2;249;;;;vpos;;v;;a;;r&#10;Definition&#10;    latest(string $group = null)&#10;&#10;Description&#10;     Locate and run all new migrations&#10;&#10;Parameters:&#10;    string|null $group;;d1,186;;b1,0;;m0;;estring|null $group;;p">
</treenode>
<treenode node="migrate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f11;1004;2;1062;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    migrate($direction, $migration): bool&#10;&#10;Description&#10;     Handles the actual running of a migration.&#10;&#10;Parameters:&#10;     $direction - &quot;up&quot; or &quot;down&quot;&#10;     $migration - The migration to run;;d1,1005;;b2,0;;m0;;e $direction;;p $migration;;p">
</treenode>
<treenode node="migrationFromFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f11;546;2;576;;;;vpos;;v;;aobject;;r&#10;Definition&#10;    migrationFromFile(string $path, string $namespace)&#10;&#10;Description&#10;     Create a migration object from a file path.&#10;&#10;Parameters:&#10;    string $path - The path to the file&#10;    string $path - The namespace of the target migration&#10;&#10;Return:&#10;   |false    Returns the migration object, or false on failure;;d1,547;;b2,0;;m0;;estring $path;;pstring $path;;p">
</treenode>
<treenode node="regress;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;264;2;375;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    regress(int $targetBatch = 0, string $group = null)&#10;&#10;Description&#10;     Migrate down to a previous batch&#10;&#10;Parameters:&#10;    integer $targetBatch - Target batch number, or negative for a relative batch, 0 for all&#10;    string|null $group&#10;&#10;Return:&#10;   Current batch number on success, FALSE on failure or no migrations are found;;d1,265;;b1,0;;m0;;einteger $targetBatch;;pstring|null $group;;p">
</treenode>
<treenode node="removeHistory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f11;773;2;782;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    removeHistory($history)&#10;&#10;Description&#10;     Removes a single history&#10;&#10;Parameters:&#10;    string $version;;d1,774;;b2,0;;m0;;estring $version;;p">
</treenode>
<treenode node="setGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;605;2;610;;;;vpos;;v;;aMigrationRunner;;r&#10;Definition&#10;    setGroup(string $group)&#10;&#10;Description&#10;     Set database Group. Allows other scripts to modify on the fly as needed.&#10;&#10;Parameters:&#10;    string $group;;d1,606;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="setName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;621;2;626;;;;vpos;;v;;a;;r&#10;Definition&#10;    setName(string $name)&#10;&#10;Description&#10;     Set migration Name.&#10;&#10;Parameters:&#10;    string $name;;d1,622;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="setNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;588;2;593;;;;vpos;;v;;aMigrationRunner;;r&#10;Definition&#10;    setNamespace(?string $namespace)&#10;&#10;Description&#10;     Set namespace. Allows other scripts to modify on the fly as needed.&#10;&#10;Parameters:&#10;    string $namespace - or null for &quot;all&quot;;;d1,589;;b1,0;;m0;;estring $namespace;;p">
</treenode>
<treenode node="setSilent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\MigrationRunner.php;f8;638;2;643;;;;vpos;;v;;aMigrationRunner;;r&#10;Definition&#10;    setSilent(bool $silent)&#10;&#10;Description&#10;     If $silent == true, then will not throw exceptions and will attempt to continue gracefully.&#10;&#10;Parameters:&#10;    boolean $silent;;d1,639;;b1,0;;m0;;eboolean $silent;;p">
</treenode>
</treenode>
<treenode node="Migrations;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\Migrations.php;f0;4;1;49;;;;vpos;;v;;aBaseConfig;;c;;r;;d0,5;;b0,0;;m0;;e">
</treenode>
<treenode node="Mimes;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\Mimes.php;f0;15;1;529;;;;vpos;;v;;a;;r;;d0,16;;b0,0;;m0;;e">
<treenode node="guessExtensionFromType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Config\Mimes.php;f15;505;2;525;;;;vpos;;v;;astring;;r&#10;Definition&#10;    guessExtensionFromType(string $type, ?string $proposed_extension = null)&#10;&#10;Description&#10;     Attempts to determine the best file extension for a given mime type.&#10;&#10;Parameters:&#10;    string $type&#10;    string $proposed_extension - - default extension (in case there is more than one with the same mime type)&#10;&#10;Return:&#10;   |null The extension determined, or null if unable to match;;d1,506;;b1,5;;m0;;estring $type;;pstring $proposed_extension;;p">
</treenode>
<treenode node="guessTypeFromExtension;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Config\Mimes.php;f15;483;2;493;;;;vpos;;v;;astring;;r&#10;Definition&#10;    guessTypeFromExtension(string $extension)&#10;&#10;Description&#10;     Attempts to determine the best mime type for the given file extension.&#10;&#10;Parameters:&#10;    string $extension&#10;&#10;Return:&#10;   |null The mime type found, or none if unable to determine;;d1,484;;b1,5;;m0;;estring $extension;;p">
</treenode>
</treenode>
<treenode node="MockAppConfig;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockAppConfig.php;f0;2;1;33;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m0;;e">
</treenode>
<treenode node="MockAutoload;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockAutoload.php;f0;4;1;20;;;;vpos;;v;;aAutoload;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockAutoload.php;f8;12;2;16;;;;vpos;;v;;a;;r;;d1,13;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="MockBuilder;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockBuilder.php;f0;5;1;14;;;;vpos;;v;;aBaseBuilder;;c;;r;;d38,5;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockBuilder.php;f8;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,0;;m0;;etableName;;pdb;;poptions;;p">
</treenode>
</treenode>
<treenode node="MockCache;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f0;4;1;197;;;;vpos;;v;;aCacheInterface;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="clean;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;149;2;152;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    clean()&#10;&#10;Description&#10;     Will delete all items in the entire cache.;;d1,150;;b1,0;;m0;;e">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;124;2;140;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    decrement(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic decrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,125;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;81;2;84;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    delete(string $key)&#10;&#10;Description&#10;     Deletes a specific item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,82;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;39;2;46;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get(string $key)&#10;&#10;Description&#10;     Attempts to fetch an item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,40;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getCacheInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;164;2;167;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCacheInfo()&#10;&#10;Description&#10;     Returns information on the entire cache.;;d1,165;;b1,0;;m0;;e">
</treenode>
<treenode node="getMetaData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;178;2;181;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getMetaData(string $key)&#10;&#10;Description&#10;     Returns detailed information about the specific item in the cache.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,179;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;96;2;112;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    increment(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic incrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,97;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;25;2;28;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Takes care of any handler-specific setup that must be done.;;d1,26;;b1,0;;m0;;e">
</treenode>
<treenode node="isSupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;190;2;193;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isSupported(): bool&#10;&#10;Description&#10;     Determines if the driver is supported on this system.;;d1,191;;b1,0;;m0;;e">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCache.php;f8;63;2;70;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    save(string $key, $value, int $ttl = 60, bool $raw = false)&#10;&#10;Description&#10;     Saves an item to the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name&#10;     $value - the data to save&#10;    null $ttl - Time To Live, in seconds (default 60)&#10;    boolean $raw - Whether to store the raw value;;d1,64;;b1,0;;m0;;estring $key;;p $value;;pnull $ttl;;pboolean $raw;;p">
</treenode>
</treenode>
<treenode node="MockCLIConfig;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCLIConfig.php;f0;2;1;31;;;;vpos;;v;;aApp;;c;;r;;d0,3;;b0,0;;m0;;e">
</treenode>
<treenode node="MockCodeIgniter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCodeIgniter.php;f0;4;1;10;;;;vpos;;v;;aCodeIgniter;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="callExit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCodeIgniter.php;f11;6;2;9;;;;vpos;;v;;a;;r;;d1,7;;b2,0;;m0;;ecode;;p">
</treenode>
</treenode>
<treenode node="MockConnection;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f0;5;1;296;;;;vpos;;v;;aBaseConnection;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="_close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;255;2;257;;;;vpos;;v;;a;;r&#10;Definition&#10;    _close()&#10;&#10;Description&#10;     Close the connection.;;d1,256;;b2,0;;m0;;e">
</treenode>
<treenode node="_fieldData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;227;2;230;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    _fieldData(string $table): array&#10;&#10;Description&#10;     &#10;&#10;Parameters:&#10;    string $table;;d1,228;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_foreignKeyData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;245;2;248;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    _foreignKeyData(string $table): array&#10;&#10;Description&#10;     &#10;&#10;Parameters:&#10;    string $table;;d1,246;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_indexData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;236;2;239;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    _indexData(string $table): array&#10;&#10;Description&#10;     &#10;&#10;Parameters:&#10;    string $table;;d1,237;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_listColumns;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;218;2;221;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _listColumns(string $table = &apos;&apos;): string&#10;&#10;Description&#10;     Generates a platform-specific query string so that the column names can be fetched.&#10;&#10;Parameters:&#10;    string $table;;d1,219;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="_listTables;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;204;2;207;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _listTables(bool $constrainByPrefix = false): string&#10;&#10;Description&#10;     Generates the SQL for listing tables in a platform-dependent manner.&#10;&#10;Parameters:&#10;    boolean $constrainByPrefix;;d1,205;;b2,0;;m0;;eboolean $constrainByPrefix;;p">
</treenode>
<treenode node="_transBegin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;266;2;269;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    _transBegin(): bool&#10;&#10;Description&#10;     Begin Transaction;;d1,267;;b2,0;;m0;;e">
</treenode>
<treenode node="_transCommit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;278;2;281;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    _transCommit(): bool&#10;&#10;Description&#10;     Commit Transaction;;d1,279;;b2,0;;m0;;e">
</treenode>
<treenode node="_transRollback;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;290;2;293;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    _transRollback(): bool&#10;&#10;Description&#10;     Rollback Transaction;;d1,291;;b2,0;;m0;;e">
</treenode>
<treenode node="affectedRows;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f8;159;2;162;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    affectedRows(): int&#10;&#10;Description&#10;     Returns the total number of rows affected by this query.;;d1,160;;b1,0;;m0;;e">
</treenode>
<treenode node="connect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f8;83;2;95;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    connect(bool $persistent = false)&#10;&#10;Description&#10;     Connect to the database.&#10;&#10;Parameters:&#10;    boolean $persistent;;d1,84;;b1,0;;m0;;eboolean $persistent;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f8;175;2;181;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    error(): array&#10;&#10;Description&#10;     Returns the last error code and message.;;d1,176;;b1,0;;m0;;e">
</treenode>
<treenode node="execute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f11;147;2;150;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    execute(string $sql)&#10;&#10;Description&#10;     Executes the query against the database.&#10;&#10;Parameters:&#10;    string $sql;;d1,148;;b2,0;;m0;;estring $sql;;p">
</treenode>
<treenode node="getVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f8;133;2;136;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getVersion(): string&#10;&#10;Description&#10;     Returns a string containing the version of the database being used.;;d1,134;;b1,0;;m0;;e">
</treenode>
<treenode node="insertID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f8;190;2;193;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    insertID(): int&#10;&#10;Description&#10;     Insert ID;;d1,191;;b1,0;;m0;;e">
</treenode>
<treenode node="query;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f8;40;2;72;;;;vpos;;v;;a;;r&#10;Definition&#10;    query(string $sql, $binds = null, bool $setEscapeFlags = true, string $queryClass = &apos;CodeIgniter\\Database\\Query&apos;)&#10;&#10;Description&#10;     Orchestrates a query against the database. Queries must use Database\Statement objects to store the query and build it. This method works with the cache.&#10;&#10;Parameters:&#10;    string $sql&#10;    mixed - ...$binds&#10;    boolean $setEscapeFlags&#10;    string $queryClass;;d1,41;;b1,0;;m0;;estring $sql;;pmixed;;pboolean $setEscapeFlags;;pstring $queryClass;;p">
</treenode>
<treenode node="reconnect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f8;105;2;108;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    reconnect(): bool&#10;&#10;Description&#10;     Keep or establish the connection if no queries have been sent for a length of time exceeding the server&apos;s idle timeout.;;d1,106;;b1,0;;m0;;e">
</treenode>
<treenode node="setDatabase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f8;119;2;124;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    setDatabase(string $databaseName)&#10;&#10;Description&#10;     Select a specific database table to use.&#10;&#10;Parameters:&#10;    string $databaseName;;d1,120;;b1,0;;m0;;estring $databaseName;;p">
</treenode>
<treenode node="shouldReturn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockConnection.php;f8;15;2;20;;;;vpos;;v;;a;;r;;d1,16;;b1,0;;m0;;emethod;;preturn;;p">
</treenode>
</treenode>
<treenode node="MockCURLRequest;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCURLRequest.php;f0;11;1;49;;;;vpos;;v;;aCURLRequest;;c;;r&#10;Definition&#10;    class MockCURLRequest extends CURLRequest&#10;&#10;Description&#10;     Class MockCURLRequest;;d0,12;;b0,0;;m0;;e">
<treenode node="getBaseURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCURLRequest.php;f8;38;2;41;;;;vpos;;v;;a;;r;;d1,39;;b1,0;;m0;;e">
</treenode>
<treenode node="getDelay;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCURLRequest.php;f8;44;2;47;;;;vpos;;v;;a;;r;;d1,45;;b1,0;;m0;;e">
</treenode>
<treenode node="sendRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCURLRequest.php;f11;28;2;34;;;;vpos;;v;;a string;;r;;d1,29;;b2,0;;m0;;ecurl_options;;p">
</treenode>
<treenode node="setOutput;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCURLRequest.php;f8;19;2;24;;;;vpos;;v;;a;;r;;d1,20;;b1,0;;m0;;eoutput;;p">
</treenode>
</treenode>
<treenode node="MockEmail;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockEmail.php;f0;5;1;30;;;;vpos;;v;;aEmail;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockEmail.php;f8;14;2;29;;;;vpos;;v;;a;;r;;d1,15;;b1,0;;m0;;eautoClear;;p">
</treenode>
</treenode>
<treenode node="MockEvents;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockEvents.php;f0;43;1;65;;;;vpos;;v;;aEvents;;c;;r&#10;Definition&#10;    class MockEvents extends Events&#10;&#10;Description&#10;     Events;;d0,44;;b0,0;;m0;;e">
<treenode node="getEventsFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockEvents.php;f8;51;2;54;;;;vpos;;v;;a;;r;;d1,52;;b1,0;;m0;;e">
</treenode>
<treenode node="getListeners;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockEvents.php;f8;46;2;49;;;;vpos;;v;;a;;r;;d1,47;;b1,0;;m0;;e">
</treenode>
<treenode node="getSimulate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockEvents.php;f8;56;2;59;;;;vpos;;v;;a;;r;;d1,57;;b1,0;;m0;;e">
</treenode>
<treenode node="unInitialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockEvents.php;f8;61;2;64;;;;vpos;;v;;a;;r;;d1,62;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="MockFileLogger;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockFileLogger.php;f0;8;1;24;;;;vpos;;v;;aFileHandler;;c;;r&#10;Definition&#10;    class MockFileLogger extends \CodeIgniter\Log\Handlers\FileHandler&#10;&#10;Description&#10;     Class MockFileLogger;;d0,9;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockFileLogger.php;f8;17;2;22;;;;vpos;;v;;a;;r;;d1,18;;b1,0;;m0;;econfig;;p">
</treenode>
</treenode>
<treenode node="MockIncomingRequest;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockIncomingRequest.php;f0;4;1;16;;;;vpos;;v;;aIncomingRequest;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="detectURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockIncomingRequest.php;f8;11;2;14;;;;vpos;;v;;a;;r;;d1,12;;b1,0;;m0;;eprotocol;;pbaseURL;;p">
</treenode>
</treenode>
<treenode node="MockLanguage;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockLanguage.php;f0;4;1;60;;;;vpos;;v;;aLanguage;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="disableIntlSupport;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockLanguage.php;f8;55;2;58;;;;vpos;;v;;a;;r&#10;Definition&#10;    disableIntlSupport()&#10;&#10;Description&#10;     Arbitrarily turnoff internationalization support for testing;;d1,56;;b1,0;;m0;;e">
</treenode>
<treenode node="requireFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockLanguage.php;f11;45;2;48;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    requireFile(string $path): array&#10;&#10;Description&#10;     Provides an override that allows us to set custom data to be returned easily during testing.&#10;&#10;Parameters:&#10;    string $path&#10;&#10;Return:&#10;   |mixed;;d1,46;;b2,0;;m0;;estring $path;;p">
</treenode>
<treenode node="setData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockLanguage.php;f8;28;2;33;;;;vpos;;v;;a;;r&#10;Definition&#10;    setData(string $file, array $data, string $locale = null)&#10;&#10;Description&#10;     Sets the data that should be returned by the &apos;requireFile()&apos; method to allow easy overrides during testing.&#10;&#10;Parameters:&#10;    array $data&#10;    string $file&#10;    string|null $locale;;d1,29;;b1,0;;m0;;earray $data;;pstring $file;;pstring|null $locale;;p">
</treenode>
</treenode>
<treenode node="MockLogger;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockLogger.php;f0;2;1;97;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m0;;e">
</treenode>
<treenode node="MockQuery;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockQuery.php;f0;4;1;7;;;;vpos;;v;;aQuery;;c;;r;;d0,5;;b0,0;;m0;;e">
</treenode>
<treenode node="MockResourceController;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResourceController.php;f0;4;1;22;;;;vpos;;v;;aResourceController;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="getFormat;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResourceController.php;f8;17;2;20;;;;vpos;;v;;a;;r;;d1,18;;b1,0;;m0;;e">
</treenode>
<treenode node="getModel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResourceController.php;f8;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,0;;m0;;e">
</treenode>
<treenode node="getModelName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResourceController.php;f8;12;2;15;;;;vpos;;v;;a;;r;;d1,13;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="MockResourcePresenter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResourcePresenter.php;f0;4;1;22;;;;vpos;;v;;aResourcePresenter;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="getFormat;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResourcePresenter.php;f8;17;2;20;;;;vpos;;v;;a;;r;;d1,18;;b1,0;;m0;;e">
</treenode>
<treenode node="getModel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResourcePresenter.php;f8;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,0;;m0;;e">
</treenode>
<treenode node="getModelName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResourcePresenter.php;f8;12;2;15;;;;vpos;;v;;a;;r;;d1,13;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="MockResponse;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResponse.php;f0;7;1;29;;;;vpos;;v;;aResponse;;c;;r&#10;Definition&#10;    class MockResponse extends Response&#10;&#10;Description&#10;     Class MockResponse;;d0,8;;b0,0;;m0;;e">
<treenode node="getPretend;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResponse.php;f8;18;2;21;;;;vpos;;v;;a;;r;;d1,19;;b1,0;;m0;;e">
</treenode>
<treenode node="misbehave;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResponse.php;f8;24;2;27;;;;vpos;;v;;a;;r;;d1,25;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="MockResult;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResult.php;f0;4;1;92;;;;vpos;;v;;aBaseResult;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="dataSeek;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResult.php;f8;59;2;61;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    dataSeek($n = 0)&#10;&#10;Description&#10;     Moves the internal pointer to the desired offset. This is called internally before fetching results to make sure the result set starts at zero.&#10;&#10;Parameters:&#10;    integer $n;;d1,60;;b1,0;;m0;;einteger $n;;p">
</treenode>
<treenode node="fetchAssoc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResult.php;f11;72;2;74;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    fetchAssoc()&#10;&#10;Description&#10;     Returns the result set as an array.;;d1,73;;b2,0;;m0;;e">
</treenode>
<treenode node="fetchObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResult.php;f11;87;2;89;;;;vpos;;v;;aobject;;r&#10;Definition&#10;    fetchObject($className = &apos;stdClass&apos;)&#10;&#10;Description&#10;     Returns the result set as an object.&#10;&#10;Parameters:&#10;    string $className;;d1,88;;b2,0;;m0;;estring $className;;p">
</treenode>
<treenode node="freeResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResult.php;f8;44;2;46;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    freeResult()&#10;&#10;Description&#10;     Frees the current result.;;d1,45;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResult.php;f8;11;2;13;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getFieldCount(): int&#10;&#10;Description&#10;     Gets the number of fields in the result set.;;d1,12;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResult.php;f8;33;2;35;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFieldData(): array&#10;&#10;Description&#10;     Generates an array of objects representing field meta-data.;;d1,34;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldNames;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockResult.php;f8;22;2;24;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFieldNames(): array&#10;&#10;Description&#10;     Generates an array of column names in the result set.;;d1,23;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="MockSecurity;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockSecurity.php;f0;5;1;16;;;;vpos;;v;;aSecurity;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="CSRFSetCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockSecurity.php;f8;7;2;12;;;;vpos;;v;;a;;r;;d1,8;;b1,0;;m0;;erequest;;p">
</treenode>
</treenode>
<treenode node="MockServices;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockServices.php;f0;4;1;26;;;;vpos;;v;;aBaseService;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockServices.php;f8;14;2;18;;;;vpos;;v;;a;;r;;d1,15;;b1,0;;m0;;e">
</treenode>
<treenode node="locator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockServices.php;f15;21;2;24;;;;vpos;;v;;a;;r;;d1,22;;b1,5;;m0;;egetShared;;p">
</treenode>
</treenode>
<treenode node="MockSession;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockSession.php;f0;10;1;71;;;;vpos;;v;;aSession;;c;;r&#10;Definition&#10;    class MockSession extends Session&#10;&#10;Description&#10;     Class MockSession;;d0,11;;b0,0;;m0;;e">
<treenode node="regenerate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockSession.php;f8;64;2;68;;;;vpos;;v;;a;;r;;d1,65;;b1,0;;m0;;edestroy;;p">
</treenode>
<treenode node="setCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockSession.php;f11;49;2;60;;;;vpos;;v;;a;;r&#10;Definition&#10;    setCookie()&#10;&#10;Description&#10;     Takes care of setting the cookie on the client side. Extracted for testing reasons.;;d1,50;;b2,0;;m0;;e">
</treenode>
<treenode node="setSaveHandler;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockSession.php;f11;27;2;30;;;;vpos;;v;;a;;r&#10;Definition&#10;    setSaveHandler()&#10;&#10;Description&#10;     Sets the driver as the session handler in PHP. Extracted for easier testing.;;d1,28;;b2,0;;m0;;e">
</treenode>
<treenode node="startSession;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockSession.php;f11;38;2;41;;;;vpos;;v;;a;;r&#10;Definition&#10;    startSession()&#10;&#10;Description&#10;     Starts the session. Extracted for testing reasons.;;d1,39;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="MockTable;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockTable.php;f0;2;1;15;;;;vpos;;v;;aTable;;c;;r;;d48,2;;b0,0;;m0;;e">
<treenode node="__call;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockTable.php;f8;5;2;13;;;;vpos;;v;;a;;r;;d1,6;;b1,0;;m0;;emethod;;pparams;;p">
</treenode>
</treenode>
<treenode node="Model;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f0;75;1;1841;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Model&#10;&#10;Description&#10;     Class Model;;d0,76;;b0,0;;m0;;e">
<treenode node="__call;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1807;2;1838;;;;vpos;;v;;aModel;;r&#10;Definition&#10;    __call(string $name, array $params)&#10;&#10;Description&#10;     Provides direct access to method in the builder (if available) and the database connection.&#10;&#10;Parameters:&#10;    string $name&#10;    array $params&#10;&#10;Return:&#10;   |null;;d1,1808;;b1,0;;m0;;estring $name;;parray $params;;p">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;343;2;364;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(ConnectionInterface &amp;$db = null, ValidationInterface $validation = null)&#10;&#10;Description&#10;     Model constructor.&#10;&#10;Parameters:&#10;    ConnectionInterface $db&#10;    ValidationInterface $validation;;d1,344;;b1,0;;m0;;eConnectionInterface $db;;pValidationInterface $validation;;p">
</treenode>
<treenode node="__get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1753;2;1769;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __get(string $name)&#10;&#10;Description&#10;     Provides/instantiates the builder/db connection and model&apos;s table/primary key names and return type.&#10;&#10;Parameters:&#10;    string $name;;d1,1754;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="__isset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1778;2;1794;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    __isset(string $name): bool&#10;&#10;Description&#10;     Checks for the existence of properties across this model, builder, and db connection.&#10;&#10;Parameters:&#10;    string $name;;d1,1779;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="allowCallbacks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1683;2;1688;;;;vpos;;v;;aModel;;r&#10;Definition&#10;    allowCallbacks(bool $val = true)&#10;&#10;Description&#10;     Sets $tempAllowCallbacks value so that we can temporarily override the setting. Resets after the next trigger.&#10;&#10;Parameters:&#10;    boolean $val;;d1,1684;;b1,0;;m0;;eboolean $val;;p">
</treenode>
<treenode node="asArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1074;2;1079;;;;vpos;;v;;aModel;;r&#10;Definition&#10;    asArray()&#10;&#10;Description&#10;     Sets the return type of the results to be as an associative array.;;d1,1075;;b1,0;;m0;;e">
</treenode>
<treenode node="asObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1093;2;1098;;;;vpos;;v;;aModel;;r&#10;Definition&#10;    asObject(string $class = &apos;object&apos;)&#10;&#10;Description&#10;     Sets the return type to be of the specified type of object. Defaults to a simple object, but can be any class that has class vars with the same name as the table columns, or at least allows them to be created.&#10;&#10;Parameters:&#10;    string $class;;d1,1094;;b1,0;;m0;;estring $class;;p">
</treenode>
<treenode node="builder;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f11;1213;2;1239;;;;vpos;;v;;aBaseBuilder;;r&#10;Definition&#10;    builder(string $table = null)&#10;&#10;Description&#10;     Provides a shared instance of the Query Builder.&#10;&#10;Parameters:&#10;    string $table;;d1,1214;;b2,0;;m0;;estring $table;;p">
</treenode>
<treenode node="chunk;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1112;2;1147;;;;vpos;;v;;a;;r&#10;Definition&#10;    chunk(int $size, Closure $userFunc)&#10;&#10;Description&#10;     Loops over records in batches, allowing you to operate on them. Works with $this-&gt;builder to get the Compiled select to determine the rows to operate on.&#10;&#10;Parameters:&#10;    integer $size&#10;    \Closure $userFunc;;d1,1113;;b1,0;;m0;;einteger $size;;p\Closure $userFunc;;p">
</treenode>
<treenode node="classToArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f15;600;2;658;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    classToArray($data, $primaryKey = null, string $dateFormat = &apos;datetime&apos;, bool $onlyChanged = true): array&#10;&#10;Description&#10;     Takes a class an returns an array of it&apos;s public and protected properties as an array suitable for use in creates and updates.&#10;&#10;Parameters:&#10;    string|object $data&#10;    string|null $primaryKey&#10;    string $dateFormat&#10;    boolean $onlyChanged;;d1,601;;b1,5;;m0;;estring|object $data;;pstring|null $primaryKey;;pstring $dateFormat;;pboolean $onlyChanged;;p">
</treenode>
<treenode node="cleanRules;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1452;2;1457;;;;vpos;;v;;a;;r&#10;Definition&#10;    cleanRules(bool $choice = false)&#10;&#10;Description&#10;     Should validation rules be removed before saving? Most handy when doing updates.&#10;&#10;Parameters:&#10;    boolean $choice;;d1,1453;;b1,0;;m0;;eboolean $choice;;p">
</treenode>
<treenode node="cleanValidationRules;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f11;1522;2;1538;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    cleanValidationRules(array $rules, array $data = null): array&#10;&#10;Description&#10;     Removes any rules that apply to fields that have not been set currently so that rules don&apos;t block updating when only updating a partial row.&#10;&#10;Parameters:&#10;    array $rules&#10;    array|null $data;;d1,1523;;b2,0;;m0;;earray $rules;;parray|null $data;;p">
</treenode>
<treenode node="countAllResults;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1656;2;1673;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    countAllResults(bool $reset = true, bool $test = false)&#10;&#10;Description&#10;     Override countAllResults to account for soft deleted accounts.&#10;&#10;Parameters:&#10;    boolean $reset&#10;    boolean $test;;d1,1657;;b1,0;;m0;;eboolean $reset;;pboolean $test;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;938;2;982;;;;vpos;;v;;aBaseResult;;r&#10;Definition&#10;    delete($id = null, bool $purge = false)&#10;&#10;Description&#10;     Deletes a single record from $this-&gt;table where $id matches the table&apos;s primaryKey&#10;&#10;Parameters:&#10;    integer|string|array|null $id - The rows primary key(s)&#10;    boolean $purge - Allows overriding the soft deletes setting&#10;&#10;Return:&#10;   |boolean;;d1,939;;b1,0;;m0;;einteger|string|array|null $id;;pboolean $purge;;p">
</treenode>
<treenode node="doProtectFields;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f11;1255;2;1279;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    doProtectFields(array $data): array&#10;&#10;Description&#10;     Ensures that only the fields that are allowed to be updated are in the data array.&#10;&#10;Parameters:&#10;    array $data;;d1,1256;;b2,0;;m0;;earray $data;;p">
</treenode>
<treenode node="errors;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1343;2;1360;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    errors(bool $forceDB = false)&#10;&#10;Description&#10;     Grabs the last error(s) that occurred. If data was validated, it will first check for errors there, otherwise will try to grab the last error from the Database connection.&#10;&#10;Parameters:&#10;    boolean $forceDB - Always grab the db error, not validation&#10;&#10;Return:&#10;   |null;;d1,1344;;b1,0;;m0;;eboolean $forceDB;;p">
</treenode>
<treenode node="fillPlaceholders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f11;1564;2;1598;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    fillPlaceholders(array $rules, array $data): array&#10;&#10;Description&#10;     Replace any placeholders within the rules with the values that match the &apos;key&apos; of any properties being set. For example, if we had the following $data array:&#10;&#10;Parameters:&#10;    array $rules&#10;    array $data;;d1,1565;;b2,0;;m0;;earray $rules;;parray $data;;p">
</treenode>
<treenode node="find;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;379;2;414;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    find($id = null)&#10;&#10;Description&#10;     Fetches the row of database from $this-&gt;table with a primary key matching $id.&#10;&#10;Parameters:&#10;    mixed|array|null $id - One primary key or an array of primary keys&#10;&#10;Return:&#10;   |object|null    The resulting row of data, or null;;d1,380;;b1,0;;m0;;emixed|array|null $id;;p">
</treenode>
<treenode node="findAll;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;451;2;471;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    findAll(int $limit = 0, int $offset = 0)&#10;&#10;Description&#10;     Works with the current Query Builder instance to return all results, while optionally limiting them.&#10;&#10;Parameters:&#10;    integer $limit&#10;    integer $offset;;d1,452;;b1,0;;m0;;einteger $limit;;pinteger $offset;;p">
</treenode>
<treenode node="findColumn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;426;2;438;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    findColumn(string $columnName)&#10;&#10;Description&#10;     Fetches the column of database from $this-&gt;table&#10;&#10;Parameters:&#10;    string $columnName&#10;&#10;Return:&#10;   |null   The resulting row of data, or null if no data found;;d1,427;;b1,0;;m0;;estring $columnName;;p">
</treenode>
<treenode node="first;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;481;2;515;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    first()&#10;&#10;Description&#10;     Returns the first row of the result set. Will take any previous Query Builder calls into account when determining the result set.&#10;&#10;Return:&#10;   |object|null;;d1,482;;b1,0;;m0;;e">
</treenode>
<treenode node="getInsertID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;667;2;670;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getInsertID(): int&#10;&#10;Description&#10;     Returns last insert ID or 0.;;d1,668;;b1,0;;m0;;e">
</treenode>
<treenode node="getValidationMessages;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1641;2;1644;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getValidationMessages(): array&#10;&#10;Description&#10;     Returns the model&apos;s define validation messages so they can be used elsewhere, if needed.;;d1,1642;;b1,0;;m0;;e">
</treenode>
<treenode node="getValidationRules;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1610;2;1631;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getValidationRules(array $options = []): array&#10;&#10;Description&#10;     Returns the model&apos;s defined validation rules so that they can be used elsewhere, if needed.&#10;&#10;Parameters:&#10;    array $options;;d1,1611;;b1,0;;m0;;earray $options;;p">
</treenode>
<treenode node="insert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;684;2;773;;;;vpos;;v;;aBaseResult;;r&#10;Definition&#10;    insert($data = null, bool $returnID = true)&#10;&#10;Description&#10;     Inserts data into the current table. If an object is provided, it will attempt to convert it to an array.&#10;&#10;Parameters:&#10;    array|object $data&#10;    boolean $returnID - Whether insert ID should be returned or not&#10;&#10;Return:&#10;   |integer|string|false;;d1,685;;b1,0;;m0;;earray|object $data;;pboolean $returnID;;p">
</treenode>
<treenode node="insertBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;787;2;801;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    insertBatch(array $set = null, bool $escape = null, int $batchSize = 100, bool $testing = false)&#10;&#10;Description&#10;     Compiles batch insert strings and runs the queries, validating each row prior.&#10;&#10;Parameters:&#10;    array $set - An associative array of insert values&#10;    boolean $escape - Whether to escape values and identifiers&#10;    integer $batchSize - The size of the batch to run&#10;    boolean $testing - True means only number of records is returned, false will execute the query&#10;&#10;Return:&#10;   |boolean Number of rows inserted or FALSE on failure;;d1,788;;b1,0;;m0;;earray $set;;pboolean $escape;;pinteger $batchSize;;pboolean $testing;;p">
</treenode>
<treenode node="onlyDeleted;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1029;2;1037;;;;vpos;;v;;aModel;;r&#10;Definition&#10;    onlyDeleted()&#10;&#10;Description&#10;     Works with the find* methods to return only the rows that have been deleted.;;d1,1030;;b1,0;;m0;;e">
</treenode>
<treenode node="paginate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1164;2;1184;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    paginate(int $perPage = null, string $group = &apos;default&apos;, int $page = null, int $segment = 0)&#10;&#10;Description&#10;     Works with $this-&gt;builder to get the Compiled Select to operate on. Expects a GET variable (?page=2) that specifies the page of results to display.&#10;&#10;Parameters:&#10;    integer $perPage&#10;    string $group - Will be used by the pagination library&#10;    integer $page - Optional page number (useful when the page number is provided in different way)&#10;    integer $segment - Optional URI segment number (if page number is provided by URI segment)&#10;&#10;Return:&#10;   |null;;d1,1165;;b1,0;;m0;;einteger $perPage;;pstring $group;;pinteger $page;;pinteger $segment;;p">
</treenode>
<treenode node="protect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1196;2;1201;;;;vpos;;v;;aModel;;r&#10;Definition&#10;    protect(bool $protect = true)&#10;&#10;Description&#10;     Sets whether or not we should whitelist data set during updates or inserts against $this-&gt;availableFields.&#10;&#10;Parameters:&#10;    boolean $protect;;d1,1197;;b1,0;;m0;;eboolean $protect;;p">
</treenode>
<treenode node="purgeDeleted;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;992;2;1002;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    purgeDeleted()&#10;&#10;Description&#10;     Permanently deletes all rows that have been marked as deleted through soft deletes (deleted = 1)&#10;&#10;Return:&#10;   |mixed;;d1,993;;b1,0;;m0;;e">
</treenode>
<treenode node="replace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1051;2;1063;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    replace($data = null, bool $returnSQL = false)&#10;&#10;Description&#10;     Replace&#10;&#10;Parameters:&#10;    null $data&#10;    boolean $returnSQL;;d1,1052;;b1,0;;m0;;enull $data;;pboolean $returnSQL;;p">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;556;2;586;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    save($data): bool&#10;&#10;Description&#10;     A convenience method that will attempt to determine whether the data should be inserted or updated. Will work with either an array or object. When using with custom class objects, you must ensure that the class will provide access to the class variables, even if through a magic method.&#10;&#10;Parameters:&#10;    array|object $data;;d1,557;;b1,0;;m0;;earray|object $data;;p">
</treenode>
<treenode node="set;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;530;2;540;;;;vpos;;v;;a;;r&#10;Definition&#10;    set($key, ?string $value = &apos;&apos;, bool $escape = null)&#10;&#10;Description&#10;     Captures the builder&apos;s set() method so that we can validate the data here. This allows it to be used with any of the other builder methods and still get validated data, like replace.&#10;&#10;Parameters:&#10;    mixed $key - Field name, or an array of field/value pairs&#10;    string $value - Field value, if $key is a single field&#10;    boolean $escape - Whether to escape values and identifiers;;d1,531;;b1,0;;m0;;emixed $key;;pstring $value;;pboolean $escape;;p">
</treenode>
<treenode node="setDate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f11;1299;2;1314;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    setDate(int $userData = null)&#10;&#10;Description&#10;     A utility function to allow child models to use the type of date/time format that they prefer. This is primarily used for setting created_at, updated_at and deleted_at values, but can be used by inheriting classes.&#10;&#10;Parameters:&#10;    integer $userData - An optional PHP timestamp to be converted;;d1,1300;;b2,0;;m0;;einteger $userData;;p">
</treenode>
<treenode node="setTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1325;2;1330;;;;vpos;;v;;aModel;;r&#10;Definition&#10;    setTable(string $table)&#10;&#10;Description&#10;     Specify the table associated with a model&#10;&#10;Parameters:&#10;    string $table;;d1,1326;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="setValidationMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1406;2;1409;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    setValidationMessage(string $field, array $fieldMessages)&#10;&#10;Description&#10;     Allows to set field wise validation message. It could be used when you have to change default or override current validate messages.&#10;&#10;Parameters:&#10;    string $field&#10;    array $fieldMessages;;d1,1407;;b1,0;;m0;;estring $field;;parray $fieldMessages;;p">
</treenode>
<treenode node="setValidationMessages;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1391;2;1394;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    setValidationMessages(array $validationMessages)&#10;&#10;Description&#10;     Allows to set validation messages. It could be used when you have to change default or override current validate messages.&#10;&#10;Parameters:&#10;    array $validationMessages;;d1,1392;;b1,0;;m0;;earray $validationMessages;;p">
</treenode>
<treenode node="setValidationRule;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1437;2;1440;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    setValidationRule(string $field, $fieldRules)&#10;&#10;Description&#10;     Allows to set field wise validation rules. It could be used when you have to change default or override current validate rules.&#10;&#10;Parameters:&#10;    string $field&#10;    string|array $fieldRules;;d1,1438;;b1,0;;m0;;estring $field;;pstring|array $fieldRules;;p">
</treenode>
<treenode node="setValidationRules;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1421;2;1424;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    setValidationRules(array $validationRules)&#10;&#10;Description&#10;     Allows to set validation rules. It could be used when you have to change default or override current validate rules.&#10;&#10;Parameters:&#10;    array $validationRules;;d1,1422;;b1,0;;m0;;earray $validationRules;;p">
</treenode>
<treenode node="skipValidation;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1374;2;1379;;;;vpos;;v;;aModel;;r&#10;Definition&#10;    skipValidation(bool $skip = true)&#10;&#10;Description&#10;     Set the value of the skipValidation flag.&#10;&#10;Parameters:&#10;    boolean $skip;;d1,1375;;b1,0;;m0;;eboolean $skip;;p">
</treenode>
<treenode node="trigger;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f11;1711;2;1738;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    trigger(string $event, array $eventData)&#10;&#10;Description&#10;     A simple event trigger for Model Events that allows additional data manipulation within the model. Specifically intended for usage by child models this can be used to format data, save/load related classes, etc.&#10;&#10;Parameters:&#10;    string $event&#10;    array $eventData;;d1,1712;;b2,0;;m0;;estring $event;;parray $eventData;;p">
</treenode>
<treenode node="update;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;815;2;893;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    update($id = null, $data = null): bool&#10;&#10;Description&#10;     Updates a single record in $this-&gt;table. If an object is provided, it will attempt to convert it into an array.&#10;&#10;Parameters:&#10;    integer|array|string $id&#10;    array|object $data;;d1,816;;b1,0;;m0;;einteger|array|string $id;;parray|object $data;;p">
</treenode>
<treenode node="updateBatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;910;2;924;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    updateBatch(array $set = null, string $index = null, int $batchSize = 100, bool $returnSQL = false)&#10;&#10;Description&#10;     Update_Batch&#10;&#10;Parameters:&#10;    array $set - An associative array of update values&#10;    string $index - The where key&#10;    integer $batchSize - The size of the batch to run&#10;    boolean $returnSQL - True means SQL is returned, false will execute the query&#10;&#10;Return:&#10;   Number of rows affected or FALSE on failure;;d1,911;;b1,0;;m0;;earray $set;;pstring $index;;pinteger $batchSize;;pboolean $returnSQL;;p">
</treenode>
<treenode node="validate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1469;2;1507;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    validate($data): bool&#10;&#10;Description&#10;     Validate the data against the validation rules (or the validation group) specified in the class property, $validationRules.&#10;&#10;Parameters:&#10;    array|object $data;;d1,1470;;b1,0;;m0;;earray|object $data;;p">
</treenode>
<treenode node="withDeleted;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Model.php;f8;1014;2;1019;;;;vpos;;v;;aModel;;r&#10;Definition&#10;    withDeleted($val = true)&#10;&#10;Description&#10;     Sets $useSoftDeletes value so that we can temporarily override the softdeletes settings. Can be used for all find* methods.&#10;&#10;Parameters:&#10;    boolean $val;;d1,1015;;b1,0;;m0;;eboolean $val;;p">
</treenode>
</treenode>
<treenode node="ModelException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\ModelException.php;f0;6;1;17;;;;vpos;;v;;aFrameworkException;;c;;r&#10;Definition&#10;    class ModelException extends FrameworkException&#10;&#10;Description&#10;     Model Exceptions.;;d0,7;;b0,0;;m0;;e">
<treenode node="forNoDateFormat;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\ModelException.php;f15;13;2;16;;;;vpos;;v;;a;;r;;d1,14;;b1,5;;m0;;emodelName;;p">
</treenode>
<treenode node="forNoPrimaryKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\ModelException.php;f15;8;2;11;;;;vpos;;v;;a;;r;;d1,9;;b1,5;;m0;;emodelName;;p">
</treenode>
</treenode>
<treenode node="ModelFactory;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\ModelFactory.php;f0;4;1;110;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="createClass;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ModelFactory.php;f16;71;2;109;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    createClass(string $name, ConnectionInterface &amp;$connection = null)&#10;&#10;Description&#10;     Find configuration class and create instance&#10;&#10;Parameters:&#10;    string $name - Classname&#10;    ConnectionInterface|null $connection&#10;&#10;Return:&#10;   |null;;d1,72;;b3,5;;m0;;estring $name;;pConnectionInterface|null $connection;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ModelFactory.php;f15;24;2;42;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get(string $name, bool $getShared = true, ConnectionInterface $connection = null)&#10;&#10;Description&#10;     Create new configuration instances or return a shared instance&#10;&#10;Parameters:&#10;    string $name - Configuration name&#10;    boolean $getShared - Use shared instance&#10;    ConnectionInterface $connection&#10;&#10;Return:&#10;   |null;;d1,25;;b1,5;;m0;;estring $name;;pboolean $getShared;;pConnectionInterface $connection;;p">
</treenode>
<treenode node="injectMock;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ModelFactory.php;f15;50;2;53;;;;vpos;;v;;a;;r&#10;Definition&#10;    injectMock(string $class, $instance)&#10;&#10;Description&#10;     Helper method for injecting mock instances while testing.&#10;&#10;Parameters:&#10;    string $class&#10;     $instance;;d1,51;;b1,5;;m0;;estring $class;;p $instance;;p">
</treenode>
<treenode node="reset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\ModelFactory.php;f15;58;2;61;;;;vpos;;v;;a;;r&#10;Definition&#10;    reset()&#10;&#10;Description&#10;     Resets the instances array;;d1,59;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="Modules;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Modules\Modules.php;f0;48;1;87;;O:\xampp\htdocs\2020\blog-4\app\Config\Modules.php;f0;6;1;44;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Modules&#10;&#10;Description&#10;     Modules Class;;d0,49;;b0,0;;m0;;e">
<treenode node="shouldDiscover;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Modules\Modules.php;f8;78;2;86;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    shouldDiscover(string $alias): bool&#10;&#10;Description&#10;     Should the application auto-discover the requested resource.&#10;&#10;Parameters:&#10;    string $alias;;d1,79;;b1,0;;m0;;estring $alias;;p">
</treenode>
</treenode>
<treenode node="MysqliPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\MysqliPlugin.php;f0;36;1;128;;;;vpos;;v;;aPlugin;;c;;r&#10;Definition&#10;    class MysqliPlugin extends Plugin&#10;&#10;Description&#10;     Adds support for Mysqli object parsing.;;d0,37;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\MysqliPlugin.php;f11;74;5;77;;;;vpos;;v;;a;;r;;d4,75;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\MysqliPlugin.php;f11;69;5;72;;;;vpos;;v;;a;;r;;d4,70;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\MysqliPlugin.php;f11;79;5;127;;;;vpos;;v;;a;;r;;d4,80;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="Namespaces;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Utilities\Namespaces.php;f0;52;1;130;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class Namespaces extends BaseCommand&#10;&#10;Description&#10;     Lists namespaces set in Config\Autoload with their full server path. Helps you to verify that you have the namespaces setup correctly.;;d0,53;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Utilities\Namespaces.php;f8;105;2;128;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params)&#10;&#10;Description&#10;     Displays the help for the spark cli script itself.&#10;&#10;Parameters:&#10;    array $params;;d1,106;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="Negotiate;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f0;53;1;462;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Negotiate&#10;&#10;Description&#10;     Class Negotiate;;d0,54;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f8;70;2;76;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(RequestInterface $request = null)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface|null $request;;d1,71;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface|null $request;;p">
</treenode>
<treenode node="charset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f8;129;2;141;;;;vpos;;v;;astring;;r&#10;Definition&#10;    charset(array $supported): string&#10;&#10;Description&#10;     Determines the best charset to use based on the $supported types the application says it supports, and the types requested by the client.&#10;&#10;Parameters:&#10;    array $supported;;d1,130;;b1,0;;m0;;earray $supported;;p">
</treenode>
<treenode node="encoding;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f8;157;2;162;;;;vpos;;v;;astring;;r&#10;Definition&#10;    encoding(array $supported = []): string&#10;&#10;Description&#10;     Determines the best encoding type to use based on the $supported types the application says it supports, and the types requested by the client.&#10;&#10;Parameters:&#10;    array $supported;;d1,158;;b1,0;;m0;;earray $supported;;p">
</treenode>
<treenode node="getBestMatch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f11;203;2;243;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getBestMatch(array $supported, string $header = null, bool $enforceTypes = false, bool $strictMatch = false, bool $matchLocales = false): string&#10;&#10;Description&#10;     Does the grunt work of comparing any of the app-supported values against a given Accept* header string.&#10;&#10;Parameters:&#10;    array $supported - App-supported values&#10;    string $header - header string&#10;    boolean $enforceTypes - If TRUE, will compare media types and sub-types&#10;    boolean $strictMatch - If TRUE, will return empty string on no match&#10;    boolean $matchLocales - If TRUE, will match locale sub-types to a broad type (fr-FR = fr)&#10;&#10;Return:&#10;   Best match;;d1,204;;b2,0;;m0;;earray $supported;;pstring $header;;pboolean $enforceTypes;;pboolean $strictMatch;;pboolean $matchLocales;;p">
</treenode>
<treenode node="language;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f8;178;2;181;;;;vpos;;v;;astring;;r&#10;Definition&#10;    language(array $supported): string&#10;&#10;Description&#10;     Determines the best language to use based on the $supported types the application says it supports, and the types requested by the client.&#10;&#10;Parameters:&#10;    array $supported;;d1,179;;b1,0;;m0;;earray $supported;;p">
</treenode>
<treenode node="match;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f11;346;2;374;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    match(array $acceptable, string $supported, bool $enforceTypes = false, $matchLocales = false): bool&#10;&#10;Description&#10;     Match-maker&#10;&#10;Parameters:&#10;    array $acceptable&#10;    string $supported&#10;    boolean $enforceTypes&#10;    boolean $matchLocales;;d1,347;;b2,0;;m0;;earray $acceptable;;pstring $supported;;pboolean $enforceTypes;;pboolean $matchLocales;;p">
</treenode>
<treenode node="matchLocales;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f8;451;2;461;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    matchLocales(array $acceptable, array $supported): bool&#10;&#10;Description&#10;     Will match locales against their broader pairs, so that fr-FR would match a supported localed of fr&#10;&#10;Parameters:&#10;    array $acceptable&#10;    array $supported;;d1,452;;b1,0;;m0;;earray $acceptable;;parray $supported;;p">
</treenode>
<treenode node="matchParameters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f11;387;2;404;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    matchParameters(array $acceptable, array $supported): bool&#10;&#10;Description&#10;     Checks two Accept values with matching &apos;values&apos; to see if their &apos;params&apos; are the same.&#10;&#10;Parameters:&#10;    array $acceptable&#10;    array $supported;;d1,388;;b2,0;;m0;;earray $acceptable;;parray $supported;;p">
</treenode>
<treenode node="matchTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f8;417;2;438;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    matchTypes(array $acceptable, array $supported): bool&#10;&#10;Description&#10;     Compares the types/subtypes of an acceptable Media type and the supported string.&#10;&#10;Parameters:&#10;    array $acceptable&#10;    array $supported;;d1,418;;b1,0;;m0;;earray $acceptable;;parray $supported;;p">
</treenode>
<treenode node="media;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f8;110;2;113;;;;vpos;;v;;astring;;r&#10;Definition&#10;    media(array $supported, bool $strictMatch = false): string&#10;&#10;Description&#10;     Determines the best content-type to use based on the $supported types the application says it supports, and the types requested by the client.&#10;&#10;Parameters:&#10;    array $supported&#10;    boolean $strictMatch - If TRUE, will return an empty string when no match found;;d1,111;;b1,0;;m0;;earray $supported;;pboolean $strictMatch;;p">
</treenode>
<treenode node="parseHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f8;256;2;332;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    parseHeader(string $header): array&#10;&#10;Description&#10;     Parses an Accept* header into it&apos;s multiple values.&#10;&#10;Parameters:&#10;    string $header;;d1,257;;b1,0;;m0;;estring $header;;p">
</treenode>
<treenode node="setRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Negotiate.php;f8;87;2;92;;;;vpos;;v;;a;;r&#10;Definition&#10;    setRequest(RequestInterface $request)&#10;&#10;Description&#10;     Stores the request instance to grab the headers from.&#10;&#10;Parameters:&#10;    RequestInterface $request;;d1,88;;b1,0;;m0;;eRequestInterface $request;;p">
</treenode>
</treenode>
<treenode node="NothingPersonalValidator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\NothingPersonalValidator.php;f0;12;1;241;;;;vpos;;v;;aBaseValidator;;cValidatorInterface;;c;;r&#10;Definition&#10;    class NothingPersonalValidator extends BaseValidator implements ValidatorInterface&#10;&#10;Description&#10;     Class NothingPersonalValidator;;d0,13;;b0,0;;m0;;e">
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\NothingPersonalValidator.php;f11;35;5;45;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    check(string $password, Entity $user = null): bool&#10;&#10;Description&#10;     Returns true if $password contains no part of the username or the user&apos;s email. Otherwise, it returns false. If true is returned the password will be passed to next validator. If false is returned the validation process will be immediately stopped.&#10;&#10;Parameters:&#10;    string $password&#10;    Entity $user;;d4,36;;b1,0;;m0;;estring $password;;pEntity $user;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\NothingPersonalValidator.php;f11;223;5;226;;;;vpos;;v;;astring;;r&#10;Definition&#10;    error(): string&#10;&#10;Description&#10;     Returns the error string that should be displayed to the user.;;d4,224;;b1,0;;m0;;e">
</treenode>
<treenode node="isNotPersonal;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\NothingPersonalValidator.php;f14;68;5;152;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isNotPersonal($password, $user)&#10;&#10;Description&#10;     isNotPersonal()&#10;&#10;Parameters:&#10;    string $password&#10;    Entity $user;;d4,69;;b2,0;;m0;;estring $password;;pEntity $user;;p">
</treenode>
<treenode node="isNotSimilar;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\NothingPersonalValidator.php;f14;167;5;193;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isNotSimilar($password, $user)&#10;&#10;Description&#10;     notSimilar() uses $password and $userName to calculate a similarity value. Similarity values equal to, or greater than Myth\Auth\Config::maxSimilarity are rejected for being too much alike and false is returned. Otherwise, true is returned,&#10;&#10;Parameters:&#10;    string $password&#10;    Entity $user;;d4,168;;b2,0;;m0;;estring $password;;pEntity $user;;p">
</treenode>
<treenode node="strip_explode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\NothingPersonalValidator.php;f14;204;5;216;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    strip_explode($str)&#10;&#10;Description&#10;     strip_explode($str)&#10;&#10;Parameters:&#10;    string $str;;d4,205;;b2,0;;m0;;estring $str;;p">
</treenode>
<treenode node="suggestion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\NothingPersonalValidator.php;f11;236;5;239;;;;vpos;;v;;astring;;r&#10;Definition&#10;    suggestion(): string&#10;&#10;Description&#10;     Returns a suggestion that may be displayed to the user to help them choose a better password. The method is required, but a suggestion is optional. May return an empty string instead.;;d4,237;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="NullLogger;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\NullLogger.php;f0;12;1;26;;;;vpos;;v;;aAbstractLogger;;c;;r&#10;Definition&#10;    class NullLogger extends AbstractLogger&#10;&#10;Description&#10;     This Logger can be used to avoid conditional log calls;;d0,13;;b0,0;;m0;;e">
<treenode node="log;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\PSR\Log\NullLogger.php;f11;22;5;25;;;;vpos;;v;;anull;;r&#10;Definition&#10;    log($level, $message, array $context = [])&#10;&#10;Description&#10;     Logs with an arbitrary level.&#10;&#10;Parameters:&#10;    mixed $level&#10;    string $message&#10;    array $context;;d4,23;;b1,0;;m0;;emixed $level;;pstring $message;;parray $context;;p">
</treenode>
</treenode>
<treenode node="OpenSSLHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Handlers\OpenSSLHandler.php;f0;46;1;174;;;;vpos;;v;;aBaseHandler;;c;;r&#10;Definition&#10;    class OpenSSLHandler extends BaseHandler&#10;&#10;Description&#10;     Encryption handling for OpenSSL library;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Handlers\OpenSSLHandler.php;f8;68;2;71;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(BaseConfig $config = null)&#10;&#10;Description&#10;     Initialize OpenSSL, remembering parameters&#10;&#10;Parameters:&#10;    BaseConfig $config;;d1,69;;b1,0;;m0;;eBaseConfig $config;;p">
</treenode>
<treenode node="decrypt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Handlers\OpenSSLHandler.php;f8;130;2;172;;;;vpos;;v;;astring;;r&#10;Definition&#10;    decrypt($data, $params = null)&#10;&#10;Description&#10;     Decrypt ciphertext, with optional HMAC and base64 encoding&#10;&#10;Parameters:&#10;    string $data - Encrypted data&#10;    array $params - Over-ridden parameters, specifically the key;;d1,131;;b1,0;;m0;;estring $data;;parray $params;;p">
</treenode>
<treenode node="encrypt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Encryption\Handlers\OpenSSLHandler.php;f8;81;2;118;;;;vpos;;v;;astring;;r&#10;Definition&#10;    encrypt($data, $params = null)&#10;&#10;Description&#10;     Encrypt plaintext, with optional HMAC and base64 encoding&#10;&#10;Parameters:&#10;    string $data - Input data&#10;    array $params - Over-ridden parameters, specifically the key;;d1,82;;b1,0;;m0;;estring $data;;parray $params;;p">
</treenode>
</treenode>
<treenode node="PageNotFoundException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\PageNotFoundException.php;f0;2;1;30;;;;vpos;;v;;aOutOfBoundsException;;cExceptionInterface;;c;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="forControllerNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\PageNotFoundException.php;f15;21;2;24;;;;vpos;;v;;a;;r;;d1,22;;b1,5;;m0;;econtroller;;pmethod;;p">
</treenode>
<treenode node="forEmptyController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\PageNotFoundException.php;f15;16;2;19;;;;vpos;;v;;a;;r;;d1,17;;b1,5;;m0;;e">
</treenode>
<treenode node="forMethodNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\PageNotFoundException.php;f15;26;2;29;;;;vpos;;v;;a;;r;;d1,27;;b1,5;;m0;;emethod;;p">
</treenode>
<treenode node="forPageNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Exceptions\PageNotFoundException.php;f15;11;2;14;;;;vpos;;v;;a;;r;;d1,12;;b1,5;;m0;;emessage;;p">
</treenode>
</treenode>
<treenode node="Pager;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f0;54;1;579;;O:\xampp\htdocs\2020\blog-4\app\Config\Pager.php;f0;4;1;34;;;;vpos;;v;;aPagerInterface;;c;;r&#10;Definition&#10;    class Pager implements PagerInterface&#10;&#10;Description&#10;     Class Pager;;d0,55;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;100;2;104;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config, RendererInterface $view)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    type $config&#10;    RendererInterface $view;;d1,101;;b1,0;;m0;;etype $config;;pRendererInterface $view;;p">
</treenode>
<treenode node="calculateCurrentPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f11;555;2;576;;;;vpos;;v;;a;;r&#10;Definition&#10;    calculateCurrentPage(string $group)&#10;&#10;Description&#10;     Calculating the current page&#10;&#10;Parameters:&#10;    string $group;;d1,556;;b2,0;;m0;;estring $group;;p">
</treenode>
<treenode node="displayLinks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f11;175;2;186;;;;vpos;;v;;astring;;r&#10;Definition&#10;    displayLinks(string $group, string $template): string&#10;&#10;Description&#10;     Does the actual work of displaying the view file. Used internally by links(), simpleLinks(), and makeLinks().&#10;&#10;Parameters:&#10;    string $group&#10;    string $template;;d1,176;;b2,0;;m0;;estring $group;;pstring $template;;p">
</treenode>
<treenode node="ensureGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f11;524;2;546;;;;vpos;;v;;a;;r&#10;Definition&#10;    ensureGroup(string $group, int $perPage = null)&#10;&#10;Description&#10;     Ensures that an array exists for the group specified.&#10;&#10;Parameters:&#10;    string $group&#10;    integer $perPage;;d1,525;;b2,0;;m0;;estring $group;;pinteger $perPage;;p">
</treenode>
<treenode node="getCurrentPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;287;2;292;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getCurrentPage(string $group = &apos;default&apos;): int&#10;&#10;Description&#10;     Returns the number of the current page of results.&#10;&#10;Parameters:&#10;    string|null $group;;d1,288;;b1,0;;m0;;estring|null $group;;p">
</treenode>
<treenode node="getDetails;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;484;2;498;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getDetails(string $group = &apos;default&apos;): array&#10;&#10;Description&#10;     Returns an array with details about the results, including total, per_page, current_page, last_page, next_url, prev_url, from, to. Does not include the actual data. This data is suitable for adding a &apos;data&apos; object to with the result set and converting to JSON.&#10;&#10;Parameters:&#10;    string $group;;d1,485;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getFirstPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;340;2;346;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getFirstPage(string $group = &apos;default&apos;): int&#10;&#10;Description&#10;     Determines the first page # that should be shown.&#10;&#10;Parameters:&#10;    string $group;;d1,341;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getLastPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;319;2;329;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getLastPage(string $group = &apos;default&apos;)&#10;&#10;Description&#10;     Returns the last page, if we have a total that we can calculate with.&#10;&#10;Parameters:&#10;    string $group&#10;&#10;Return:&#10;   |null;;d1,320;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getNextPageURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;404;2;423;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getNextPageURI(string $group = &apos;default&apos;, bool $returnObject = false)&#10;&#10;Description&#10;     Returns the full URI to the next page of results, or null.&#10;&#10;Parameters:&#10;    string $group&#10;    boolean $returnObject&#10;&#10;Return:&#10;   |null;;d1,405;;b1,0;;m0;;estring $group;;pboolean $returnObject;;p">
</treenode>
<treenode node="getPageCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;271;2;276;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getPageCount(string $group = &apos;default&apos;): int&#10;&#10;Description&#10;     Returns the total number of pages.&#10;&#10;Parameters:&#10;    string|null $group;;d1,272;;b1,0;;m0;;estring|null $group;;p">
</treenode>
<treenode node="getPageURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;359;2;392;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getPageURI(int $page = null, string $group = &apos;default&apos;, bool $returnObject = false)&#10;&#10;Description&#10;     Returns the URI for a specific page for the specified group.&#10;&#10;Parameters:&#10;    integer|null $page&#10;    string $group&#10;    boolean $returnObject&#10;&#10;Return:&#10;   |\CodeIgniter\HTTP\URI;;d1,360;;b1,0;;m0;;einteger|null $page;;pstring $group;;pboolean $returnObject;;p">
</treenode>
<treenode node="getPerPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;465;2;470;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getPerPage(string $group = &apos;default&apos;): int&#10;&#10;Description&#10;     Returns the number of results per page that should be shown.&#10;&#10;Parameters:&#10;    string $group;;d1,466;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getPreviousPageURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;435;2;454;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getPreviousPageURI(string $group = &apos;default&apos;, bool $returnObject = false)&#10;&#10;Description&#10;     Returns the full URL to the previous page of results, or null.&#10;&#10;Parameters:&#10;    string $group&#10;    boolean $returnObject&#10;&#10;Return:&#10;   |null;;d1,436;;b1,0;;m0;;estring $group;;pboolean $returnObject;;p">
</treenode>
<treenode node="hasMore;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;303;2;308;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasMore(string $group = &apos;default&apos;): bool&#10;&#10;Description&#10;     Tells whether this group of results has any more pages of results.&#10;&#10;Parameters:&#10;    string|null $group;;d1,304;;b1,0;;m0;;estring|null $group;;p">
</treenode>
<treenode node="links;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;116;2;121;;;;vpos;;v;;astring;;r&#10;Definition&#10;    links(string $group = &apos;default&apos;, string $template = &apos;default_full&apos;): string&#10;&#10;Description&#10;     Handles creating and displaying the&#10;&#10;Parameters:&#10;    string $group&#10;    string $template - The output template alias to render;;d1,117;;b1,0;;m0;;estring $group;;pstring $template;;p">
</treenode>
<treenode node="makeLinks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;155;2;162;;;;vpos;;v;;astring;;r&#10;Definition&#10;    makeLinks(int $page, int $perPage = null, int $total, string $template = &apos;default_full&apos;, int $segment = 0, ?string $group = &apos;default&apos;): string&#10;&#10;Description&#10;     Allows for a simple, manual, form of pagination where all of the data is provided by the user. The URL is the current URI.&#10;&#10;Parameters:&#10;    integer $page&#10;    integer $perPage&#10;    integer $total&#10;    string $template - The output template alias to render&#10;    integer $segment - (if page number is provided by URI segment)&#10;    string $group - optional group (i;;d1,156;;b1,0;;m0;;einteger $page;;pinteger $perPage;;pinteger $total;;pstring $template;;pinteger $segment;;pstring $group;;p">
</treenode>
<treenode node="only;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;509;2;514;;;;vpos;;v;;aPager;;r&#10;Definition&#10;    only(array $queries):Pager&#10;&#10;Description&#10;     Sets only allowed queries on pagination links.&#10;&#10;Parameters:&#10;    array $queries;;d1,510;;b1,0;;m0;;earray $queries;;p">
</treenode>
<treenode node="setPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;253;2;260;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    setPath(string $path, string $group = &apos;default&apos;)&#10;&#10;Description&#10;     Sets the path that an aliased group of links will use.&#10;&#10;Parameters:&#10;    string $path&#10;    string $group;;d1,254;;b1,0;;m0;;estring $path;;pstring $group;;p">
</treenode>
<treenode node="setSegment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;236;2;241;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    setSegment(int $number, string $group = &apos;default&apos;)&#10;&#10;Description&#10;     Sets segment for a group.&#10;&#10;Parameters:&#10;    integer $number&#10;    string $group;;d1,237;;b1,0;;m0;;einteger $number;;pstring $group;;p">
</treenode>
<treenode node="simpleLinks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;133;2;138;;;;vpos;;v;;astring;;r&#10;Definition&#10;    simpleLinks(string $group = &apos;default&apos;, string $template = &apos;default_simple&apos;): string&#10;&#10;Description&#10;     Creates simple Next/Previous links, instead of full pagination.&#10;&#10;Parameters:&#10;    string $group&#10;    string $template;;d1,134;;b1,0;;m0;;estring $group;;pstring $template;;p">
</treenode>
<treenode node="store;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Pager.php;f8;202;2;224;;;;vpos;;v;;a;;r&#10;Definition&#10;    store(string $group, int $page, int $perPage = null, int $total, int $segment = 0)&#10;&#10;Description&#10;     Stores a set of pagination data for later display. Most commonly used by the model to automate the process.&#10;&#10;Parameters:&#10;    string $group&#10;    integer $page&#10;    integer $perPage&#10;    integer $total&#10;    integer $segment;;d1,203;;b1,0;;m0;;estring $group;;pinteger $page;;pinteger $perPage;;pinteger $total;;pinteger $segment;;p">
</treenode>
</treenode>
<treenode node="PagerException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Exceptions\PagerException.php;f0;5;1;16;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="forInvalidPaginationGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Exceptions\PagerException.php;f15;12;2;15;;;;vpos;;v;;a;;r;;d1,13;;b1,5;;m0;;egroup;;p">
</treenode>
<treenode node="forInvalidTemplate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\Exceptions\PagerException.php;f15;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,5;;m0;;etemplate;;p">
</treenode>
</treenode>
<treenode node="PagerRenderer;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f0;50;1;427;;;;vpos;;v;;a;;r&#10;Definition&#10;    class PagerRenderer&#10;&#10;Description&#10;     Class PagerRenderer;;d0,51;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;109;2;119;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(array $details)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    array $details;;d1,110;;b1,0;;m0;;earray $details;;p">
</treenode>
<treenode node="getCurrent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;280;2;294;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getCurrent(): string&#10;&#10;Description&#10;     Returns the URI of the current page.;;d1,281;;b1,0;;m0;;e">
</treenode>
<treenode node="getFirst;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;234;2;248;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getFirst(): string&#10;&#10;Description&#10;     Returns the URI of the first page.;;d1,235;;b1,0;;m0;;e">
</treenode>
<treenode node="getLast;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;257;2;271;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getLast(): string&#10;&#10;Description&#10;     Returns the URI of the last page.;;d1,258;;b1,0;;m0;;e">
</treenode>
<treenode node="getNext;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;206;2;225;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getNext()&#10;&#10;Description&#10;     Returns a URL to the &quot;next&quot; page. The next page is NOT, the page after the current page, but is the page that follows the &quot;last&quot; page.&#10;&#10;Return:&#10;   |null;;d1,207;;b1,0;;m0;;e">
</treenode>
<treenode node="getNextPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;407;2;426;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getNextPage()&#10;&#10;Description&#10;     Returns a URL to the &quot;next&quot; page.&#10;&#10;Return:&#10;   |null;;d1,408;;b1,0;;m0;;e">
</treenode>
<treenode node="getPrevious;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;162;2;181;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getPrevious()&#10;&#10;Description&#10;     Returns a URL to the &quot;previous&quot; page. The previous page is NOT the page before the current page, but is the page just before the &quot;first&quot; page.&#10;&#10;Return:&#10;   |null;;d1,163;;b1,0;;m0;;e">
</treenode>
<treenode node="getPreviousPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;365;2;384;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getPreviousPage()&#10;&#10;Description&#10;     Returns a URL to the &quot;previous&quot; page.&#10;&#10;Return:&#10;   |null;;d1,366;;b1,0;;m0;;e">
</treenode>
<treenode node="hasNext;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;190;2;193;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasNext(): bool&#10;&#10;Description&#10;     Checks to see if there is a &quot;next&quot; page after our &quot;last&quot; page.;;d1,191;;b1,0;;m0;;e">
</treenode>
<treenode node="hasNextPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;393;2;396;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasNextPage(): bool&#10;&#10;Description&#10;     Checks to see if there is a &quot;next&quot; page after our &quot;last&quot; page.;;d1,394;;b1,0;;m0;;e">
</treenode>
<treenode node="hasPrevious;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;146;2;149;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasPrevious(): bool&#10;&#10;Description&#10;     Checks to see if there is a &quot;previous&quot; page before our &quot;first&quot; page.;;d1,147;;b1,0;;m0;;e">
</treenode>
<treenode node="hasPreviousPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;351;2;354;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasPreviousPage(): bool&#10;&#10;Description&#10;     Checks to see if there is a &quot;previous&quot; page before our &quot;first&quot; page.;;d1,352;;b1,0;;m0;;e">
</treenode>
<treenode node="links;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;306;2;322;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    links(): array&#10;&#10;Description&#10;     Returns an array of links that should be displayed. Each link is represented by another array containing of the URI the link should go to, the title (number) of the link, and a boolean value representing whether this link is active or not.;;d1,307;;b1,0;;m0;;e">
</treenode>
<treenode node="setSurroundCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f8;132;2;137;;;;vpos;;v;;aPagerRenderer;;r&#10;Definition&#10;    setSurroundCount(int $count = null)&#10;&#10;Description&#10;     Sets the total number of links that should appear on either side of the current page. Adjusts the first and last counts to reflect it.&#10;&#10;Parameters:&#10;    integer|null $count;;d1,133;;b1,0;;m0;;einteger|null $count;;p">
</treenode>
<treenode node="updatePages;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Pager\PagerRenderer.php;f11;333;2;342;;;;vpos;;v;;a;;r&#10;Definition&#10;    updatePages(int $count = null)&#10;&#10;Description&#10;     Updates the first and last pages based on $surroundCount, which is the number of links surrounding the active page to show.&#10;&#10;Parameters:&#10;    integer|null $count - The new &quot;surroundCount&quot;;;d1,334;;b2,0;;m0;;einteger|null $count;;p">
</treenode>
</treenode>
<treenode node="pages;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Pages.php;f0;2;1;15;;;;vpos;;v;;aBaseController;;c;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="index;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Pages.php;f8;4;2;8;;;;vpos;;v;;a;;r;;d1,5;;b1,0;;m0;;e">
</treenode>
<treenode node="new;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Pages.php;f8;9;2;12;;;;vpos;;v;;a;;r;;d1,10;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="ParameterObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ParameterObject.php;f0;31;1;99;;;;vpos;;v;;aBasicObject;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ParameterObject.php;f11;38;5;83;;;;vpos;;v;;a;;r;;d4,39;;b1,0;;m0;;eparam;;p">
</treenode>
<treenode node="getDefault;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ParameterObject.php;f11;95;5;98;;;;vpos;;v;;a;;r;;d4,96;;b1,0;;m0;;e">
</treenode>
<treenode node="getName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ParameterObject.php;f11;90;5;93;;;;vpos;;v;;a;;r;;d4,91;;b1,0;;m0;;e">
</treenode>
<treenode node="getType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ParameterObject.php;f11;85;5;88;;;;vpos;;v;;a;;r;;d4,86;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Parser;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f0;51;1;866;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f0;37;1;603;;;;vpos;;v;;aView;;c;;r&#10;Definition&#10;    class Parser extends View&#10;&#10;Description&#10;     Class Parser;;d0,52;;b0,0;;m0;;e">
<treenode node="TRIGGER_BEGIN;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f9;53;23;53;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="TRIGGER_COMPLETE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f9;57;26;57;;;;vpos;;v;;a;;r14;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="TRIGGER_DEPTH_LIMIT;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f9;56;29;56;;;;vpos;;v;;a;;r8;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="TRIGGER_NONE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f9;52;22;52;;;;vpos;;v;;a;;r&#10;Description&#10;     Plugin triggers.;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="TRIGGER_RECURSION;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f9;55;27;55;;;;vpos;;v;;a;;r4;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="TRIGGER_SUCCESS;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f9;54;25;54;;;;vpos;;v;;a;;r2;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f8;101;2;107;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;70;5;79;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config, string $viewPath = null, $loader = null, bool $debug = null, LoggerInterface $logger = null)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    \Config\View $config&#10;    string $viewPath&#10;    mixed $loader&#10;    boolean $debug&#10;    LoggerInterface $logger;;d1,102;;b1,0;;m0;;e\Config\View $config;;pstring $viewPath;;pmixed $loader;;pboolean $debug;;pLoggerInterface $logger;;p">
</treenode>
<treenode node="addPlugin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f8;817;2;822;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;172;5;202;;;;vpos;;v;;a;;r&#10;Definition&#10;    addPlugin(string $alias, callable $callback, bool $isPair = false)&#10;&#10;Description&#10;     Makes a new plugin available during the parsing of the template.&#10;&#10;Parameters:&#10;    string $alias&#10;    callable $callback&#10;    boolean $isPair;;d1,818;;b1,0;;m0;;estring $alias;;pcallable $callback;;pboolean $isPair;;p">
</treenode>
<treenode node="applyFilters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;701;2;741;;;;vpos;;v;;astring;;r&#10;Definition&#10;    applyFilters(string $replace, array $filters): string&#10;&#10;Description&#10;     Given a set of filters, will apply each of the filters in turn to $replace, and return the modified string.&#10;&#10;Parameters:&#10;    string $replace&#10;    array $filters;;d1,702;;b2,0;;m0;;estring $replace;;parray $filters;;p">
</treenode>
<treenode node="applyPlugins;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f12;569;5;602;;;;vpos;;v;;abool;;r&#10;Definition&#10;    applyPlugins(&amp;$var, BasicObject &amp;$o, $trigger)&#10;&#10;Description&#10;     Applies plugins for an object type.&#10;&#10;Parameters:&#10;    mixed $var - variable&#10;    BasicObject $o - Kint object parsed so far&#10;    int $trigger - The trigger to check for the plugins&#10;&#10;Return:&#10;   Continue parsing;;d4,570;;b3,0;;m0;;emixed $var;;pBasicObject $o;;pint $trigger;;p">
</treenode>
<treenode node="childHasPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;214;5;241;;;;vpos;;v;;a;;r;;d4,215;;b1,0;;m0;;eparent;;pchild;;p">
</treenode>
<treenode node="clearPlugins;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;204;5;207;;;;vpos;;v;;a;;r;;d4,205;;b1,0;;m0;;e">
</treenode>
<treenode node="extractNoparse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;464;2;484;;;;vpos;;v;;astring;;r&#10;Definition&#10;    extractNoparse(string $template): string&#10;&#10;Description&#10;     Extracts noparse blocks, inserting a hash in its place so that those blocks of the page are not touched by parsing.&#10;&#10;Parameters:&#10;    string $template;;d1,465;;b2,0;;m0;;estring $template;;p">
</treenode>
<treenode node="getCallerClass;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;93;5;96;;;;vpos;;v;;a;;r;;d4,94;;b1,0;;m0;;e">
</treenode>
<treenode node="getCleanArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;253;5;258;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getCleanArray(array $array)&#10;&#10;Description&#10;     Returns an array without the recursion marker in it.&#10;&#10;Parameters:&#10;    array $array - Array potentially containing a recursion marker&#10;&#10;Return:&#10;   Array with recursion marker removed;;d4,254;;b1,0;;m0;;earray $array;;p">
</treenode>
<treenode node="getDepthLimit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;110;5;113;;;;vpos;;v;;a;;r;;d4,111;;b1,0;;m0;;e">
</treenode>
<treenode node="haltParse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;209;5;212;;;;vpos;;v;;a;;r;;d4,210;;b1,0;;m0;;e">
</treenode>
<treenode node="insertNoparse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f8;495;2;504;;;;vpos;;v;;astring;;r&#10;Definition&#10;    insertNoparse(string $template): string&#10;&#10;Description&#10;     Re-inserts the noparsed contents back into the template.&#10;&#10;Parameters:&#10;    string $template;;d1,496;;b1,0;;m0;;estring $template;;p">
</treenode>
<treenode node="noRecurseCall;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f14;260;5;277;;;;vpos;;v;;a;;r;;d4,261;;b2,0;;m0;;e">
</treenode>
<treenode node="objectToArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;848;2;863;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    objectToArray($value)&#10;&#10;Description&#10;     Converts an object to an array, respecting any toArray() methods on an object.&#10;&#10;Parameters:&#10;     $value;;d1,849;;b2,0;;m0;;e $value;;p">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;278;2;322;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;145;5;170;;;;vpos;;v;;astring;;r&#10;Definition&#10;    parse(string $template, array $data = [], array $options = null): string&#10;&#10;Description&#10;     Parse a template&#10;&#10;Parameters:&#10;    string $template&#10;    array $data&#10;    array $options - Future options;;d1,279;;b2,0;;m0;;estring $template;;parray $data;;parray $options;;p">
</treenode>
<treenode node="parseArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f12;327;5;410;;;;vpos;;v;;aBasicObject;;r&#10;Definition&#10;    parseArray(array &amp;$var, BasicObject $o)&#10;&#10;Description&#10;     Parses an array into a Kint object structure.&#10;&#10;Parameters:&#10;    array $var - The input variable&#10;    BasicObject $o - The base object;;d4,328;;b3,0;;m0;;earray $var;;pBasicObject $o;;p">
</treenode>
<treenode node="parseComments;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;449;2;452;;;;vpos;;v;;astring;;r&#10;Definition&#10;    parseComments(string $template): string&#10;&#10;Description&#10;     Removes any comments from the file. Comments are wrapped in {# #} symbols:&#10;&#10;Parameters:&#10;    string $template;;d1,450;;b2,0;;m0;;estring $template;;p">
</treenode>
<treenode node="parseConditionals;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;521;2;567;;;;vpos;;v;;astring;;r&#10;Definition&#10;    parseConditionals(string $template): string&#10;&#10;Description&#10;     Parses any conditionals in the code, removing blocks that don&apos;t pass so we don&apos;t try to parse it later.&#10;&#10;Parameters:&#10;    string $template;;d1,522;;b2,0;;m0;;estring $template;;p">
</treenode>
<treenode node="parseDeep;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;125;5;135;;;;vpos;;v;;aBasicObject;;r&#10;Definition&#10;    parseDeep(&amp;$var, BasicObject $o)&#10;&#10;Description&#10;     Disables the depth limit and parses a variable.&#10;&#10;Parameters:&#10;    mixed $var - The input variable&#10;    BasicObject $o - The base object;;d4,126;;b1,0;;m0;;emixed $var;;pBasicObject $o;;p">
</treenode>
<treenode node="parseGeneric;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f12;279;5;290;;;;vpos;;v;;a;;r;;d4,280;;b3,0;;m0;;evar;;po;;p">
</treenode>
<treenode node="parseObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f12;420;5;523;;;;vpos;;v;;aBasicObject;;r&#10;Definition&#10;    parseObject(&amp;$var, BasicObject $o)&#10;&#10;Description&#10;     Parses an object into a Kint InstanceObject structure.&#10;&#10;Parameters:&#10;    object $var - The input variable&#10;    BasicObject $o - The base object;;d4,421;;b3,0;;m0;;eobject $var;;pBasicObject $o;;p">
</treenode>
<treenode node="parsePair;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;352;2;436;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    parsePair(string $variable, array $data, string $template): array&#10;&#10;Description&#10;     Parse a tag pair&#10;&#10;Parameters:&#10;    string $variable&#10;    array $data&#10;    string $template;;d1,353;;b2,0;;m0;;estring $variable;;parray $data;;pstring $template;;p">
</treenode>
<treenode node="parsePlugins;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;757;2;805;;;;vpos;;v;;astring;;r&#10;Definition&#10;    parsePlugins(string $template)&#10;&#10;Description&#10;     Scans the template for any parser plugins, and attempts to execute them. Plugins are notated based on {+ +} opening and closing braces.&#10;&#10;Parameters:&#10;    string $template;;d1,758;;b2,0;;m0;;estring $template;;p">
</treenode>
<treenode node="parseResource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f12;533;5;542;;;;vpos;;v;;aBasicObject;;r&#10;Definition&#10;    parseResource(&amp;$var, BasicObject $o)&#10;&#10;Description&#10;     Parses a resource into a Kint ResourceObject structure.&#10;&#10;Parameters:&#10;    resource $var - The input variable&#10;    BasicObject $o - The base object;;d4,534;;b3,0;;m0;;eresource $var;;pBasicObject $o;;p">
</treenode>
<treenode node="parseSingle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;333;2;338;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    parseSingle(string $key, string $val): array&#10;&#10;Description&#10;     Parse a single key/value, extracting it&#10;&#10;Parameters:&#10;    string $key&#10;    string $val;;d1,334;;b2,0;;m0;;estring $key;;pstring $val;;p">
</treenode>
<treenode node="parseString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f12;300;5;317;;;;vpos;;v;;aBasicObject;;r&#10;Definition&#10;    parseString(&amp;$var, BasicObject $o)&#10;&#10;Description&#10;     Parses a string into a Kint BlobObject structure.&#10;&#10;Parameters:&#10;    string $var - The input variable&#10;    BasicObject $o - The base object;;d4,301;;b3,0;;m0;;estring $var;;pBasicObject $o;;p">
</treenode>
<treenode node="parseUnknown;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f12;552;5;558;;;;vpos;;v;;aBasicObject;;r&#10;Definition&#10;    parseUnknown(&amp;$var, BasicObject $o)&#10;&#10;Description&#10;     Parses an unknown into a Kint object structure.&#10;&#10;Parameters:&#10;    mixed $var - The input variable&#10;    BasicObject $o - The base object;;d4,553;;b3,0;;m0;;emixed $var;;pBasicObject $o;;p">
</treenode>
<treenode node="prepareReplacement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;628;2;645;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prepareReplacement(array $matches, string $replace, bool $escape = true): string&#10;&#10;Description&#10;     Callback used during parse() to apply any filters to the value.&#10;&#10;Parameters:&#10;    array $matches&#10;    string $replace&#10;    boolean $escape;;d1,629;;b2,0;;m0;;earray $matches;;pstring $replace;;pboolean $escape;;p">
</treenode>
<treenode node="removePlugin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f8;833;2;838;;;;vpos;;v;;a;;r&#10;Definition&#10;    removePlugin(string $alias)&#10;&#10;Description&#10;     Removes a plugin from the available plugins.&#10;&#10;Parameters:&#10;    string $alias;;d1,834;;b1,0;;m0;;estring $alias;;p">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f8;123;2;179;;;;vpos;;v;;astring;;r&#10;Definition&#10;    render(string $view, array $options = null, bool $saveData = null): string&#10;&#10;Description&#10;     Parse a template&#10;&#10;Parameters:&#10;    string $view&#10;    array $options&#10;    boolean $saveData;;d1,124;;b1,0;;m0;;estring $view;;parray $options;;pboolean $saveData;;p">
</treenode>
<treenode node="renderString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f8;195;2;220;;;;vpos;;v;;astring;;r&#10;Definition&#10;    renderString(string $template, array $options = null, bool $saveData = null): string&#10;&#10;Description&#10;     Parse a String&#10;&#10;Parameters:&#10;    string $template&#10;    array $options&#10;    boolean $saveData;;d1,196;;b1,0;;m0;;estring $template;;parray $options;;pboolean $saveData;;p">
</treenode>
<treenode node="replaceSingle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f11;598;2;615;;;;vpos;;v;;astring;;r&#10;Definition&#10;    replaceSingle($pattern, $content, $template, bool $escape = false): string&#10;&#10;Description&#10;     Handles replacing a pseudo-variable with the actual content. Will double-check for escaping brackets.&#10;&#10;Parameters:&#10;     $pattern&#10;     $content&#10;     $template&#10;    boolean $escape;;d1,599;;b2,0;;m0;;e $pattern;;p $content;;p $template;;pboolean $escape;;p">
</treenode>
<treenode node="setCallerClass;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;86;5;91;;;;vpos;;v;;a;;r&#10;Definition&#10;    setCallerClass($caller = null)&#10;&#10;Description&#10;     Set the caller class.&#10;&#10;Parameters:&#10;    null|string $caller - Caller class name;;d4,87;;b1,0;;m0;;enull|string $caller;;p">
</treenode>
<treenode node="setData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f8;236;2;262;;;;vpos;;v;;aRendererInterface;;r&#10;Definition&#10;    setData(array $data = [], string $context = null): RendererInterface&#10;&#10;Description&#10;     Sets several pieces of view data at once. In the Parser, we need to store the context here so that the variable is correctly handled within the parsing itself, and contexts (including raw) are respected.&#10;&#10;Parameters:&#10;    array $data&#10;    string $context - The context to escape it for: html, css, js, url, raw;;d1,237;;b1,0;;m0;;earray $data;;pstring $context;;p">
</treenode>
<treenode node="setDelimiters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f8;578;2;583;;;;vpos;;v;;aRendererInterface;;r&#10;Definition&#10;    setDelimiters($leftDelimiter = &apos;{&apos;, $rightDelimiter = &apos;}&apos;): RendererInterface&#10;&#10;Description&#10;     Over-ride the substitution field delimiters.&#10;&#10;Parameters:&#10;    string $leftDelimiter&#10;    string $rightDelimiter;;d1,579;;b1,0;;m0;;estring $leftDelimiter;;pstring $rightDelimiter;;p">
</treenode>
<treenode node="setDepthLimit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Parser.php;f11;103;5;108;;;;vpos;;v;;a;;r&#10;Definition&#10;    setDepthLimit($depth_limit = false)&#10;&#10;Description&#10;     Set the depth limit.&#10;&#10;Parameters:&#10;    false|int $depth_limit - Maximum depth to parse data;;d4,104;;b1,0;;m0;;efalse|int $depth_limit;;p">
</treenode>
<treenode node="shouldAddEscaping;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Parser.php;f8;656;2;688;;;;vpos;;v;;afalse;;r&#10;Definition&#10;    shouldAddEscaping(string $key)&#10;&#10;Description&#10;     Checks the placeholder the view provided to see if we need to provide any autoescaping.&#10;&#10;Parameters:&#10;    string $key&#10;&#10;Return:&#10;   |string;;d1,657;;b1,0;;m0;;estring $key;;p">
</treenode>
</treenode>
<treenode node="PasswordValidator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\PasswordValidator.php;f0;6;1;90;;;;vpos;;v;;a;;r;;d0,7;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\PasswordValidator.php;f8;17;2;20;;;;vpos;;v;;a;;r;;d1,18;;b1,0;;m0;;econfig;;p">
</treenode>
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\PasswordValidator.php;f8;31;2;67;;;;vpos;;v;;abool;;r&#10;Definition&#10;    check(string $password, User $user = null): bool&#10;&#10;Description&#10;     Checks a password against all of the Validators specified in `$passwordValidators` setting in Config\Auth.php.&#10;&#10;Parameters:&#10;    string $password&#10;    User $user;;d1,32;;b1,0;;m0;;estring $password;;pUser $user;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\PasswordValidator.php;f8;75;2;78;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    error()&#10;&#10;Description&#10;     Returns the current error, as defined by validator it failed to pass.;;d1,76;;b1,0;;m0;;e">
</treenode>
<treenode node="suggestion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\PasswordValidator.php;f8;86;2;89;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    suggestion()&#10;&#10;Description&#10;     Returns a string with any suggested fix based on the validator it failed to pass.;;d1,87;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Paths;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\Paths.php;f0;11;1;72;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Paths&#10;&#10;Description&#10;     Holds the paths that are used by the system to locate the main directories, app, system, etc. Modifying these allows you to re-structure your application, share a system folder between multiple applications, and more.;;d0,12;;b0,0;;m0;;e">
</treenode>
<treenode node="PermissionException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\PermissionException.php;f0;2;1;4;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r;;d0,3;;b0,0;;m0;;e">
</treenode>
<treenode node="PermissionFaker;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Test\Fakers\PermissionFaker.php;f0;5;1;21;;;;vpos;;v;;aPermissionModel;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="fake;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Test\Fakers\PermissionFaker.php;f8;14;2;20;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    fake(Generator &amp;$faker): array&#10;&#10;Description&#10;     Faked data for Fabricator.&#10;&#10;Parameters:&#10;    Generator $faker;;d1,15;;b1,0;;m0;;eGenerator $faker;;p">
</treenode>
</treenode>
<treenode node="PermissionFilter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Filters\PermissionFilter.php;f0;8;1;89;;;;vpos;;v;;aFilterInterface;;c;;r;;d0,9;;b0,0;;m0;;e">
<treenode node="after;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Filters\PermissionFilter.php;f8;83;2;86;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    after(RequestInterface $request, ResponseInterface $response, $arguments = null)&#10;&#10;Description&#10;     Allows After filters to inspect and modify the response object as needed. This method does not allow any way to stop execution of other after filters, short of throwing an Exception or Error.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    \CodeIgniter\HTTP\ResponseInterface $response&#10;    array|null $arguments;;d1,84;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;p\CodeIgniter\HTTP\ResponseInterface $response;;parray|null $arguments;;p">
</treenode>
<treenode node="before;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Filters\PermissionFilter.php;f8;25;2;67;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    before(RequestInterface $request, $params = null)&#10;&#10;Description&#10;     Do whatever processing this filter needs to do. By default it should not return anything during normal execution. However, when an abnormal state is found, it should return an instance of CodeIgniter\HTTP\Response. If it does, script execution will end and that Response will be sent back to the client, allowing for error pages, redirects, etc.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    array|null $params;;d1,26;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;parray|null $params;;p">
</treenode>
</treenode>
<treenode node="PermissionModel;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\PermissionModel.php;f0;4;1;128;;;;vpos;;v;;aModel;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="addPermissionToUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\PermissionModel.php;f11;56;5;64;;;;vpos;;v;;a;;r&#10;Definition&#10;    addPermissionToUser(int $permissionId, int $userId)&#10;&#10;Description&#10;     Adds a single permission to a single user.&#10;&#10;Parameters:&#10;    int $permissionId&#10;    int $userId;;d4,57;;b1,0;;m0;;eint $permissionId;;pint $userId;;p">
</treenode>
<treenode node="doesUserHavePermission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\PermissionModel.php;f11;28;5;46;;;;vpos;;v;;abool;;r&#10;Definition&#10;    doesUserHavePermission(int $userId, int $permissionId): bool&#10;&#10;Description&#10;     Checks to see if a user, or one of their groups, has a specific permission.&#10;&#10;Parameters:&#10;     $userId&#10;     $permissionId;;d4,29;;b1,0;;m0;;e $userId;;p $permissionId;;p">
</treenode>
<treenode node="getPermissionsForUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\PermissionModel.php;f11;97;5;127;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getPermissionsForUser(int $userId): array&#10;&#10;Description&#10;     Gets all permissions for a user in a way that can be easily used to check against:&#10;&#10;Parameters:&#10;    int $userId;;d4,98;;b1,0;;m0;;eint $userId;;p">
</treenode>
<treenode node="removePermissionFromUser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authorization\PermissionModel.php;f11;74;5;82;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    removePermissionFromUser(int $permissionId, int $userId)&#10;&#10;Description&#10;     Removes a permission from a user.&#10;&#10;Parameters:&#10;    int $permissionId&#10;    int $userId;;d4,75;;b1,0;;m0;;eint $permissionId;;pint $userId;;p">
</treenode>
</treenode>
<treenode node="PlainRenderer;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f0;31;1;236;;;;vpos;;v;;aTextRenderer;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;65;5;74;;;;vpos;;v;;a;;r;;d4,66;;b1,0;;m0;;e">
</treenode>
<treenode node="colorTitle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;115;5;118;;;;vpos;;v;;a;;r;;d4,116;;b1,0;;m0;;estring;;p">
</treenode>
<treenode node="colorType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;110;5;113;;;;vpos;;v;;a;;r;;d4,111;;b1,0;;m0;;estring;;p">
</treenode>
<treenode node="colorValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;105;5;108;;;;vpos;;v;;a;;r;;d4,106;;b1,0;;m0;;estring;;p">
</treenode>
<treenode node="escape;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;192;5;212;;;;vpos;;v;;a;;r;;d4,193;;b1,0;;m0;;estring;;pencoding;;p">
</treenode>
<treenode node="getPreRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;100;5;103;;;;vpos;;v;;a;;r;;d4,101;;b1,0;;m0;;e">
</treenode>
<treenode node="ideLink;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;174;5;190;;;;vpos;;v;;a;;r;;d4,175;;b1,0;;m0;;efile;;pline;;p">
</treenode>
<treenode node="postRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;165;5;172;;;;vpos;;v;;a;;r;;d4,166;;b1,0;;m0;;e">
</treenode>
<treenode node="preRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;129;5;163;;;;vpos;;v;;a;;r;;d4,130;;b1,0;;m0;;e">
</treenode>
<treenode node="renderCss;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f21;228;5;235;;;;vpos;;v;;a;;r;;d4,229;;b2,5;;m0;;e">
</treenode>
<treenode node="renderJs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f21;223;5;226;;;;vpos;;v;;a;;r;;d4,224;;b2,5;;m0;;e">
</treenode>
<treenode node="renderTitle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;120;5;127;;;;vpos;;v;;a;;r;;d4,121;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="setCallInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;76;5;83;;;;vpos;;v;;a;;r;;d4,77;;b1,0;;m0;;einfo;;p">
</treenode>
<treenode node="setPreRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;94;5;98;;;;vpos;;v;;a;;r;;d4,95;;b1,0;;m0;;epre_render;;p">
</treenode>
<treenode node="setStatics;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f11;85;5;92;;;;vpos;;v;;a;;r;;d4,86;;b1,0;;m0;;estatics;;p">
</treenode>
<treenode node="utf8ToHtmlentity;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\PlainRenderer.php;f14;214;5;221;;;;vpos;;v;;a;;r;;d4,215;;b2,0;;m0;;estring;;p">
</treenode>
</treenode>
<treenode node="Plugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\Plugin.php;f9;30;1;40;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\Plugin.php;f9;30;1;89;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Plugin.php;f9;29;1;54;;;;vpos;;v;;a;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\Plugin.php;f11;34;5;37;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\Plugin.php;f11;34;5;37;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m0;;er;;p">
</treenode>
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Plugin.php;f11;48;5;51;;;;vpos;;v;;a;;r;;d4,49;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Plugin.php;f11;43;5;46;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getTypes()&#10;&#10;Description&#10;     An array of types (As returned by gettype) for all data this plugin can operate on.&#10;&#10;Return:&#10;   List of types;;d4,44;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Plugin.php;f20;53;73;53;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;evariable;;po;;ptrigger;;p">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\Plugin.php;f20;39;51;39;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderLockedHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\Plugin.php;f11;45;5;88;;;;vpos;;v;;a;;r&#10;Definition&#10;    renderLockedHeader(BasicObject $o, $content)&#10;&#10;Description&#10;     Renders a locked header.&#10;&#10;Parameters:&#10;    BasicObject $o&#10;    string $content;;d4,46;;b1,0;;m0;;eBasicObject $o;;pstring $content;;p">
</treenode>
<treenode node="setParser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\Plugin.php;f11;33;5;36;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;ep;;p">
</treenode>
</treenode>
<treenode node="Plugins;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\View\Plugins.php;f0;44;1;168;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Plugins&#10;&#10;Description&#10;     View plugins;;d0,45;;b0,0;;m0;;e">
<treenode node="currentURL;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Plugins.php;f15;52;2;55;;;;vpos;;v;;astring;;r&#10;Definition&#10;    currentURL()&#10;&#10;Description&#10;     Wrap helper function to use as view plugin.&#10;&#10;Return:&#10;   |\CodeIgniter\HTTP\URI;;d1,53;;b1,5;;m0;;e">
</treenode>
<treenode node="lang;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Plugins.php;f15;114;2;119;;;;vpos;;v;;astring;;r&#10;Definition&#10;    lang(array $params = []): string&#10;&#10;Description&#10;     Wrap helper function to use as view plugin.&#10;&#10;Parameters:&#10;    array $params;;d1,115;;b1,5;;m0;;earray $params;;p">
</treenode>
<treenode node="mailto;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Plugins.php;f15;78;2;85;;;;vpos;;v;;astring;;r&#10;Definition&#10;    mailto(array $params = []): string&#10;&#10;Description&#10;     Wrap helper function to use as view plugin.&#10;&#10;Parameters:&#10;    array $params;;d1,79;;b1,5;;m0;;earray $params;;p">
</treenode>
<treenode node="previousURL;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Plugins.php;f15;64;2;67;;;;vpos;;v;;a;;r&#10;Definition&#10;    previousURL()&#10;&#10;Description&#10;     Wrap helper function to use as view plugin.;;d1,65;;b1,5;;m0;;e">
</treenode>
<treenode node="route;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Plugins.php;f15;150;2;153;;;;vpos;;v;;astring;;r&#10;Definition&#10;    route(array $params = [])&#10;&#10;Description&#10;     Wrap helper function to use as view plugin.&#10;&#10;Parameters:&#10;    array $params&#10;&#10;Return:&#10;   |false;;d1,151;;b1,5;;m0;;earray $params;;p">
</treenode>
<treenode node="safeMailto;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Plugins.php;f15;96;2;103;;;;vpos;;v;;astring;;r&#10;Definition&#10;    safeMailto(array $params = []): string&#10;&#10;Description&#10;     Wrap helper function to use as view plugin.&#10;&#10;Parameters:&#10;    array $params;;d1,97;;b1,5;;m0;;earray $params;;p">
</treenode>
<treenode node="siteURL;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Plugins.php;f15;164;2;167;;;;vpos;;v;;astring;;r&#10;Definition&#10;    siteURL(array $params = []): string&#10;&#10;Description&#10;     Wrap helper function to use as view plugin.&#10;&#10;Parameters:&#10;    array $params;;d1,165;;b1,5;;m0;;earray $params;;p">
</treenode>
<treenode node="ValidationErrors;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Plugins.php;f15;130;2;139;;;;vpos;;v;;astring;;r&#10;Definition&#10;    ValidationErrors(array $params = []): string&#10;&#10;Description&#10;     Wrap helper function to use as view plugin.&#10;&#10;Parameters:&#10;    array $params;;d1,131;;b1,5;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="Posts;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Posts.php;f0;2;1;27;;;;vpos;;v;;aBaseController;;c;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="categories;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Posts.php;f8;14;2;23;;;;vpos;;v;;a;;r;;d1,15;;b1,0;;m0;;ecategory_id;;p">
</treenode>
<treenode node="index;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Posts.php;f8;4;2;8;;;;vpos;;v;;a;;r;;d1,5;;b1,0;;m0;;e">
</treenode>
<treenode node="new;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\Controllers\Admin\Posts.php;f8;9;2;12;;;;vpos;;v;;a;;r;;d1,10;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="PredisHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f0;46;1;305;;;;vpos;;v;;aCacheInterface;;c;;r&#10;Definition&#10;    class PredisHandler implements CacheInterface&#10;&#10;Description&#10;     Predis cache handler;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;83;2;91;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \Config\Cache $config;;d1,84;;b1,0;;m0;;e\Config\Cache $config;;p">
</treenode>
<treenode node="clean;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;247;2;250;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    clean()&#10;&#10;Description&#10;     Will delete all items in the entire cache.;;d1,248;;b1,0;;m0;;e">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;235;2;238;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    decrement(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic decrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,236;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;205;2;208;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    delete(string $key)&#10;&#10;Description&#10;     Deletes a specific item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,206;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;126;2;154;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get(string $key)&#10;&#10;Description&#10;     Attempts to fetch an item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,127;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getCacheInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;262;2;265;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCacheInfo()&#10;&#10;Description&#10;     Returns information on the entire cache.;;d1,263;;b1,0;;m0;;e">
</treenode>
<treenode node="getMetaData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;276;2;291;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getMetaData(string $key)&#10;&#10;Description&#10;     Returns detailed information about the specific item in the cache.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,277;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;220;2;223;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    increment(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic incrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,221;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;98;2;115;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Takes care of any handler-specific setup that must be done.;;d1,99;;b1,0;;m0;;e">
</treenode>
<treenode node="isSupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;300;2;303;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isSupported(): bool&#10;&#10;Description&#10;     Determines if the driver is supported on this system.;;d1,301;;b1,0;;m0;;e">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\PredisHandler.php;f8;167;2;194;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    save(string $key, $value, int $ttl = 60)&#10;&#10;Description&#10;     Saves an item to the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name&#10;    mixed $value - The data to save&#10;    integer $ttl - Time To Live, in seconds (default 60);;d1,168;;b1,0;;m0;;estring $key;;pmixed $value;;pinteger $ttl;;p">
</treenode>
</treenode>
<treenode node="PreparedQuery;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\PreparedQuery.php;f0;48;1;142;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\PreparedQuery.php;f0;47;1;157;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\PreparedQuery.php;f0;47;1;134;;;;vpos;;v;;aBasePreparedQuery;;cPreparedQueryInterface;;c;;r&#10;Definition&#10;    class PreparedQuery extends BasePreparedQuery implements PreparedQueryInterface&#10;&#10;Description&#10;     Prepared query for SQLite3;;d0,49;;b0,0;;m0;;e">
<treenode node="_execute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\PreparedQuery.php;f8;96;2;126;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\PreparedQuery.php;f8;111;2;121;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\PreparedQuery.php;f8;88;2;119;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    _execute(array $data): bool&#10;&#10;Description&#10;     Takes a new set of data and runs it against the currently prepared query. Upon success, will return a Results object.&#10;&#10;Parameters:&#10;    array $data;;d1,97;;b1,0;;m0;;earray $data;;p">
</treenode>
<treenode node="_getResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\PreparedQuery.php;f8;135;2;138;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\PreparedQuery.php;f8;130;2;133;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\PreparedQuery.php;f8;128;2;131;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    _getResult()&#10;&#10;Description&#10;     Returns the result object for the prepared query.;;d1,136;;b1,0;;m0;;e">
</treenode>
<treenode node="_prepare;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\PreparedQuery.php;f8;73;2;82;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\PreparedQuery.php;f8;82;2;99;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\PreparedQuery.php;f8;63;2;76;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    _prepare(string $sql, array $options = [])&#10;&#10;Description&#10;     Prepares the query against the database, and saves the connection info necessary to execute the query later.&#10;&#10;Parameters:&#10;    string $sql&#10;    array $options - Passed to the connection&apos;s prepare statement;;d1,74;;b1,0;;m0;;estring $sql;;parray $options;;p">
</treenode>
<treenode node="parameterize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\PreparedQuery.php;f8;145;2;154;;;;vpos;;v;;astring;;r&#10;Definition&#10;    parameterize(string $sql): string&#10;&#10;Description&#10;     Replaces the ? placeholders with $1, $2, etc parameters for use within the prepared query.&#10;&#10;Parameters:&#10;    string $sql;;d1,146;;b1,0;;m0;;estring $sql;;p">
</treenode>
</treenode>
<treenode node="ProxyPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ProxyPlugin.php;f0;30;1;65;;;;vpos;;v;;aPlugin;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ProxyPlugin.php;f11;36;5;49;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;etypes;;ptriggers;;pcallback;;p">
</treenode>
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ProxyPlugin.php;f11;56;5;59;;;;vpos;;v;;a;;r;;d4,57;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ProxyPlugin.php;f11;51;5;54;;;;vpos;;v;;a;;r;;d4,52;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ProxyPlugin.php;f11;61;5;64;;;;vpos;;v;;a;;r;;d4,62;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="Publish;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f0;6;1;335;;;;vpos;;v;;aBaseCommand;;c;;r;;d0,7;;b0,0;;m0;;e">
<treenode node="determineSourcePath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;284;5;293;;;;vpos;;v;;a;;r&#10;Definition&#10;    determineSourcePath()&#10;&#10;Description&#10;     Determines the current source path from which all other files are located.;;d4,285;;b2,0;;m0;;e">
</treenode>
<treenode node="publishConfig;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;230;5;247;;;;vpos;;v;;a;;r;;d4,231;;b2,0;;m0;;e">
</treenode>
<treenode node="publishController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;153;5;161;;;;vpos;;v;;a;;r;;d4,154;;b2,0;;m0;;e">
</treenode>
<treenode node="publishEntities;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;143;5;151;;;;vpos;;v;;a;;r;;d4,144;;b2,0;;m0;;e">
</treenode>
<treenode node="publishFilters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;200;5;213;;;;vpos;;v;;a;;r;;d4,201;;b2,0;;m0;;e">
</treenode>
<treenode node="publishLanguage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;249;5;256;;;;vpos;;v;;a;;r;;d4,250;;b2,0;;m0;;e">
</treenode>
<treenode node="publishMigration;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;215;5;228;;;;vpos;;v;;a;;r;;d4,216;;b2,0;;m0;;e">
</treenode>
<treenode node="publishModels;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;128;5;141;;;;vpos;;v;;a;;r;;d4,129;;b2,0;;m0;;e">
</treenode>
<treenode node="publishView;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;189;5;198;;;;vpos;;v;;a;;r;;d4,190;;b2,0;;m0;;eview;;pprefix;;p">
</treenode>
<treenode node="publishViews;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;163;5;187;;;;vpos;;v;;a;;r;;d4,164;;b2,0;;m0;;e">
</treenode>
<treenode node="replaceNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;272;5;279;;;;vpos;;v;;astring;;r&#10;Definition&#10;    replaceNamespace(string $contents, string $originalNamespace, string $newNamespace): string&#10;&#10;Description&#10;     Replaces the Myth\Auth namespace in the published file with the applications current namespace.&#10;&#10;Parameters:&#10;    string $contents&#10;    string $originalNamespace&#10;    string $newNamespace;;d4,273;;b2,0;;m0;;estring $contents;;pstring $originalNamespace;;pstring $newNamespace;;p">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f11;74;5;126;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params)&#10;&#10;Description&#10;     Displays the help for the spark cli script itself.&#10;&#10;Parameters:&#10;    array $params;;d4,75;;b1,0;;m0;;earray $params;;p">
</treenode>
<treenode node="writeFile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Commands\Publish.php;f14;302;5;334;;;;vpos;;v;;a;;r&#10;Definition&#10;    writeFile(string $path, string $content)&#10;&#10;Description&#10;     Write a file, catching any exceptions and showing a nicely formatted error.&#10;&#10;Parameters:&#10;    string $path&#10;    string $content;;d4,303;;b2,0;;m0;;estring $path;;pstring $content;;p">
</treenode>
</treenode>
<treenode node="PwnedValidator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\PwnedValidator.php;f0;21;1;121;;;;vpos;;v;;aBaseValidator;;cValidatorInterface;;c;;r&#10;Definition&#10;    class PwnedValidator extends BaseValidator implements ValidatorInterface&#10;&#10;Description&#10;     Class PwnedValidator;;d0,22;;b0,0;;m0;;e">
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\PwnedValidator.php;f11;49;5;96;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    check(string $password, Entity $user = null): bool&#10;&#10;Description&#10;     Checks the password against the online database and returns false if a match is found. Returns true if no match is found. If true is returned the password will be passed to next validator. If false is returned the validation process will be immediately stopped.&#10;&#10;Parameters:&#10;    string $password&#10;    Entity $user;;d4,50;;b1,0;;m0;;estring $password;;pEntity $user;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\PwnedValidator.php;f11;103;5;106;;;;vpos;;v;;astring;;r&#10;Definition&#10;    error(): string&#10;&#10;Description&#10;     Returns the error string that should be displayed to the user.;;d4,104;;b1,0;;m0;;e">
</treenode>
<treenode node="suggestion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\PwnedValidator.php;f11;116;5;119;;;;vpos;;v;;astring;;r&#10;Definition&#10;    suggestion(): string&#10;&#10;Description&#10;     Returns a suggestion that may be displayed to the user to help them choose a better password. The method is required, but a suggestion is optional. May return an empty string instead.;;d4,117;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Query;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f0;45;1;503;;;;vpos;;v;;aQueryInterface;;c;;r&#10;Definition&#10;    class Query implements QueryInterface&#10;&#10;Description&#10;     Query builder;;d0,46;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;123;2;126;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(&amp;$db)&#10;&#10;Description&#10;     BaseQuery constructor.&#10;&#10;Parameters:&#10;     $db - ConnectionInterface;;d1,124;;b1,0;;m0;;e $db;;p">
</treenode>
<treenode node="__toString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;497;2;500;;;;vpos;;v;;astring;;r&#10;Definition&#10;    __toString(): string&#10;&#10;Description&#10;     Return text representation of the query;;d1,498;;b1,0;;m0;;e">
</treenode>
<treenode node="compileBinds;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f11;366;2;411;;;;vpos;;v;;anull;;r&#10;Definition&#10;    compileBinds()&#10;&#10;Description&#10;     Escapes and inserts any binds into the finalQueryString object.&#10;&#10;Return:&#10;   |void;;d1,367;;b2,0;;m0;;e">
</treenode>
<treenode node="getDuration;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;256;2;259;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDuration(int $decimals = 6): string&#10;&#10;Description&#10;     Returns the duration of this query during execution, or null if the query has not been executed yet.&#10;&#10;Parameters:&#10;    integer $decimals - The accuracy of the returned time;;d1,257;;b1,0;;m0;;einteger $decimals;;p">
</treenode>
<treenode node="getErrorCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;298;2;301;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getErrorCode(): int&#10;&#10;Description&#10;     Returns the error code created while executing this statement.;;d1,299;;b1,0;;m0;;e">
</treenode>
<treenode node="getErrorMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;310;2;313;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getErrorMessage(): string&#10;&#10;Description&#10;     Returns the error message created while executing this statement.;;d1,311;;b1,0;;m0;;e">
</treenode>
<treenode node="getOriginalQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;354;2;357;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getOriginalQuery(): string&#10;&#10;Description&#10;     Returns the original SQL that was passed into the system.;;d1,355;;b1,0;;m0;;e">
</treenode>
<treenode node="getQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;189;2;199;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getQuery(): string&#10;&#10;Description&#10;     Returns the final, processed query string after binding, etal has been performed.;;d1,190;;b1,0;;m0;;e">
</treenode>
<treenode node="getStartTime;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;237;2;245;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getStartTime(bool $returnRaw = false, int $decimals = 6): string&#10;&#10;Description&#10;     Returns the start time in seconds with microseconds.&#10;&#10;Parameters:&#10;    boolean $returnRaw&#10;    integer $decimals;;d1,238;;b1,0;;m0;;eboolean $returnRaw;;pinteger $decimals;;p">
</treenode>
<treenode node="hasError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;286;2;289;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasError(): bool&#10;&#10;Description&#10;     Reports whether this statement created an error not.;;d1,287;;b1,0;;m0;;e">
</treenode>
<treenode node="isWriteType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;322;2;326;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isWriteType(): bool&#10;&#10;Description&#10;     Determines if the statement is a write-type query or not.;;d1,323;;b1,0;;m0;;e">
</treenode>
<treenode node="matchNamedBinds;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f11;422;2;443;;;;vpos;;v;;astring;;r&#10;Definition&#10;    matchNamedBinds(string $sql, array $binds): string&#10;&#10;Description&#10;     Match bindings&#10;&#10;Parameters:&#10;    string $sql&#10;    array $binds;;d1,423;;b2,0;;m0;;estring $sql;;parray $binds;;p">
</treenode>
<treenode node="matchSimpleBinds;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f11;456;2;488;;;;vpos;;v;;astring;;r&#10;Definition&#10;    matchSimpleBinds(string $sql, array $binds, int $bindCount, int $ml): string&#10;&#10;Description&#10;     Match bindings&#10;&#10;Parameters:&#10;    string $sql&#10;    array $binds&#10;    integer $bindCount&#10;    integer $ml;;d1,457;;b2,0;;m0;;estring $sql;;parray $binds;;pinteger $bindCount;;pinteger $ml;;p">
</treenode>
<treenode node="setBinds;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;174;2;179;;;;vpos;;v;;a;;r&#10;Definition&#10;    setBinds(array $binds)&#10;&#10;Description&#10;     Will store the variables to bind into the query later.&#10;&#10;Parameters:&#10;    array $binds;;d1,175;;b1,0;;m0;;earray $binds;;p">
</treenode>
<treenode node="setDuration;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;213;2;225;;;;vpos;;v;;a;;r&#10;Definition&#10;    setDuration(float $start, float $end = null)&#10;&#10;Description&#10;     Records the execution time of the statement using microtime(true) for it&apos;s start and end values. If no end value is present, will use the current time to determine total duration.&#10;&#10;Parameters:&#10;    float $start&#10;    float $end;;d1,214;;b1,0;;m0;;efloat $start;;pfloat $end;;p">
</treenode>
<treenode node="setError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;271;2;277;;;;vpos;;v;;a;;r&#10;Definition&#10;    setError(int $code, string $error)&#10;&#10;Description&#10;     Stores the error description that happened for this query.&#10;&#10;Parameters:&#10;    integer $code&#10;    string $error;;d1,272;;b1,0;;m0;;einteger $code;;pstring $error;;p">
</treenode>
<treenode node="setQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;139;2;163;;;;vpos;;v;;a;;r&#10;Definition&#10;    setQuery(string $sql, $binds = null, bool $setEscape = true)&#10;&#10;Description&#10;     Sets the raw query string to use for this statement.&#10;&#10;Parameters:&#10;    string $sql&#10;    mixed $binds&#10;    boolean $setEscape;;d1,140;;b1,0;;m0;;estring $sql;;pmixed $binds;;pboolean $setEscape;;p">
</treenode>
<treenode node="swapPrefix;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Query.php;f8;338;2;345;;;;vpos;;v;;a;;r&#10;Definition&#10;    swapPrefix(string $orig, string $swap)&#10;&#10;Description&#10;     Swaps out one table prefix for a new one.&#10;&#10;Parameters:&#10;    string $orig&#10;    string $swap;;d1,339;;b1,0;;m0;;estring $orig;;pstring $swap;;p">
</treenode>
</treenode>
<treenode node="RecursionPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\RecursionPlugin.php;f0;29;1;43;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\RecursionPlugin.php;f0;29;1;35;;;;vpos;;v;;aPlugin;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\RecursionPlugin.php;f11;31;5;42;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\RecursionPlugin.php;f11;31;5;34;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="RedirectException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Router\Exceptions\RedirectException.php;f0;44;1;52;;;;vpos;;v;;aException;;c;;r&#10;Definition&#10;    class RedirectException extends \Exception&#10;&#10;Description&#10;     RedirectException;;d0,45;;b0,0;;m0;;e">
</treenode>
<treenode node="RedirectResponse;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RedirectResponse.php;f0;47;1;230;;;;vpos;;v;;aResponse;;c;;r&#10;Definition&#10;    class RedirectResponse extends Response&#10;&#10;Description&#10;     Handle a redirect response;;d0,48;;b0,0;;m0;;e">
<treenode node="back;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RedirectResponse.php;f8;108;2;113;;;;vpos;;v;;a;;r&#10;Definition&#10;    back(int $code = null, string $method = &apos;auto&apos;)&#10;&#10;Description&#10;     Helper function to return to previous page.&#10;&#10;Parameters:&#10;    integer|null $code&#10;    string $method;;d1,109;;b1,0;;m0;;einteger|null $code;;pstring $method;;p">
</treenode>
<treenode node="ensureSession;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RedirectResponse.php;f11;226;2;229;;;;vpos;;v;;a;;r&#10;Definition&#10;    ensureSession()&#10;&#10;Description&#10;     Ensures the session is loaded and started.;;d1,227;;b2,0;;m0;;e">
</treenode>
<treenode node="route;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RedirectResponse.php;f8;83;2;95;;;;vpos;;v;;a;;r&#10;Definition&#10;    route(string $route, array $params = [], int $code = 302, string $method = &apos;auto&apos;)&#10;&#10;Description&#10;     Sets the URI to redirect to but as a reverse-routed or named route instead of a raw URI.&#10;&#10;Parameters:&#10;    string $route&#10;    array $params&#10;    integer|null $code&#10;    string $method;;d1,84;;b1,0;;m0;;estring $route;;parray $params;;pinteger|null $code;;pstring $method;;p">
</treenode>
<treenode node="to;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RedirectResponse.php;f8;59;2;70;;;;vpos;;v;;a;;r&#10;Definition&#10;    to(string $uri, int $code = null, string $method = &apos;auto&apos;)&#10;&#10;Description&#10;     Sets the URI to redirect to and, optionally, the HTTP status code to use. If no code is provided it will be automatically determined.&#10;&#10;Parameters:&#10;    string $uri - The URI to redirect to&#10;    integer|null $code - HTTP status code&#10;    string $method;;d1,60;;b1,0;;m0;;estring $uri;;pinteger|null $code;;pstring $method;;p">
</treenode>
<treenode node="with;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RedirectResponse.php;f8;153;2;160;;;;vpos;;v;;a;;r&#10;Definition&#10;    with(string $key, $message)&#10;&#10;Description&#10;     Adds a key and message to the session as Flashdata.&#10;&#10;Parameters:&#10;    string $key&#10;    string|array $message;;d1,154;;b1,0;;m0;;estring $key;;pstring|array $message;;p">
</treenode>
<treenode node="withCookies;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RedirectResponse.php;f8;170;2;194;;;;vpos;;v;;a;;r&#10;Definition&#10;    withCookies()&#10;&#10;Description&#10;     Copies any cookies from the global Response instance into this RedirectResponse. Useful when you&apos;ve just set a cookie but need ensure that&apos;s actually sent with the response instead of lost.;;d1,171;;b1,0;;m0;;e">
</treenode>
<treenode node="withHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RedirectResponse.php;f8;204;2;219;;;;vpos;;v;;a;;r&#10;Definition&#10;    withHeaders()&#10;&#10;Description&#10;     Copies any headers from the global Response instance into this RedirectResponse. Useful when you&apos;ve just set a header be need to ensure its actually sent with the redirect response.;;d1,205;;b1,0;;m0;;e">
</treenode>
<treenode node="withInput;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\RedirectResponse.php;f8;122;2;143;;;;vpos;;v;;a;;r&#10;Definition&#10;    withInput()&#10;&#10;Description&#10;     Specifies that the current $_GET and $_POST arrays should be packaged up with the response. It will then be available via the &apos;old()&apos; helper function.;;d1,123;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="RedisHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f0;47;1;423;;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f0;47;1;351;;;;vpos;;v;;aBaseHandler;;cSessionHandlerInterface;;c;;r&#10;Definition&#10;    class RedisHandler extends BaseHandler implements \SessionHandlerInterface&#10;&#10;Description&#10;     Session handler using Redis for persistence;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f8;95;2;130;;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;84;2;92;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(BaseConfig $config, string $ipAddress)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    BaseConfig $config&#10;    string $ipAddress;;d1,96;;b1,0;;m0;;eBaseConfig $config;;pstring $ipAddress;;p">
</treenode>
<treenode node="__destruct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;99;2;105;;;;vpos;;v;;a;;r&#10;Definition&#10;    __destruct()&#10;&#10;Description&#10;     Class destructor;;d1,100;;b1,0;;m0;;e">
</treenode>
<treenode node="clean;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;290;2;293;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    clean()&#10;&#10;Description&#10;     Will delete all items in the entire cache.;;d1,291;;b1,0;;m0;;e">
</treenode>
<treenode node="close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f8;266;2;294;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    close(): bool&#10;&#10;Description&#10;     Close;;d1,267;;b1,0;;m0;;e">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;276;2;281;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    decrement(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic decrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,277;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;242;2;247;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    delete(string $key)&#10;&#10;Description&#10;     Deletes a specific item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,243;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="destroy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f8;307;2;320;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    destroy($sessionID): bool&#10;&#10;Description&#10;     Destroy&#10;&#10;Parameters:&#10;    string $sessionID;;d1,308;;b1,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="gc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f8;332;2;336;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    gc($maxlifetime): bool&#10;&#10;Description&#10;     Garbage Collector&#10;&#10;Parameters:&#10;    integer $maxlifetime - Maximum lifetime of sessions;;d1,333;;b1,0;;m0;;einteger $maxlifetime;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;161;2;187;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get(string $key)&#10;&#10;Description&#10;     Attempts to fetch an item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,162;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getCacheInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;305;2;308;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCacheInfo()&#10;&#10;Description&#10;     Returns information on the entire cache.;;d1,306;;b1,0;;m0;;e">
</treenode>
<treenode node="getMetaData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;319;2;336;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getMetaData(string $key)&#10;&#10;Description&#10;     Returns detailed information about the specific item in the cache.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,320;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;259;2;264;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    increment(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic incrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,260;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;112;2;150;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Takes care of any handler-specific setup that must be done.;;d1,113;;b1,0;;m0;;e">
</treenode>
<treenode node="isSupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;345;2;348;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isSupported(): bool&#10;&#10;Description&#10;     Determines if the driver is supported on this system.;;d1,346;;b1,0;;m0;;e">
</treenode>
<treenode node="lockSession;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f11;349;2;394;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    lockSession(string $sessionID): bool&#10;&#10;Description&#10;     Get lock&#10;&#10;Parameters:&#10;    string $sessionID - Session ID;;d1,350;;b2,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="open;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f8;143;2;171;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    open($save_path, $name): bool&#10;&#10;Description&#10;     Open&#10;&#10;Parameters:&#10;    string $save_path - Server path&#10;    string $name - Session cookie name, unused;;d1,144;;b1,0;;m0;;estring $save_path;;pstring $name;;p">
</treenode>
<treenode node="read;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f8;184;2;203;;;;vpos;;v;;astring;;r&#10;Definition&#10;    read($sessionID): string&#10;&#10;Description&#10;     Read&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;&#10;Return:&#10;   |false Serialized session data;;d1,185;;b1,0;;m0;;estring $sessionID;;p">
</treenode>
<treenode node="releaseLock;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f11;405;2;420;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    releaseLock(): bool&#10;&#10;Description&#10;     Release lock;;d1,406;;b2,0;;m0;;e">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\RedisHandler.php;f8;200;2;231;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    save(string $key, $value, int $ttl = 60)&#10;&#10;Description&#10;     Saves an item to the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name&#10;    mixed $value - The data to save&#10;    integer $ttl - Time To Live, in seconds (default 60);;d1,201;;b1,0;;m0;;estring $key;;pmixed $value;;pinteger $ttl;;p">
</treenode>
<treenode node="write;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Handlers\RedisHandler.php;f8;217;2;255;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    write($sessionID, $sessionData): bool&#10;&#10;Description&#10;     Write&#10;&#10;Parameters:&#10;    string $sessionID - Session ID&#10;    string $sessionData - Serialized session data;;d1,218;;b1,0;;m0;;estring $sessionID;;pstring $sessionData;;p">
</treenode>
</treenode>
<treenode node="ReflectionHelper;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\ReflectionHelper.php;f0;48;1;127;;;;vpos;;v;;a;;r&#10;Definition&#10;    trait ReflectionHelper&#10;&#10;Description&#10;     Testing helper.;;d0,49;;b0,0;;m0;;e">
<treenode node="getAccessibleRefProperty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ReflectionHelper.php;f16;80;2;95;;;;vpos;;v;;a;;r&#10;Definition&#10;    getAccessibleRefProperty($obj, $property)&#10;&#10;Description&#10;     Find an accessible property.&#10;&#10;Parameters:&#10;    object $obj&#10;    string $property;;d1,81;;b3,5;;m0;;eobject $obj;;pstring $property;;p">
</treenode>
<treenode node="getPrivateMethodInvoker;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ReflectionHelper.php;f15;59;2;69;;;;vpos;;v;;a;;r&#10;Definition&#10;    getPrivateMethodInvoker($obj, $method)&#10;&#10;Description&#10;     Find a private method invoker.&#10;&#10;Parameters:&#10;    object|string $obj - object or class name&#10;    string $method - method name;;d1,60;;b1,5;;m0;;eobject|string $obj;;pstring $method;;p">
</treenode>
<treenode node="getPrivateProperty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ReflectionHelper.php;f15;121;2;125;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getPrivateProperty($obj, $property)&#10;&#10;Description&#10;     Retrieve a private property.&#10;&#10;Parameters:&#10;    object|string $obj - object or class name&#10;    string $property - property name&#10;&#10;Return:&#10;   value;;d1,122;;b1,5;;m0;;eobject|string $obj;;pstring $property;;p">
</treenode>
<treenode node="setPrivateProperty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\ReflectionHelper.php;f15;106;2;110;;;;vpos;;v;;a;;r&#10;Definition&#10;    setPrivateProperty($obj, $property, $value)&#10;&#10;Description&#10;     Set a private property.&#10;&#10;Parameters:&#10;    object|string $obj - object or class name&#10;    string $property - property name&#10;    mixed $value - value;;d1,107;;b1,5;;m0;;eobject|string $obj;;pstring $property;;pmixed $value;;p">
</treenode>
</treenode>
<treenode node="Registrar;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Config\Registrar.php;f0;15;1;26;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Registrar&#10;&#10;Description&#10;     Helper class that will register our bulk plugins and filters with the View Parser class.;;d0,16;;b0,0;;m0;;e">
<treenode node="View;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Config\Registrar.php;f18;17;5;25;;;;vpos;;v;;a;;r;;d4,18;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="Renderer;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f9;30;1;184;;;;vpos;;v;;a;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="SORT_FULL;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f9;34;19;34;;;;vpos;;v;;a;;r2;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="SORT_NONE;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f9;32;19;32;;;;vpos;;v;;a;;r0;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="SORT_VISIBILITY;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f9;33;25;33;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="filterParserPlugins;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;122;5;125;;;;vpos;;v;;a;;r;;d4,123;;b1,0;;m0;;eplugins;;p">
</treenode>
<treenode node="getCallInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;75;5;78;;;;vpos;;v;;a;;r;;d4,76;;b1,0;;m0;;e">
</treenode>
<treenode node="getShowTrace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;96;5;99;;;;vpos;;v;;a;;r;;d4,97;;b1,0;;m0;;e">
</treenode>
<treenode node="getStatics;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;86;5;89;;;;vpos;;v;;a;;r;;d4,87;;b1,0;;m0;;e">
</treenode>
<treenode node="matchPlugins;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;109;5;120;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    matchPlugins(array $plugins, array $hints)&#10;&#10;Description&#10;     Returns the first compatible plugin available.&#10;&#10;Parameters:&#10;    array $plugins - Array of hints to class strings&#10;    array $hints - Array of object hints&#10;&#10;Return:&#10;   Array of hints to class strings filtered and sorted by object hints;;d4,110;;b1,0;;m0;;earray $plugins;;parray $hints;;p">
</treenode>
<treenode node="postRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;132;5;135;;;;vpos;;v;;a;;r;;d4,133;;b1,0;;m0;;e">
</treenode>
<treenode node="preRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;127;5;130;;;;vpos;;v;;a;;r;;d4,128;;b1,0;;m0;;e">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f20;40;51;40;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderNothing;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f20;42;44;42;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;e">
</treenode>
<treenode node="setCallInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;44;5;73;;;;vpos;;v;;a;;r;;d4,45;;b1,0;;m0;;einfo;;p">
</treenode>
<treenode node="setShowTrace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;91;5;94;;;;vpos;;v;;a;;r;;d4,92;;b1,0;;m0;;eshow_trace;;p">
</treenode>
<treenode node="setStatics;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f11;80;5;84;;;;vpos;;v;;a;;r;;d4,81;;b1,0;;m0;;estatics;;p">
</treenode>
<treenode node="sortProperties;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f18;160;5;183;;;;vpos;;v;;aBasicObject;;r&#10;Definition&#10;    sortProperties(array $contents, $sort)&#10;&#10;Description&#10;     Sorts an array of BasicObject.&#10;&#10;Parameters:&#10;    BasicObject[] $contents - Object properties to sort&#10;    int $sort&#10;&#10;Return:&#10;   [];;d4,161;;b1,5;;m0;;eBasicObject[] $contents;;pint $sort;;p">
</treenode>
<treenode node="sortPropertiesFull;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Renderer.php;f18;137;5;150;;;;vpos;;v;;a;;r;;d4,138;;b1,5;;m0;;ea;;pb;;p">
</treenode>
</treenode>
<treenode node="Representation;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\Representation.php;f0;27;1;70;;;;vpos;;v;;a;;r;;d0,28;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\Representation.php;f11;36;5;45;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;elabel;;pname;;p">
</treenode>
<treenode node="getLabel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\Representation.php;f11;47;5;54;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m0;;e">
</treenode>
<treenode node="getName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\Representation.php;f11;56;5;59;;;;vpos;;v;;a;;r;;d4,57;;b1,0;;m0;;e">
</treenode>
<treenode node="labelIsImplicit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\Representation.php;f11;66;5;69;;;;vpos;;v;;a;;r;;d4,67;;b1,0;;m0;;e">
</treenode>
<treenode node="setName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\Representation.php;f11;61;5;64;;;;vpos;;v;;a;;r;;d4,62;;b1,0;;m0;;ename;;p">
</treenode>
</treenode>
<treenode node="Request;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f0;44;1;477;;;;vpos;;v;;aMessage;;cRequestInterface;;c;;r&#10;Definition&#10;    class Request extends Message implements RequestInterface&#10;&#10;Description&#10;     Representation of an HTTP request.;;d0,45;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f8;83;2;91;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    object $config;;d1,84;;b1,0;;m0;;eobject $config;;p">
</treenode>
<treenode node="fetchGlobal;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f8;351;2;439;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    fetchGlobal($method, $index = null, $filter = null, $flags = null)&#10;&#10;Description&#10;     Fetches one or more items from a global, like cookies, get, post, etc. Can optionally filter the input when you retrieve it by passing in a filter.&#10;&#10;Parameters:&#10;    string $method - Input filter constant&#10;    string|array|null $index&#10;    integer|null $filter - Filter constant&#10;    mixed $flags;;d1,352;;b1,0;;m0;;estring $method;;pstring|array|null $index;;pinteger|null $filter;;pmixed $flags;;p">
</treenode>
<treenode node="getEnv;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f8;310;2;313;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getEnv($index = null, $filter = null, $flags = null)&#10;&#10;Description&#10;     Fetch an item from the $_ENV array.&#10;&#10;Parameters:&#10;    null $index - Index for item to be fetched from $_ENV&#10;    null $filter - A filter name to be applied&#10;    null $flags;;d1,311;;b1,0;;m0;;enull $index;;pnull $filter;;pnull $flags;;p">
</treenode>
<treenode node="getIPAddress;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f8;100;2;223;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getIPAddress(): string&#10;&#10;Description&#10;     Gets the user&apos;s IP address.&#10;&#10;Return:&#10;   IP address;;d1,101;;b1,0;;m0;;e">
</treenode>
<treenode node="getMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f8;262;2;265;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMethod(bool $upper = false): string&#10;&#10;Description&#10;     Get the request method.&#10;&#10;Parameters:&#10;    boolean $upper - Whether to return in upper or lower case;;d1,263;;b1,0;;m0;;eboolean $upper;;p">
</treenode>
<treenode node="getServer;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f8;294;2;297;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getServer($index = null, $filter = null, $flags = null)&#10;&#10;Description&#10;     Fetch an item from the $_SERVER array.&#10;&#10;Parameters:&#10;    string|array|null $index - Index for item to be fetched from $_SERVER&#10;    integer|null $filter - A filter name to be applied&#10;    null $flags;;d1,295;;b1,0;;m0;;estring|array|null $index;;pinteger|null $filter;;pnull $flags;;p">
</treenode>
<treenode node="isValidIP;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f8;235;2;251;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isValidIP(string $ip = null, string $which = null): bool&#10;&#10;Description&#10;     Validate an IP address&#10;&#10;Parameters:&#10;    string $ip - IP Address&#10;    string $which - IP protocol: &apos;ipv4&apos; or &apos;ipv6&apos;;;d1,236;;b1,0;;m0;;estring $ip;;pstring $which;;p">
</treenode>
<treenode node="populateGlobals;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f11;449;2;476;;;;vpos;;v;;a;;r&#10;Definition&#10;    populateGlobals(string $method)&#10;&#10;Description&#10;     Saves a copy of the current state of one of several PHP globals so we can retrieve them later.&#10;&#10;Parameters:&#10;    string $method;;d1,450;;b2,0;;m0;;estring $method;;p">
</treenode>
<treenode node="setGlobal;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f8;325;2;330;;;;vpos;;v;;a;;r&#10;Definition&#10;    setGlobal(string $method, $value)&#10;&#10;Description&#10;     Allows manually setting the value of PHP global, like $_GET, $_POST, etc.&#10;&#10;Parameters:&#10;    string $method&#10;     $value;;d1,326;;b1,0;;m0;;estring $method;;p $value;;p">
</treenode>
<treenode node="setMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Request.php;f8;276;2;281;;;;vpos;;v;;aRequest;;r&#10;Definition&#10;    setMethod(string $method)&#10;&#10;Description&#10;     Sets the request method. Used when spoofing the request.&#10;&#10;Parameters:&#10;    string $method;;d1,277;;b1,0;;m0;;estring $method;;p">
</treenode>
</treenode>
<treenode node="ResourceController;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f0;51;1;202;;;;vpos;;v;;aController;;cResponseTrait;;c;;r&#10;Definition&#10;    class ResourceController extends Controller&#10;&#10;Description&#10;     An extendable controller to provide a RESTful API for a resource.;;d0,52;;b0,0;;m0;;e">
<treenode node="create;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;115;2;118;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    create()&#10;&#10;Description&#10;     Create a new resource object, from &quot;posted&quot; parameters&#10;&#10;Return:&#10;   an array;;d1,116;;b1,0;;m0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;145;2;148;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    delete($id = null)&#10;&#10;Description&#10;     Delete the designated resource object from the model&#10;&#10;Return:&#10;   an array;;d1,146;;b1,0;;m0;;eid;;p">
</treenode>
<treenode node="edit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;125;2;128;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    edit($id = null)&#10;&#10;Description&#10;     Return the editable properties of a resource object&#10;&#10;Return:&#10;   an array;;d1,126;;b1,0;;m0;;eid;;p">
</treenode>
<treenode node="index;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;85;2;88;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    index()&#10;&#10;Description&#10;     Return an array of resource objects, themselves in array format&#10;&#10;Return:&#10;   an array;;d1,86;;b1,0;;m0;;e">
</treenode>
<treenode node="initController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;70;2;76;;;;vpos;;v;;a;;r;;d1,71;;b1,0;;m0;;erequest;;presponse;;plogger;;p">
</treenode>
<treenode node="new;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;105;2;108;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    new()&#10;&#10;Description&#10;     Return a new resource object, with default properties&#10;&#10;Return:&#10;   an array;;d1,106;;b1,0;;m0;;e">
</treenode>
<treenode node="setFormat;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;194;2;200;;;;vpos;;v;;a;;r&#10;Definition&#10;    setFormat(string $format = &apos;json&apos;)&#10;&#10;Description&#10;     Set/change the expected response representation for returned objects&#10;&#10;Parameters:&#10;    string $format;;d1,195;;b1,0;;m0;;estring $format;;p">
</treenode>
<treenode node="setModel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;158;2;187;;;;vpos;;v;;a;;r&#10;Definition&#10;    setModel($which = null)&#10;&#10;Description&#10;     Set or change the model this controller is bound to. Given either the name or the object, determine the other.&#10;&#10;Parameters:&#10;    string|object $which;;d1,159;;b1,0;;m0;;estring|object $which;;p">
</treenode>
<treenode node="show;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;95;2;98;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    show($id = null)&#10;&#10;Description&#10;     Return the properties of a resource object&#10;&#10;Return:&#10;   an array;;d1,96;;b1,0;;m0;;eid;;p">
</treenode>
<treenode node="update;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourceController.php;f8;135;2;138;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    update($id = null)&#10;&#10;Description&#10;     Add or update a model resource, from &quot;posted&quot; properties&#10;&#10;Return:&#10;   an array;;d1,136;;b1,0;;m0;;eid;;p">
</treenode>
</treenode>
<treenode node="ResourceObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ResourceObject.php;f0;27;1;48;;;;vpos;;v;;aBasicObject;;c;;r;;d0,28;;b0,0;;m0;;e">
<treenode node="getType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ResourceObject.php;f11;31;5;38;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;e">
</treenode>
<treenode node="transplant;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ResourceObject.php;f11;40;5;47;;;;vpos;;v;;a;;r;;d4,41;;b1,0;;m0;;eold;;p">
</treenode>
</treenode>
<treenode node="ResourcePresenter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f0;50;1;205;;;;vpos;;v;;aController;;c;;r&#10;Definition&#10;    class ResourcePresenter extends Controller&#10;&#10;Description&#10;     An extendable controller to help provide a UI for a resource.;;d0,51;;b0,0;;m0;;e">
<treenode node="create;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;114;2;117;;;;vpos;;v;;astring;;r&#10;Definition&#10;    create()&#10;&#10;Description&#10;     Process the creation/insertion of a new resource object. This should be a POST.;;d1,115;;b1,0;;m0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;136;2;139;;;;vpos;;v;;astring;;r&#10;Definition&#10;    delete($id = null)&#10;&#10;Description&#10;     Process the deletion of a specific resource object&#10;&#10;Parameters:&#10;    type $id;;d1,137;;b1,0;;m0;;etype $id;;p">
</treenode>
<treenode node="edit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;147;2;150;;;;vpos;;v;;astring;;r&#10;Definition&#10;    edit($id = null)&#10;&#10;Description&#10;     Present a view to edit the properties of a specific resource object&#10;&#10;Parameters:&#10;    type $id;;d1,148;;b1,0;;m0;;etype $id;;p">
</treenode>
<treenode node="index;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;82;2;85;;;;vpos;;v;;astring;;r&#10;Definition&#10;    index()&#10;&#10;Description&#10;     Present a view of resource objects;;d1,83;;b1,0;;m0;;e">
</treenode>
<treenode node="initController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;67;2;73;;;;vpos;;v;;a;;r;;d1,68;;b1,0;;m0;;erequest;;presponse;;plogger;;p">
</treenode>
<treenode node="new;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;103;2;106;;;;vpos;;v;;astring;;r&#10;Definition&#10;    new()&#10;&#10;Description&#10;     Present a view to present a new single resource object;;d1,104;;b1,0;;m0;;e">
</treenode>
<treenode node="remove;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;125;2;128;;;;vpos;;v;;astring;;r&#10;Definition&#10;    remove($id = null)&#10;&#10;Description&#10;     Present a view to confirm the deletion of a specific resource object&#10;&#10;Parameters:&#10;    type $id;;d1,126;;b1,0;;m0;;etype $id;;p">
</treenode>
<treenode node="setModel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;172;2;203;;;;vpos;;v;;a;;r&#10;Definition&#10;    setModel($which = null)&#10;&#10;Description&#10;     Set or change the model this controller is bound to. Given either the name or the object, determine the other.&#10;&#10;Parameters:&#10;    string|object $which;;d1,173;;b1,0;;m0;;estring|object $which;;p">
</treenode>
<treenode node="show;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;93;2;96;;;;vpos;;v;;astring;;r&#10;Definition&#10;    show($id = null)&#10;&#10;Description&#10;     Present a view to present a specific resource object&#10;&#10;Parameters:&#10;    type $id;;d1,94;;b1,0;;m0;;etype $id;;p">
</treenode>
<treenode node="update;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\RESTful\ResourcePresenter.php;f8;159;2;162;;;;vpos;;v;;astring;;r&#10;Definition&#10;    update($id = null)&#10;&#10;Description&#10;     Process the updating, full or partial, of a specific resource object. This should be a POST.&#10;&#10;Parameters:&#10;    type $id;;d1,160;;b1,0;;m0;;etype $id;;p">
</treenode>
</treenode>
<treenode node="Response;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f0;59;1;1086;;;;vpos;;v;;aMessage;;cResponseInterface;;c;;r&#10;Definition&#10;    class Response extends Message implements ResponseInterface&#10;&#10;Description&#10;     Representation of an outgoing, getServer-side response.;;d0,60;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;234;2;252;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    \Config\App $config;;d1,235;;b1,0;;m0;;e\Config\App $config;;p">
</treenode>
<treenode node="deleteCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;974;2;1014;;;;vpos;;v;;a;;r&#10;Definition&#10;    deleteCookie(string $name = &apos;&apos;, string $domain = &apos;&apos;, string $path = &apos;/&apos;, string $prefix = &apos;&apos;)&#10;&#10;Description&#10;     Sets a cookie to be deleted when the response is sent.&#10;&#10;Parameters:&#10;    string $name&#10;    string $domain&#10;    string $path&#10;    string $prefix;;d1,975;;b1,0;;m0;;estring $name;;pstring $domain;;pstring $path;;pstring $prefix;;p">
</treenode>
<treenode node="download;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;1057;2;1084;;;;vpos;;v;;a;;r&#10;Definition&#10;    download(string $filename = &apos;&apos;, $data = &apos;&apos;, bool $setMime = false)&#10;&#10;Description&#10;     Force a download.&#10;&#10;Parameters:&#10;    string $filename - The path to the file to send&#10;    string|null $data - The data to be downloaded&#10;    boolean $setMime - Whether to try and send the actual MIME type;;d1,1058;;b1,0;;m0;;estring $filename;;pstring|null $data;;pboolean $setMime;;p">
</treenode>
<treenode node="formatBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f11;535;2;554;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    formatBody($body, string $format)&#10;&#10;Description&#10;     Handles conversion of the of the data into the appropriate format, and sets the correct Content-Type header for our response.&#10;&#10;Parameters:&#10;    string|array $body&#10;    string $format - Valid: json, xml;;d1,536;;b2,0;;m0;;estring|array $body;;pstring $format;;p">
</treenode>
<treenode node="getBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;750;2;753;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getBody()&#10;&#10;Description&#10;     Grabs the current body.&#10;&#10;Return:&#10;   |string;;d1,751;;b1,0;;m0;;e">
</treenode>
<treenode node="getCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;939;2;962;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCookie(string $name = null, string $prefix = &apos;&apos;)&#10;&#10;Description&#10;     Returns the cookie&#10;&#10;Parameters:&#10;    string|null $name&#10;    string $prefix;;d1,940;;b1,0;;m0;;estring|null $name;;pstring $prefix;;p">
</treenode>
<treenode node="getCookies;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;1021;2;1024;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getCookies()&#10;&#10;Description&#10;     Returns all cookies currently set.;;d1,1022;;b1,0;;m0;;e">
</treenode>
<treenode node="getJSON;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;463;2;479;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getJSON()&#10;&#10;Description&#10;     Returns the current body, converted to JSON is it isn&apos;t already.&#10;&#10;Return:&#10;   |string;;d1,464;;b1,0;;m0;;e">
</treenode>
<treenode node="getReason;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;345;2;353;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getReason(): string&#10;&#10;Description&#10;     Gets the response response phrase associated with the status code.;;d1,346;;b1,0;;m0;;e">
</treenode>
<treenode node="getStatusCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;278;2;286;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getStatusCode(): int&#10;&#10;Description&#10;     Gets the response status code.&#10;&#10;Return:&#10;   Status code;;d1,279;;b1,0;;m0;;e">
</treenode>
<treenode node="getXML;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;505;2;521;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getXML()&#10;&#10;Description&#10;     Retrieves the current body into XML and returns it.&#10;&#10;Return:&#10;   |string;;d1,506;;b1,0;;m0;;e">
</treenode>
<treenode node="hasCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;904;2;929;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasCookie(string $name, string $value = null, string $prefix = &apos;&apos;): bool&#10;&#10;Description&#10;     Checks to see if the Response has a specified cookie or not.&#10;&#10;Parameters:&#10;    string $name&#10;    string|null $value&#10;    string $prefix;;d1,905;;b1,0;;m0;;estring $name;;pstring|null $value;;pstring $prefix;;p">
</treenode>
<treenode node="noCache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;569;2;576;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    noCache(): self&#10;&#10;Description&#10;     Sets the appropriate headers to ensure this response is not cached by the browsers.;;d1,570;;b1,0;;m0;;e">
</treenode>
<treenode node="pretend;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;263;2;268;;;;vpos;;v;;a;;r&#10;Definition&#10;    pretend(bool $pretend = true)&#10;&#10;Description&#10;     Turns &quot;pretend&quot; mode on or off to aid in testing.&#10;&#10;Parameters:&#10;    boolean $pretend;;d1,264;;b1,0;;m0;;eboolean $pretend;;p">
</treenode>
<treenode node="redirect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;765;2;802;;;;vpos;;v;;a;;r&#10;Definition&#10;    redirect(string $uri, string $method = &apos;auto&apos;, int $code = null)&#10;&#10;Description&#10;     Perform a redirect to a new URL, in two flavors: header or location.&#10;&#10;Parameters:&#10;    string $uri - The URI to redirect to&#10;    string $method&#10;    integer $code - The type of redirection, defaults to 302;;d1,766;;b1,0;;m0;;estring $uri;;pstring $method;;pinteger $code;;p">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;675;2;693;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    send()&#10;&#10;Description&#10;     Sends the output to the browser.;;d1,676;;b1,0;;m0;;e">
</treenode>
<treenode node="sendBody;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;736;2;741;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    sendBody()&#10;&#10;Description&#10;     Sends the Body of the message to the browser.;;d1,737;;b1,0;;m0;;e">
</treenode>
<treenode node="sendCookies;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f11;1029;2;1043;;;;vpos;;v;;a;;r&#10;Definition&#10;    sendCookies()&#10;&#10;Description&#10;     Actually sets the cookies.;;d1,1030;;b2,0;;m0;;e">
</treenode>
<treenode node="sendHeaders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;702;2;727;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    sendHeaders()&#10;&#10;Description&#10;     Sends the headers of this HTTP request to the browser.;;d1,703;;b1,0;;m0;;e">
</treenode>
<treenode node="setCache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;608;2;636;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    setCache(array $options = [])&#10;&#10;Description&#10;     A shortcut method that allows the developer to set all of the cache-control headers in one method call.&#10;&#10;Parameters:&#10;    array $options;;d1,609;;b1,0;;m0;;earray $options;;p">
</treenode>
<treenode node="setContentType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;423;2;435;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    setContentType(string $mime, string $charset = &apos;UTF-8&apos;)&#10;&#10;Description&#10;     Sets the Content Type header for this response with the mime type and, optionally, the charset.&#10;&#10;Parameters:&#10;    string $mime&#10;    string $charset;;d1,424;;b1,0;;m0;;estring $mime;;pstring $charset;;p">
</treenode>
<treenode node="setCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;823;2;891;;;;vpos;;v;;a;;r&#10;Definition&#10;    setCookie(&#10;  $name,&#10;  $value = &apos;&apos;,&#10;  $expire = &apos;&apos;,&#10;  $domain = &apos;&apos;,&#10;  $path = &apos;/&apos;,&#10;  $prefix = &apos;&apos;,&#10;  $secure = false,&#10;  $httponly = false&#10; )&#10;&#10;Description&#10;     Set a cookie&#10;&#10;Parameters:&#10;    string|array $name - Cookie name or array containing binds&#10;    string $value - Cookie value&#10;    string $expire - Cookie expiration time in seconds&#10;    string $domain - Cookie domain (e&#10;    string $path - Cookie path (default: &apos;/&apos;)&#10;    string $prefix - Cookie name prefix&#10;    boolean $secure - Whether to only transfer cookies via SSL&#10;    boolean $httponly - Whether only make the cookie accessible via HTTP (no javascript);;d1,833;;b1,0;;m0;;estring|array $name;;pstring $value;;pstring $expire;;pstring $domain;;pstring $path;;pstring $prefix;;pboolean $secure;;pboolean $httponly;;p">
</treenode>
<treenode node="setDate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;366;2;373;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    setDate(\DateTime $date)&#10;&#10;Description&#10;     Sets the date header&#10;&#10;Parameters:&#10;    \DateTime $date;;d1,367;;b1,0;;m0;;e\DateTime $date;;p">
</treenode>
<treenode node="setJSON;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;447;2;452;;;;vpos;;v;;a;;r&#10;Definition&#10;    setJSON($body, bool $unencoded = false)&#10;&#10;Description&#10;     Converts the $body into JSON and sets the Content Type header.&#10;&#10;Parameters:&#10;    array|string $body&#10;    boolean $name;;d1,448;;b1,0;;m0;;earray|string $body;;pboolean $name;;p">
</treenode>
<treenode node="setLastModified;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;650;2;663;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    setLastModified($date)&#10;&#10;Description&#10;     Sets the Last-Modified date header.&#10;&#10;Parameters:&#10;    \DateTime|string $date;;d1,651;;b1,0;;m0;;e\DateTime|string $date;;p">
</treenode>
<treenode node="setLink;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;386;2;410;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    setLink(PagerInterface $pager)&#10;&#10;Description&#10;     Set the Link Header&#10;&#10;Parameters:&#10;    \CodeIgniter\Pager\PagerInterface $pager;;d1,387;;b1,0;;m0;;e\CodeIgniter\Pager\PagerInterface $pager;;p">
</treenode>
<treenode node="setStatusCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;307;2;333;;;;vpos;;v;;a;;r&#10;Definition&#10;    setStatusCode(int $code, string $reason = &apos;&apos;)&#10;&#10;Description&#10;     Return an instance with the specified status code and, optionally, reason phrase.&#10;&#10;Parameters:&#10;    integer $code - The 3-digit integer result code to set&#10;    string $reason - The reason phrase to use with the;;d1,308;;b1,0;;m0;;einteger $code;;pstring $reason;;p">
</treenode>
<treenode node="setXML;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Response.php;f8;490;2;495;;;;vpos;;v;;a;;r&#10;Definition&#10;    setXML($body)&#10;&#10;Description&#10;     Converts $body into XML, and sets the correct Content-Type.&#10;&#10;Parameters:&#10;    array|string $body;;d1,491;;b1,0;;m0;;earray|string $body;;p">
</treenode>
</treenode>
<treenode node="ResponseTrait;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f0;56;1;429;;;;vpos;;v;;a;;r&#10;Definition&#10;    trait ResponseTrait&#10;&#10;Description&#10;     Response trait.;;d0,57;;b0,0;;m0;;e">
<treenode node="fail;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;152;2;166;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    fail($messages, int $status = 400, string $code = null, string $customMessage = &apos;&apos;)&#10;&#10;Description&#10;     Used for generic failures that no custom methods exist for.&#10;&#10;Parameters:&#10;    string|array $messages&#10;    integer|null $status - HTTP status code&#10;    string|null $code - Custom, API-specific, error code&#10;    string $customMessage;;d1,153;;b1,0;;m0;;estring|array $messages;;pinteger|null $status;;pstring|null $code;;pstring $customMessage;;p">
</treenode>
<treenode node="failForbidden;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;259;2;262;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    failForbidden(string $description = &apos;Forbidden&apos;, string $code = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Used when access is always denied to this resource and no amount of trying again will help.&#10;&#10;Parameters:&#10;    string $description&#10;    string $code&#10;    string $message;;d1,260;;b1,0;;m0;;estring $description;;pstring $code;;pstring $message;;p">
</treenode>
<treenode node="failNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;275;2;278;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    failNotFound(string $description = &apos;Not Found&apos;, string $code = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Used when a specified resource cannot be found.&#10;&#10;Parameters:&#10;    string $description&#10;    string $code&#10;    string $message;;d1,276;;b1,0;;m0;;estring $description;;pstring $code;;pstring $message;;p">
</treenode>
<treenode node="failResourceExists;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;307;2;310;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    failResourceExists(string $description = &apos;Conflict&apos;, string $code = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Use when trying to create a new resource and it already exists.&#10;&#10;Parameters:&#10;    string $description&#10;    string $code&#10;    string $message;;d1,308;;b1,0;;m0;;estring $description;;pstring $code;;pstring $message;;p">
</treenode>
<treenode node="failResourceGone;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;325;2;328;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    failResourceGone(string $description = &apos;Gone&apos;, string $code = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Use when a resource was previously deleted. This is different than Not Found, because here we know the data previously existed, but is now gone, where Not Found means we simply cannot find any information about it.&#10;&#10;Parameters:&#10;    string $description&#10;    string $code&#10;    string $message;;d1,326;;b1,0;;m0;;estring $description;;pstring $code;;pstring $message;;p">
</treenode>
<treenode node="failServerError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;357;2;360;;;;vpos;;v;;aResponse;;r&#10;Definition&#10;    failServerError(string $description = &apos;Internal Server Error&apos;, string $code = null, string $message = &apos;&apos;): Response&#10;&#10;Description&#10;     Used when there is a server error.&#10;&#10;Parameters:&#10;    string $description - The error message to show the user&#10;    string|null $code - A custom, API-specific, error code&#10;    string $message - A custom &quot;reason&quot; message to return&#10;&#10;Return:&#10;   The value of the Response&apos;s send() method;;d1,358;;b1,0;;m0;;estring $description;;pstring|null $code;;pstring $message;;p">
</treenode>
<treenode node="failTooManyRequests;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;341;2;344;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    failTooManyRequests(string $description = &apos;Too Many Requests&apos;, string $code = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Used when the user has made too many requests for the resource recently.&#10;&#10;Parameters:&#10;    string $description&#10;    string $code&#10;    string $message;;d1,342;;b1,0;;m0;;estring $description;;pstring $code;;pstring $message;;p">
</treenode>
<treenode node="failUnauthorized;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;242;2;245;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    failUnauthorized(string $description = &apos;Unauthorized&apos;, string $code = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Used when the client is either didn&apos;t send authorization information, or had bad authorization credentials. User is encouraged to try again with the proper information.&#10;&#10;Parameters:&#10;    string $description&#10;    string $code&#10;    string $message;;d1,243;;b1,0;;m0;;estring $description;;pstring $code;;pstring $message;;p">
</treenode>
<treenode node="failValidationError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;291;2;294;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    failValidationError(string $description = &apos;Bad Request&apos;, string $code = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Used when the data provided by the client cannot be validated.&#10;&#10;Parameters:&#10;    string $description&#10;    string $code&#10;    string $message;;d1,292;;b1,0;;m0;;estring $description;;pstring $code;;pstring $message;;p">
</treenode>
<treenode node="format;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f11;374;2;414;;;;vpos;;v;;astring;;r&#10;Definition&#10;    format($data = null)&#10;&#10;Description&#10;     Handles formatting a response. Currently makes some heavy assumptions and needs updating! :)&#10;&#10;Parameters:&#10;    string|array|null $data&#10;&#10;Return:&#10;   |null;;d1,375;;b2,0;;m0;;estring|array|null $data;;p">
</treenode>
<treenode node="respond;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;116;2;138;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    respond($data = null, int $status = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Provides a single, simple method to return an API response, formatted to match the requested format, with proper content-type and status code.&#10;&#10;Parameters:&#10;    array|string|null $data&#10;    integer $status&#10;    string $message;;d1,117;;b1,0;;m0;;earray|string|null $data;;pinteger $status;;pstring $message;;p">
</treenode>
<treenode node="respondCreated;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;181;2;184;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    respondCreated($data = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Used after successfully creating a new resource.&#10;&#10;Parameters:&#10;    mixed $data - Data&#10;    string $message - Message;;d1,182;;b1,0;;m0;;emixed $data;;pstring $message;;p">
</treenode>
<treenode node="respondDeleted;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;196;2;199;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    respondDeleted($data = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Used after a resource has been successfully deleted.&#10;&#10;Parameters:&#10;    mixed $data - Data&#10;    string $message - Message;;d1,197;;b1,0;;m0;;emixed $data;;pstring $message;;p">
</treenode>
<treenode node="respondNoContent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;224;2;227;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    respondNoContent(string $message = &apos;No Content&apos;)&#10;&#10;Description&#10;     Used after a command has been successfully executed but there is no meaningful reply to send back to the client.&#10;&#10;Parameters:&#10;    string $message - Message;;d1,225;;b1,0;;m0;;estring $message;;p">
</treenode>
<treenode node="respondUpdated;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;209;2;212;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    respondUpdated($data = null, string $message = &apos;&apos;)&#10;&#10;Description&#10;     Used after a resource has been successfully updated.&#10;&#10;Parameters:&#10;    mixed $data - Data&#10;    string $message - Message;;d1,210;;b1,0;;m0;;emixed $data;;pstring $message;;p">
</treenode>
<treenode node="setResponseFormat;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\API\ResponseTrait.php;f8;423;2;428;;;;vpos;;v;;a;;r&#10;Definition&#10;    setResponseFormat(string $format = null)&#10;&#10;Description&#10;     Sets the format the response should be in.&#10;&#10;Parameters:&#10;    string $format;;d1,424;;b1,0;;m0;;estring $format;;p">
</treenode>
</treenode>
<treenode node="Result;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Result.php;f0;48;1;206;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Result.php;f0;48;1;172;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Result.php;f0;48;1;210;;;;vpos;;v;;aBaseResult;;cResultInterface;;c;;r&#10;Definition&#10;    class Result extends BaseResult implements ResultInterface&#10;&#10;Description&#10;     Result for SQLite3;;d0,49;;b0,0;;m0;;e">
<treenode node="dataSeek;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Result.php;f8;140;2;148;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Result.php;f8;132;2;135;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Result.php;f8;170;2;173;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    dataSeek(int $n = 0)&#10;&#10;Description&#10;     Moves the internal pointer to the desired offset. This is called internally before fetching results to make sure the result set starts at zero.&#10;&#10;Parameters:&#10;    integer $n;;d1,141;;b1,0;;m0;;einteger $n;;p">
</treenode>
<treenode node="fetchAssoc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Result.php;f11;159;2;162;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Result.php;f11;146;2;149;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Result.php;f11;184;2;187;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    fetchAssoc()&#10;&#10;Description&#10;     Returns the result set as an array.;;d1,160;;b2,0;;m0;;e">
</treenode>
<treenode node="fetchObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Result.php;f11;175;2;203;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Result.php;f11;162;2;169;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Result.php;f11;200;2;207;;;;vpos;;v;;aobject;;r&#10;Definition&#10;    fetchObject(string $className = &apos;stdClass&apos;)&#10;&#10;Description&#10;     Returns the result set as an object.&#10;&#10;Parameters:&#10;    string $className&#10;&#10;Return:&#10;   |boolean;;d1,176;;b2,0;;m0;;estring $className;;p">
</treenode>
<treenode node="freeResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Result.php;f8;119;2;126;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Result.php;f8;112;2;119;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Result.php;f8;150;2;157;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    freeResult()&#10;&#10;Description&#10;     Frees the current result.;;d1,120;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldCount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Result.php;f8;56;2;59;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Result.php;f8;56;2;59;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Result.php;f8;56;2;59;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getFieldCount(): int&#10;&#10;Description&#10;     Gets the number of fields in the result set.;;d1,57;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Result.php;f8;86;2;110;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Result.php;f8;86;2;103;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Result.php;f8;87;2;141;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFieldData(): array&#10;&#10;Description&#10;     Generates an array of objects representing field meta-data.;;d1,87;;b1,0;;m0;;e">
</treenode>
<treenode node="getFieldNames;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Result.php;f8;68;2;77;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Result.php;f8;68;2;77;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Result.php;f8;68;2;78;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFieldNames(): array&#10;&#10;Description&#10;     Generates an array of column names in the result set.;;d1,69;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="RichRenderer;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f0;34;1;611;;;;vpos;;v;;aRenderer;;c;;r;;d0,35;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;140;5;148;;;;vpos;;v;;a;;r;;d4,141;;b1,0;;m0;;e">
</treenode>
<treenode node="escape;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;487;5;507;;;;vpos;;v;;a;;r;;d4,488;;b1,0;;m0;;estring;;pencoding;;p">
</treenode>
<treenode node="getExpand;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;182;5;185;;;;vpos;;v;;a;;r;;d4,183;;b1,0;;m0;;e">
</treenode>
<treenode node="getPlugin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f14;580;5;591;;;;vpos;;v;;a;;r;;d4,581;;b2,0;;m0;;eplugins;;phints;;p">
</treenode>
<treenode node="getPreRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;199;5;202;;;;vpos;;v;;a;;r;;d4,200;;b1,0;;m0;;e">
</treenode>
<treenode node="getUseFolder;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;209;5;212;;;;vpos;;v;;a;;r;;d4,210;;b1,0;;m0;;e">
</treenode>
<treenode node="ideLink;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;509;5;525;;;;vpos;;v;;a;;r;;d4,510;;b1,0;;m0;;efile;;pline;;p">
</treenode>
<treenode node="postRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;419;5;485;;;;vpos;;v;;a;;r;;d4,420;;b1,0;;m0;;e">
</treenode>
<treenode node="preRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;367;5;417;;;;vpos;;v;;a;;r;;d4,368;;b1,0;;m0;;e">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;214;5;226;;;;vpos;;v;;a;;r;;d4,215;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderChildren;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;321;5;365;;;;vpos;;v;;a;;r;;d4,322;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderCss;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f21;598;5;605;;;;vpos;;v;;a;;r;;d4,599;;b2,5;;m0;;e">
</treenode>
<treenode node="renderFolder;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f21;607;5;610;;;;vpos;;v;;a;;r;;d4,608;;b2,5;;m0;;e">
</treenode>
<treenode node="renderHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;273;5;319;;;;vpos;;v;;a;;r;;d4,274;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderHeaderWrapper;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;233;5;271;;;;vpos;;v;;a;;r;;d4,234;;b1,0;;m0;;eo;;phas_children;;pcontents;;p">
</treenode>
<treenode node="renderJs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f21;593;5;596;;;;vpos;;v;;a;;r;;d4,594;;b2,5;;m0;;e">
</treenode>
<treenode node="renderNothing;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;228;5;231;;;;vpos;;v;;a;;r;;d4,229;;b1,0;;m0;;e">
</treenode>
<treenode node="renderTab;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f14;527;5;578;;;;vpos;;v;;a;;r;;d4,528;;b2,0;;m0;;eo;;prep;;p">
</treenode>
<treenode node="setCallInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;150;5;162;;;;vpos;;v;;a;;r;;d4,151;;b1,0;;m0;;einfo;;p">
</treenode>
<treenode node="setExpand;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;177;5;180;;;;vpos;;v;;a;;r;;d4,178;;b1,0;;m0;;eexpand;;p">
</treenode>
<treenode node="setForcePreRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;187;5;191;;;;vpos;;v;;a;;r;;d4,188;;b1,0;;m0;;e">
</treenode>
<treenode node="setPreRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;193;5;197;;;;vpos;;v;;a;;r;;d4,194;;b1,0;;m0;;epre_render;;p">
</treenode>
<treenode node="setStatics;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;164;5;175;;;;vpos;;v;;a;;r;;d4,165;;b1,0;;m0;;estatics;;p">
</treenode>
<treenode node="setUseFolder;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\RichRenderer.php;f11;204;5;207;;;;vpos;;v;;a;;r;;d4,205;;b1,0;;m0;;euse_folder;;p">
</treenode>
</treenode>
<treenode node="RoleFilter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Filters\RoleFilter.php;f0;8;1;88;;;;vpos;;v;;aFilterInterface;;c;;r;;d0,9;;b0,0;;m0;;e">
<treenode node="after;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Filters\RoleFilter.php;f8;82;2;85;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    after(RequestInterface $request, ResponseInterface $response, $arguments = null)&#10;&#10;Description&#10;     Allows After filters to inspect and modify the response object as needed. This method does not allow any way to stop execution of other after filters, short of throwing an Exception or Error.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    \CodeIgniter\HTTP\ResponseInterface $response&#10;    array|null $arguments;;d1,83;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;p\CodeIgniter\HTTP\ResponseInterface $response;;parray|null $arguments;;p">
</treenode>
<treenode node="before;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Filters\RoleFilter.php;f8;25;2;66;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    before(RequestInterface $request, $params = null)&#10;&#10;Description&#10;     Do whatever processing this filter needs to do. By default it should not return anything during normal execution. However, when an abnormal state is found, it should return an instance of CodeIgniter\HTTP\Response. If it does, script execution will end and that Response will be sent back to the client, allowing for error pages, redirects, etc.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    array|null $params;;d1,26;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;parray|null $params;;p">
</treenode>
</treenode>
<treenode node="RouteCollection;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f0;53;1;1587;;;;vpos;;v;;aRouteCollectionInterface;;c;;r&#10;Definition&#10;    class RouteCollection implements RouteCollectionInterface&#10;&#10;Description&#10;     Class RouteCollection;;d0,54;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;235;2;239;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(FileLocator $locator, $moduleConfig)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    \CodeIgniter\Autoloader\FileLocator $locator&#10;    \Config\Modules $moduleConfig;;d1,236;;b1,0;;m0;;e\CodeIgniter\Autoloader\FileLocator $locator;;p\Config\Modules $moduleConfig;;p">
</treenode>
<treenode node="add;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;629;2;634;;;;vpos;;v;;aRouteCollectionInterface;;r&#10;Definition&#10;    add(string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Adds a single route to the collection.&#10;&#10;Parameters:&#10;    string $from&#10;    array|string $to&#10;    array|null $options;;d1,630;;b1,0;;m0;;estring $from;;parray|string $to;;parray|null $options;;p">
</treenode>
<treenode node="addPlaceholder;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;256;2;266;;;;vpos;;v;;a;;r&#10;Definition&#10;    addPlaceholder($placeholder, string $pattern = null): RouteCollectionInterface&#10;&#10;Description&#10;     Registers a new constraint with the system. Constraints are used by the routes as placeholders for regular expressions to make defining the routes more human-friendly.&#10;&#10;Parameters:&#10;    string|array $placeholder&#10;    string $pattern;;d1,257;;b1,0;;m0;;estring|array $placeholder;;pstring $pattern;;p">
</treenode>
<treenode node="addRedirect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;649;2;664;;;;vpos;;v;;aRouteCollection;;r&#10;Definition&#10;    addRedirect(string $from, string $to, int $status = 302)&#10;&#10;Description&#10;     Adds a temporary redirect from one route to another. Used for redirecting traffic from old, non-existing routes to the new moved routes.&#10;&#10;Parameters:&#10;    string $from - The pattern to match against&#10;    string $to - Either a route name or a URI to redirect to&#10;    integer $status - The HTTP status code that should be returned with this redirect;;d1,650;;b1,0;;m0;;estring $from;;pstring $to;;pinteger $status;;p">
</treenode>
<treenode node="checkSubdomains;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f9;1494;2;1520;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    checkSubdomains($subdomains): bool&#10;&#10;Description&#10;     Compares the subdomain(s) passed in against the current subdomain on this page request.&#10;&#10;Parameters:&#10;    mixed $subdomains;;d1,1495;;b3,0;;m0;;emixed $subdomains;;p">
</treenode>
<treenode node="cli;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1165;2;1170;;;;vpos;;v;;a;;r&#10;Definition&#10;    cli(string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Specifies a route that is only available to command-line requests.&#10;&#10;Parameters:&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1166;;b1,0;;m0;;estring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="create;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f11;1375;2;1482;;;;vpos;;v;;a;;r&#10;Definition&#10;    create(string $verb, string $from, $to, array $options = null)&#10;&#10;Description&#10;     Does the heavy lifting of creating an actual route. You must specify the request method(s) that this route will work for. They can be separated by a pipe character &quot;|&quot; if there is more than one.&#10;&#10;Parameters:&#10;    string $verb&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1376;;b2,0;;m0;;estring $verb;;pstring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1093;2;1098;;;;vpos;;v;;a;;r&#10;Definition&#10;    delete(string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Specifies a route that is only available to DELETE requests.&#10;&#10;Parameters:&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1094;;b1,0;;m0;;estring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="determineCurrentSubdomain;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f9;1533;2;1570;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    determineCurrentSubdomain()&#10;&#10;Description&#10;     Examines the HTTP_HOST to get a best match for the subdomain. It won&apos;t be perfect, but should work for our needs.;;d1,1534;;b3,0;;m0;;e">
</treenode>
<treenode node="discoverRoutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f11;400;2;428;;;;vpos;;v;;a;;r&#10;Definition&#10;    discoverRoutes()&#10;&#10;Description&#10;     Will attempt to discover any additional routes, either through the local PSR4 namespaces, or through selected Composer packages.;;d1,401;;b2,0;;m0;;e">
</treenode>
<treenode node="environment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1182;2;1190;;;;vpos;;v;;a;;r&#10;Definition&#10;    environment(string $env, \Closure $callback): RouteCollectionInterface&#10;&#10;Description&#10;     Limits the routes to a specified ENVIRONMENT or they won&apos;t run.&#10;&#10;Parameters:&#10;    string $env&#10;    \Closure $callback;;d1,1183;;b1,0;;m0;;estring $env;;p\Closure $callback;;p">
</treenode>
<treenode node="fillRouteParams;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f11;1332;2;1361;;;;vpos;;v;;astring;;r&#10;Definition&#10;    fillRouteParams(string $from, array $params = null): string&#10;&#10;Description&#10;     Given a&#10;&#10;Parameters:&#10;    string $from&#10;    array|null $params;;d1,1333;;b2,0;;m0;;estring $from;;parray|null $params;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1039;2;1044;;;;vpos;;v;;a;;r&#10;Definition&#10;    get(string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Specifies a route that is only available to GET requests.&#10;&#10;Parameters:&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1040;;b1,0;;m0;;estring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="get404Override;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;389;2;392;;;;vpos;;v;;astring;;r&#10;Definition&#10;    get404Override()&#10;&#10;Description&#10;     Returns the 404 Override setting, which can be null, a closure or the controller/string.&#10;&#10;Return:&#10;   |\Closure|null;;d1,390;;b1,0;;m0;;e">
</treenode>
<treenode node="getDefaultController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;457;2;460;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDefaultController(): string&#10;&#10;Description&#10;     Returns the name of the default controller. With Namespace.;;d1,458;;b1,0;;m0;;e">
</treenode>
<treenode node="getDefaultMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;469;2;472;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDefaultMethod(): string&#10;&#10;Description&#10;     Returns the name of the default method to use within the controller.;;d1,470;;b1,0;;m0;;e">
</treenode>
<treenode node="getDefaultNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;481;2;484;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDefaultNamespace(): string&#10;&#10;Description&#10;     Returns the default namespace as set in the Routes config file.;;d1,482;;b1,0;;m0;;e">
</treenode>
<treenode node="getFilterForRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1311;2;1319;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getFilterForRoute(string $search): string&#10;&#10;Description&#10;     Returns the filter that should be applied for a single route, along with any parameters it might have. Parameters are found by splitting the parameter name on a colon to separate the filter name from the parameter list, and the splitting the result on commas. So:&#10;&#10;Parameters:&#10;    string $search;;d1,1312;;b1,0;;m0;;estring $search;;p">
</treenode>
<treenode node="getHTTPVerb;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;573;2;576;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getHTTPVerb(): string&#10;&#10;Description&#10;     Returns the current HTTP Verb being used.;;d1,574;;b1,0;;m0;;e">
</treenode>
<treenode node="getRedirectCode;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;698;2;710;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getRedirectCode(string $from): int&#10;&#10;Description&#10;     Grabs the HTTP status code from a redirecting Route.&#10;&#10;Parameters:&#10;    string $from;;d1,699;;b1,0;;m0;;estring $from;;p">
</treenode>
<treenode node="getRoutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;519;2;550;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getRoutes($verb = null): array&#10;&#10;Description&#10;     Returns the raw array of available routes.&#10;&#10;Parameters:&#10;    mixed $verb;;d1,520;;b1,0;;m0;;emixed $verb;;p">
</treenode>
<treenode node="getRoutesOptions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;561;2;564;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getRoutesOptions(string $from = null): array&#10;&#10;Description&#10;     Returns one or all routes options&#10;&#10;Parameters:&#10;    string $from;;d1,562;;b1,0;;m0;;estring $from;;p">
</treenode>
<treenode node="group;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;732;2;755;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    group(string $name, ...$params)&#10;&#10;Description&#10;     Group a series of routes under a single URL segment. This is handy for grouping items into an admin area, like:&#10;&#10;Parameters:&#10;    string $name - The name to group/prefix the routes with&#10;    array - ...$params;;d1,733;;b1,0;;m0;;estring $name;;parray;;p">
</treenode>
<treenode node="head;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1111;2;1116;;;;vpos;;v;;a;;r&#10;Definition&#10;    head(string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Specifies a route that is only available to HEAD requests.&#10;&#10;Parameters:&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1112;;b1,0;;m0;;estring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="isFiltered;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1290;2;1293;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isFiltered(string $search): bool&#10;&#10;Description&#10;     Checks a route (using the &quot;from&quot;) to see if it&apos;s filtered or not.&#10;&#10;Parameters:&#10;    string $search;;d1,1291;;b1,0;;m0;;estring $search;;p">
</treenode>
<treenode node="isRedirect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;675;2;687;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isRedirect(string $from): bool&#10;&#10;Description&#10;     Determines if the route is a redirecting route.&#10;&#10;Parameters:&#10;    string $from;;d1,676;;b1,0;;m0;;estring $from;;p">
</treenode>
<treenode node="localizeRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f11;1276;2;1279;;;;vpos;;v;;astring;;r&#10;Definition&#10;    localizeRoute(string $route) :string&#10;&#10;Description&#10;     Replaces the {locale} tag with the current application locale&#10;&#10;Parameters:&#10;    string $route;;d1,1277;;b2,0;;m0;;estring $route;;p">
</treenode>
<treenode node="map;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;605;2;613;;;;vpos;;v;;aRouteCollectionInterface;;r&#10;Definition&#10;    map(array $routes = [], array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     A shortcut method to add a number of routes at a single time. It does not allow any options to be set on the route, or to define the method used.&#10;&#10;Parameters:&#10;    array $routes&#10;    array $options;;d1,606;;b1,0;;m0;;earray $routes;;parray $options;;p">
</treenode>
<treenode node="match;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1016;2;1026;;;;vpos;;v;;a;;r&#10;Definition&#10;    match(array $verbs = [], string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Specifies a single route to match for multiple HTTP Verbs.&#10;&#10;Parameters:&#10;    array $verbs&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1017;;b1,0;;m0;;earray $verbs;;pstring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="options;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1147;2;1152;;;;vpos;;v;;a;;r&#10;Definition&#10;    options(string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Specifies a route that is only available to OPTIONS requests.&#10;&#10;Parameters:&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1148;;b1,0;;m0;;estring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="patch;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1129;2;1134;;;;vpos;;v;;a;;r&#10;Definition&#10;    patch(string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Specifies a route that is only available to PATCH requests.&#10;&#10;Parameters:&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1130;;b1,0;;m0;;estring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="post;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1057;2;1062;;;;vpos;;v;;a;;r&#10;Definition&#10;    post(string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Specifies a route that is only available to POST requests.&#10;&#10;Parameters:&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1058;;b1,0;;m0;;estring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="presenter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;917;2;999;;;;vpos;;v;;aRouteCollectionInterface;;r&#10;Definition&#10;    presenter(string $name, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Creates a collections of HTTP-verb based routes for a presenter controller.&#10;&#10;Parameters:&#10;    string $name - The name of the controller to route to&#10;    array|null $options - An list of possible ways to customize the routing;;d1,918;;b1,0;;m0;;estring $name;;parray|null $options;;p">
</treenode>
<treenode node="put;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1075;2;1080;;;;vpos;;v;;a;;r&#10;Definition&#10;    put(string $from, $to, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Specifies a route that is only available to PUT requests.&#10;&#10;Parameters:&#10;    string $from&#10;    string|array $to&#10;    array|null $options;;d1,1076;;b1,0;;m0;;estring $from;;pstring|array $to;;parray|null $options;;p">
</treenode>
<treenode node="resetRoutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1578;2;1585;;;;vpos;;v;;a;;r&#10;Definition&#10;    resetRoutes()&#10;&#10;Description&#10;     Reset the routes, so that a FeatureTestCase can provide the explicit ones needed for it.;;d1,1579;;b1,0;;m0;;e">
</treenode>
<treenode node="resource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;803;2;887;;;;vpos;;v;;aRouteCollectionInterface;;r&#10;Definition&#10;    resource(string $name, array $options = null): RouteCollectionInterface&#10;&#10;Description&#10;     Creates a collections of HTTP-verb based routes for a controller.&#10;&#10;Parameters:&#10;    string $name - The name of the resource/controller to route to&#10;    array|null $options - An list of possible ways to customize the routing;;d1,804;;b1,0;;m0;;estring $name;;parray|null $options;;p">
</treenode>
<treenode node="reverseRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;1212;2;1265;;;;vpos;;v;;astring;;r&#10;Definition&#10;    reverseRoute(string $search, ...$params)&#10;&#10;Description&#10;     Attempts to look up a route based on its destination.&#10;&#10;Parameters:&#10;    string $search&#10;    array - ...$params&#10;&#10;Return:&#10;   |false;;d1,1213;;b1,0;;m0;;estring $search;;parray;;p">
</treenode>
<treenode node="set404Override;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;374;2;379;;;;vpos;;v;;aRouteCollectionInterface;;r&#10;Definition&#10;    set404Override($callable = null): RouteCollectionInterface&#10;&#10;Description&#10;     Sets the class/method that should be called if routing doesn&apos;t find a match. It can be either a closure or the controller/method name exactly like a route is defined: Users::index&#10;&#10;Parameters:&#10;    callable|null $callable;;d1,375;;b1,0;;m0;;ecallable|null $callable;;p">
</treenode>
<treenode node="setAutoRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;354;2;359;;;;vpos;;v;;aRouteCollectionInterface;;r&#10;Definition&#10;    setAutoRoute(bool $value): RouteCollectionInterface&#10;&#10;Description&#10;     If TRUE, the system will attempt to match the URI against Controllers by matching each segment against folders/files in APPPATH/Controllers, when a match wasn&apos;t found against defined routes.&#10;&#10;Parameters:&#10;    boolean $value;;d1,355;;b1,0;;m0;;eboolean $value;;p">
</treenode>
<treenode node="setDefaultConstraint;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;440;2;448;;;;vpos;;v;;aRouteCollectionInterface;;r&#10;Definition&#10;    setDefaultConstraint(string $placeholder): RouteCollectionInterface&#10;&#10;Description&#10;     Sets the default constraint to be used in the system. Typically for use with the &apos;resource&apos; method.&#10;&#10;Parameters:&#10;    string $placeholder;;d1,441;;b1,0;;m0;;estring $placeholder;;p">
</treenode>
<treenode node="setDefaultController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;296;2;301;;;;vpos;;v;;a;;r&#10;Definition&#10;    setDefaultController(string $value): RouteCollectionInterface&#10;&#10;Description&#10;     Sets the default controller to use when no other controller has been specified.&#10;&#10;Parameters:&#10;    string $value;;d1,297;;b1,0;;m0;;estring $value;;p">
</treenode>
<treenode node="setDefaultMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;313;2;318;;;;vpos;;v;;a;;r&#10;Definition&#10;    setDefaultMethod(string $value): RouteCollectionInterface&#10;&#10;Description&#10;     Sets the default method to call on the controller when no other method has been set in the route.&#10;&#10;Parameters:&#10;    string $value;;d1,314;;b1,0;;m0;;estring $value;;p">
</treenode>
<treenode node="setDefaultNamespace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;278;2;284;;;;vpos;;v;;a;;r&#10;Definition&#10;    setDefaultNamespace(string $value): RouteCollectionInterface&#10;&#10;Description&#10;     Sets the default namespace to use for Controllers when no other namespace has been specified.&#10;&#10;Parameters:&#10;    string $value;;d1,279;;b1,0;;m0;;estring $value;;p">
</treenode>
<treenode node="setHTTPVerb;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;588;2;593;;;;vpos;;v;;a;;r&#10;Definition&#10;    setHTTPVerb(string $verb)&#10;&#10;Description&#10;     Sets the current HTTP verb. Used primarily for testing.&#10;&#10;Parameters:&#10;    string $verb;;d1,589;;b1,0;;m0;;estring $verb;;p">
</treenode>
<treenode node="setTranslateURIDashes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;333;2;338;;;;vpos;;v;;a;;r&#10;Definition&#10;    setTranslateURIDashes(bool $value): RouteCollectionInterface&#10;&#10;Description&#10;     Tells the system whether to convert dashes in URI strings into underscores. In some search engines, including Google, dashes create more meaning and make it easier for the search engine to find words and meaning in the URI for better SEO. But it doesn&apos;t work well with PHP method names....&#10;&#10;Parameters:&#10;    boolean $value;;d1,334;;b1,0;;m0;;eboolean $value;;p">
</treenode>
<treenode node="shouldAutoRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;505;2;508;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    shouldAutoRoute(): bool&#10;&#10;Description&#10;     Returns the flag that tells whether to autoRoute URI against Controllers.;;d1,506;;b1,0;;m0;;e">
</treenode>
<treenode node="shouldTranslateURIDashes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\RouteCollection.php;f8;493;2;496;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    shouldTranslateURIDashes(): bool&#10;&#10;Description&#10;     Returns the current value of the translateURIDashes setting.;;d1,494;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="Router;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f0;49;1;724;;;;vpos;;v;;aRouterInterface;;c;;r&#10;Definition&#10;    class Router implements RouterInterface&#10;&#10;Description&#10;     Request router.;;d0,50;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;141;2;149;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(RouteCollectionInterface $routes, Request $request = null)&#10;&#10;Description&#10;     Stores a reference to the RouteCollection object.&#10;&#10;Parameters:&#10;    RouteCollectionInterface $routes&#10;    Request $request;;d1,142;;b1,0;;m0;;eRouteCollectionInterface $routes;;pRequest $request;;p">
</treenode>
<treenode node="autoRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;519;2;591;;;;vpos;;v;;a;;r&#10;Definition&#10;    autoRoute(string $uri)&#10;&#10;Description&#10;     Attempts to match a URI path against Controllers and directories found in APPPATH/Controllers, to find a matching route.&#10;&#10;Parameters:&#10;    string $uri;;d1,520;;b1,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="checkRoutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f11;395;2;509;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    checkRoutes(string $uri): bool&#10;&#10;Description&#10;     Compares the uri string against the routes that the RouteCollection class defined for us, attempting to find a match. This method will modify $this-&gt;controller, etal as needed.&#10;&#10;Parameters:&#10;    string $uri - The URI path to compare against the routes&#10;&#10;Return:&#10;   Whether the route was matched or not;;d1,396;;b2,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="controllerName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;218;2;223;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    controllerName()&#10;&#10;Description&#10;     Returns the name of the matched controller.;;d1,219;;b1,0;;m0;;e">
</treenode>
<treenode node="directory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;292;2;295;;;;vpos;;v;;astring;;r&#10;Definition&#10;    directory(): string&#10;&#10;Description&#10;     Returns the name of the sub-directory the controller is in, if any. Relative to APPPATH.&apos;Controllers&apos;.;;d1,293;;b1,0;;m0;;e">
</treenode>
<treenode node="get404Override;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;246;2;266;;;;vpos;;v;;a;;r&#10;Definition&#10;    get404Override()&#10;&#10;Description&#10;     Returns the 404 Override settings from the Collection. If the override is a string, will split to controller/index array.;;d1,247;;b1,0;;m0;;e">
</treenode>
<treenode node="getFilter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;206;2;209;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getFilter()&#10;&#10;Description&#10;     Returns the filter info for the matched route, if any.;;d1,207;;b1,0;;m0;;e">
</treenode>
<treenode node="getLocale;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;378;2;381;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getLocale()&#10;&#10;Description&#10;     Returns the detected locale, if any, or null.;;d1,379;;b1,0;;m0;;e">
</treenode>
<treenode node="getMatchedRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;305;2;308;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getMatchedRoute()&#10;&#10;Description&#10;     Returns the routing information that was matched for this request, if a route was defined.&#10;&#10;Return:&#10;   |null;;d1,306;;b1,0;;m0;;e">
</treenode>
<treenode node="getMatchedRouteOptions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;317;2;320;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getMatchedRouteOptions()&#10;&#10;Description&#10;     Returns all options set for the matched route&#10;&#10;Return:&#10;   |null;;d1,318;;b1,0;;m0;;e">
</treenode>
<treenode node="handle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;160;2;197;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    handle(string $uri = null)&#10;&#10;Description&#10;     &#10;&#10;Parameters:&#10;    string|null $uri&#10;&#10;Return:&#10;   |string;;d1,161;;b1,0;;m0;;estring|null $uri;;p">
</treenode>
<treenode node="hasLocale;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;366;2;369;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasLocale()&#10;&#10;Description&#10;     Returns true/false based on whether the current route contained a {locale} placeholder.;;d1,367;;b1,0;;m0;;e">
</treenode>
<treenode node="methodName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;233;2;238;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    methodName(): string&#10;&#10;Description&#10;     Returns the name of the method to run in the chosen container.;;d1,234;;b1,0;;m0;;e">
</treenode>
<treenode node="params;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;277;2;280;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    params(): array&#10;&#10;Description&#10;     Returns the binds that have been matched and collected during the parsing process as an array, ready to send to instance-&gt;method(...$params).;;d1,278;;b1,0;;m0;;e">
</treenode>
<treenode node="setDefaultController;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f11;700;2;721;;;;vpos;;v;;a;;r&#10;Definition&#10;    setDefaultController()&#10;&#10;Description&#10;     Sets the default controller based on the info set in the RouteCollection.;;d1,701;;b2,0;;m0;;e">
</treenode>
<treenode node="setDirectory;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;639;2;657;;;;vpos;;v;;a;;r&#10;Definition&#10;    setDirectory(string $dir = null, bool $append = false)&#10;&#10;Description&#10;     Sets the sub-directory that the controller is in.&#10;&#10;Parameters:&#10;    string|null $dir&#10;    boolean|false $append;;d1,640;;b1,0;;m0;;estring|null $dir;;pboolean|false $append;;p">
</treenode>
<treenode node="setIndexPage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;334;2;339;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    setIndexPage($page): self&#10;&#10;Description&#10;     Sets the value that should be used to match the index.php file. Defaults to index.php but this allows you to modify it in case your are using something like mod_rewrite to remove the page. This allows you to set it a blank.&#10;&#10;Parameters:&#10;     $page;;d1,335;;b1,0;;m0;;e $page;;p">
</treenode>
<treenode node="setRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f11;669;2;693;;;;vpos;;v;;a;;r&#10;Definition&#10;    setRequest(array $segments = [])&#10;&#10;Description&#10;     Set request route&#10;&#10;Parameters:&#10;    array $segments - URI segments;;d1,670;;b2,0;;m0;;earray $segments;;p">
</treenode>
<treenode node="setTranslateURIDashes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f8;351;2;356;;;;vpos;;v;;a;;r&#10;Definition&#10;    setTranslateURIDashes(bool $val = false): self&#10;&#10;Description&#10;     Tells the system whether we should translate URI dashes or not in the URI from a dash to an underscore.&#10;&#10;Parameters:&#10;    boolean|false $val;;d1,352;;b1,0;;m0;;eboolean|false $val;;p">
</treenode>
<treenode node="validateRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Router.php;f11;602;2;629;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    validateRequest(array $segments): array&#10;&#10;Description&#10;     Attempts to validate the URI request and determine the controller path.&#10;&#10;Parameters:&#10;    array $segments - URI segments&#10;&#10;Return:&#10;   URI segments;;d1,603;;b2,0;;m0;;earray $segments;;p">
</treenode>
</treenode>
<treenode node="RouterException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Router\Exceptions\RouterException.php;f0;47;1;69;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r&#10;Definition&#10;    class RouterException extends FrameworkException implements ExceptionInterface&#10;&#10;Description&#10;     RouterException;;d0,48;;b0,0;;m0;;e">
<treenode node="forInvalidParameterType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Exceptions\RouterException.php;f15;55;2;58;;;;vpos;;v;;a;;r&#10;Definition&#10;    forInvalidParameterType()&#10;&#10;Description&#10;     Thrown when the actual parameter type does not match the expected types.;;d1,56;;b1,5;;m0;;e">
</treenode>
<treenode node="forMissingDefaultRoute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Router\Exceptions\RouterException.php;f15;65;2;68;;;;vpos;;v;;a;;r&#10;Definition&#10;    forMissingDefaultRoute()&#10;&#10;Description&#10;     Thrown when a default route is not set.;;d1,66;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="Routes;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Routes.php;f0;45;1;201;;O:\xampp\htdocs\2020\blog-4\system\Commands\Utilities\Routes.php;f0;52;1;149;;;;vpos;;v;;aBaseCollector;;c;;r&#10;Definition&#10;    class Routes extends BaseCollector&#10;&#10;Description&#10;     Routes collector;;d0,46;;b0,0;;m0;;e">
<treenode node="display;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Routes.php;f8;80;2;172;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    display(): array&#10;&#10;Description&#10;     Returns the data of this collector to be formatted in the toolbar;;d1,81;;b1,0;;m0;;e">
</treenode>
<treenode node="getBadgeValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Routes.php;f8;181;2;186;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getBadgeValue(): int&#10;&#10;Description&#10;     Returns a count of all the routes in the system.;;d1,182;;b1,0;;m0;;e">
</treenode>
<treenode node="icon;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Routes.php;f8;197;2;200;;;;vpos;;v;;astring;;r&#10;Definition&#10;    icon(): string&#10;&#10;Description&#10;     Display the icon.;;d1,198;;b1,0;;m0;;e">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Utilities\Routes.php;f8;105;2;147;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params)&#10;&#10;Description&#10;     Displays the help for the spark cli script itself.&#10;&#10;Parameters:&#10;    array $params;;d1,106;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="Rules;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f0;48;1;449;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Rules&#10;&#10;Description&#10;     Validation Rules.;;d0,49;;b0,0;;m0;;e">
<treenode node="differs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;61;2;64;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    differs(string $str = null, string $field, array $data): bool&#10;&#10;Description&#10;     The value does not match another field in $data.&#10;&#10;Parameters:&#10;    string $str&#10;    string $field&#10;    array $data - Other field/value pairs;;d1,62;;b1,0;;m0;;estring $str;;pstring $field;;parray $data;;p">
</treenode>
<treenode node="equals;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;76;2;79;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    equals(string $str = null, string $val): bool&#10;&#10;Description&#10;     Equals the static value provided.&#10;&#10;Parameters:&#10;    string $str&#10;    string $val;;d1,77;;b1,0;;m0;;estring $str;;pstring $val;;p">
</treenode>
<treenode node="exact_length;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;92;2;104;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    exact_length(string $str = null, string $val): bool&#10;&#10;Description&#10;     Returns true if $str is $val characters long. $val = &quot;5&quot; (one) | &quot;5,8,12&quot; (multiple values)&#10;&#10;Parameters:&#10;    string $str&#10;    string $val;;d1,93;;b1,0;;m0;;estring $str;;pstring $val;;p">
</treenode>
<treenode node="greater_than;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;116;2;119;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    greater_than(string $str = null, string $min): bool&#10;&#10;Description&#10;     Greater than&#10;&#10;Parameters:&#10;    string $str&#10;    string $min;;d1,117;;b1,0;;m0;;estring $str;;pstring $min;;p">
</treenode>
<treenode node="greater_than_equal_to;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;131;2;134;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    greater_than_equal_to(string $str = null, string $min): bool&#10;&#10;Description&#10;     Equal to or Greater than&#10;&#10;Parameters:&#10;    string $str&#10;    string $min;;d1,132;;b1,0;;m0;;estring $str;;pstring $min;;p">
</treenode>
<treenode node="in_list;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;190;2;197;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    in_list(string $value = null, string $list): bool&#10;&#10;Description&#10;     Value should be within an array of values&#10;&#10;Parameters:&#10;    string $value&#10;    string $list;;d1,191;;b1,0;;m0;;estring $value;;pstring $list;;p">
</treenode>
<treenode node="is_not_unique;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;153;2;178;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    is_not_unique(string $str = null, string $field, array $data): bool&#10;&#10;Description&#10;     Checks the database to see if the given value exist. Can ignore records by field/value to filter (currently accept only one filter).&#10;&#10;Parameters:&#10;    string $str&#10;    string $field&#10;    array $data;;d1,154;;b1,0;;m0;;estring $str;;pstring $field;;parray $data;;p">
</treenode>
<treenode node="is_unique;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;216;2;241;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    is_unique(string $str = null, string $field, array $data): bool&#10;&#10;Description&#10;     Checks the database to see if the given value is unique. Can ignore a single record by field/value to make it useful during record updates.&#10;&#10;Parameters:&#10;    string $str&#10;    string $field&#10;    array $data;;d1,217;;b1,0;;m0;;estring $str;;pstring $field;;parray $data;;p">
</treenode>
<treenode node="less_than;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;253;2;256;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    less_than(string $str = null, string $max): bool&#10;&#10;Description&#10;     Less than&#10;&#10;Parameters:&#10;    string $str&#10;    string $max;;d1,254;;b1,0;;m0;;estring $str;;pstring $max;;p">
</treenode>
<treenode node="less_than_equal_to;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;268;2;271;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    less_than_equal_to(string $str = null, string $max): bool&#10;&#10;Description&#10;     Equal to or Less than&#10;&#10;Parameters:&#10;    string $str&#10;    string $max;;d1,269;;b1,0;;m0;;estring $str;;pstring $max;;p">
</treenode>
<treenode node="matches;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;284;2;287;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    matches(string $str = null, string $field, array $data): bool&#10;&#10;Description&#10;     Matches the value of another field in $data.&#10;&#10;Parameters:&#10;    string $str&#10;    string $field&#10;    array $data - Other field/value pairs;;d1,285;;b1,0;;m0;;estring $str;;pstring $field;;parray $data;;p">
</treenode>
<treenode node="max_length;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;299;2;302;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    max_length(string $str = null, string $val): bool&#10;&#10;Description&#10;     Returns true if $str is $val or fewer characters in length.&#10;&#10;Parameters:&#10;    string $str&#10;    string $val;;d1,300;;b1,0;;m0;;estring $str;;pstring $val;;p">
</treenode>
<treenode node="min_length;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;314;2;317;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    min_length(string $str = null, string $val): bool&#10;&#10;Description&#10;     Returns true if $str is at least $val length.&#10;&#10;Parameters:&#10;    string $str&#10;    string $val;;d1,315;;b1,0;;m0;;estring $str;;pstring $val;;p">
</treenode>
<treenode node="not_equals;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;329;2;332;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    not_equals(string $str = null, string $val): bool&#10;&#10;Description&#10;     Does not equal the static value provided.&#10;&#10;Parameters:&#10;    string $str&#10;    string $val;;d1,330;;b1,0;;m0;;estring $str;;pstring $val;;p">
</treenode>
<treenode node="required;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;343;2;351;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    required($str = null): bool&#10;&#10;Description&#10;     Required&#10;&#10;Parameters:&#10;    mixed $str - Value&#10;&#10;Return:&#10;   True if valid, false if not;;d1,344;;b1,0;;m0;;emixed $str;;p">
</treenode>
<treenode node="required_with;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;369;2;403;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    required_with($str = null, string $fields, array $data): bool&#10;&#10;Description&#10;     The field is required when any of the other required fields are present in the data.&#10;&#10;Parameters:&#10;     $str&#10;    string $fields - List of fields that we should check if present&#10;    array $data - Complete list of fields from the form;;d1,370;;b1,0;;m0;;e $str;;pstring $fields;;parray $data;;p">
</treenode>
<treenode node="required_without;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Rules.php;f8;421;2;446;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    required_without($str = null, string $fields, array $data): bool&#10;&#10;Description&#10;     The field is required when all of the other fields are present in the data but not required.&#10;&#10;Parameters:&#10;     $str&#10;    string $fields&#10;    array $data;;d1,422;;b1,0;;m0;;e $str;;pstring $fields;;parray $data;;p">
</treenode>
</treenode>
<treenode node="RuntimeException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Escaper\Exception\RuntimeException.php;f0;13;1;16;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r&#10;Definition&#10;    class RuntimeException extends \RuntimeException implements&#10;    ExceptionInterface&#10;&#10;Description&#10;     Invalid argument exception;;d0,15;;b0,0;;m0;;e">
</treenode>
<treenode node="Security;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Security\Security.php;f0;47;1;388;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Security&#10;&#10;Description&#10;     HTTP security handler.;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Security\Security.php;f8;178;2;200;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config)&#10;&#10;Description&#10;     Security constructor.&#10;&#10;Parameters:&#10;    \Config\App $config;;d1,179;;b1,0;;m0;;e\Config\App $config;;p">
</treenode>
<treenode node="CSRFSetCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Security\Security.php;f8;275;2;292;;;;vpos;;v;;aSecurity;;r&#10;Definition&#10;    CSRFSetCookie(RequestInterface $request)&#10;&#10;Description&#10;     CSRF Set Cookie&#10;&#10;Parameters:&#10;    RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request&#10;&#10;Return:&#10;   |false;;d1,276;;b1,0;;m0;;eRequestInterface|\CodeIgniter\HTTP\IncomingRequest $request;;p">
</treenode>
<treenode node="CSRFSetHash;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Security\Security.php;f11;326;2;345;;;;vpos;;v;;astring;;r&#10;Definition&#10;    CSRFSetHash(): string&#10;&#10;Description&#10;     Sets the CSRF Hash and cookie.;;d1,327;;b2,0;;m0;;e">
</treenode>
<treenode node="CSRFVerify;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Security\Security.php;f8;212;2;262;;;;vpos;;v;;a;;r&#10;Definition&#10;    CSRFVerify(RequestInterface $request)&#10;&#10;Description&#10;     CSRF Verify&#10;&#10;Parameters:&#10;    RequestInterface $request;;d1,213;;b1,0;;m0;;eRequestInterface $request;;p">
</treenode>
<treenode node="getCSRFHash;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Security\Security.php;f8;301;2;304;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getCSRFHash(): string&#10;&#10;Description&#10;     Returns the current CSRF Hash.;;d1,302;;b1,0;;m0;;e">
</treenode>
<treenode node="getCSRFTokenName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Security\Security.php;f8;313;2;316;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getCSRFTokenName(): string&#10;&#10;Description&#10;     Returns the CSRF Token Name.;;d1,314;;b1,0;;m0;;e">
</treenode>
<treenode node="sanitizeFilename;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Security\Security.php;f8;365;2;385;;;;vpos;;v;;astring;;r&#10;Definition&#10;    sanitizeFilename(string $str, bool $relative_path = false): string&#10;&#10;Description&#10;     Sanitize Filename&#10;&#10;Parameters:&#10;    string $str - Input file name&#10;    boolean $relative_path - Whether to preserve paths;;d1,366;;b1,0;;m0;;estring $str;;pboolean $relative_path;;p">
</treenode>
</treenode>
<treenode node="SecurityException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Security\Exceptions\SecurityException.php;f0;5;1;11;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="forDisallowedAction;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Security\Exceptions\SecurityException.php;f15;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,5;;m0;;e">
</treenode>
</treenode>
<treenode node="Seed;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\Seed.php;f0;51;1;131;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class Seed extends BaseCommand&#10;&#10;Description&#10;     Runs the specified Seeder file to populate the database with some data.;;d0,52;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Database\Seed.php;f8;104;2;129;;;;vpos;;v;;a;;r&#10;Definition&#10;    run(array $params = [])&#10;&#10;Description&#10;     Passes to Seeder to populate the database.&#10;&#10;Parameters:&#10;    array $params;;d1,105;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="Seeder;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Database\Seeder.php;f0;47;1;230;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Seeder&#10;&#10;Description&#10;     Class Seeder;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Seeder.php;f8;100;2;126;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(BaseConfig $config, BaseConnection $db = null)&#10;&#10;Description&#10;     Seeder constructor.&#10;&#10;Parameters:&#10;    BaseConfig $config&#10;    BaseConnection $db;;d1,101;;b1,0;;m0;;eBaseConfig $config;;pBaseConnection $db;;p">
</treenode>
<treenode node="call;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Seeder.php;f8;137;2;181;;;;vpos;;v;;a;;r&#10;Definition&#10;    call(string $class)&#10;&#10;Description&#10;     Loads the specified seeder and runs it.&#10;&#10;Parameters:&#10;    string $class;;d1,138;;b1,0;;m0;;estring $class;;p">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Seeder.php;f8;225;2;227;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    run()&#10;&#10;Description&#10;     Run the database seeds. This is where the magic happens.;;d1,226;;b1,0;;m0;;e">
</treenode>
<treenode node="setPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Seeder.php;f8;192;2;197;;;;vpos;;v;;aSeeder;;r&#10;Definition&#10;    setPath(string $path)&#10;&#10;Description&#10;     Sets the location of the directory that seed files can be located in.&#10;&#10;Parameters:&#10;    string $path;;d1,193;;b1,0;;m0;;estring $path;;p">
</treenode>
<treenode node="setSilent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\Seeder.php;f8;208;2;213;;;;vpos;;v;;aSeeder;;r&#10;Definition&#10;    setSilent(bool $silent)&#10;&#10;Description&#10;     Sets the silent treatment.&#10;&#10;Parameters:&#10;    boolean $silent;;d1,209;;b1,0;;m0;;eboolean $silent;;p">
</treenode>
</treenode>
<treenode node="SerializePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SerializePlugin.php;f0;30;1;107;;;;vpos;;v;;aPlugin;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SerializePlugin.php;f11;54;5;57;;;;vpos;;v;;a;;r;;d4,55;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SerializePlugin.php;f11;49;5;52;;;;vpos;;v;;a;;r;;d4,50;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SerializePlugin.php;f11;59;5;106;;;;vpos;;v;;a;;r;;d4,60;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="Serve;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Server\Serve.php;f0;52;1;167;;;;vpos;;v;;aBaseCommand;;c;;r&#10;Definition&#10;    class Serve extends BaseCommand&#10;&#10;Description&#10;     Launch the PHP development server;;d0,53;;b0,0;;m0;;e">
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Commands\Server\Serve.php;f8;128;2;165;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    run(array $params)&#10;&#10;Description&#10;     Run the server&#10;&#10;Parameters:&#10;    array $params - Parameters;;d1,129;;b1,0;;m0;;earray $params;;p">
</treenode>
</treenode>
<treenode node="Services;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f0;98;1;943;;O:\xampp\htdocs\2020\blog-4\app\Config\Services.php;f0;17;1;29;;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Config\Services.php;f0;15;1;112;;;;vpos;;v;;aBaseService;;c;;r;;d0,16;;b0,0;;m0;;e">
<treenode node="activator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Config\Services.php;f15;79;2;90;;;;vpos;;v;;aActivatorInterface;;r&#10;Definition&#10;    activator(Auth $config = null, bool $getShared = true): ActivatorInterface&#10;&#10;Description&#10;     Returns an instance of the Activator.&#10;&#10;Parameters:&#10;    Auth|null $config&#10;    bool $getShared;;d1,80;;b1,5;;m0;;eAuth|null $config;;pbool $getShared;;p">
</treenode>
<treenode node="authentication;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Config\Services.php;f15;17;2;35;;;;vpos;;v;;a;;r;;d1,18;;b1,5;;m0;;elib;;puserModel;;ploginModel;;pgetShared;;p">
</treenode>
<treenode node="authorization;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Config\Services.php;f15;37;2;51;;;;vpos;;v;;a;;r;;d1,38;;b1,5;;m0;;egroupModel;;ppermissionModel;;puserModel;;pgetShared;;p">
</treenode>
<treenode node="cache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;110;2;123;;;;vpos;;v;;a;;r&#10;Definition&#10;    cache(Cache $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The cache class provides a simple way to store and retrieve complex data for later.&#10;&#10;Parameters:&#10;    \Config\Cache $config&#10;    boolean $getShared;;d1,111;;b1,5;;m0;;e\Config\Cache $config;;pboolean $getShared;;p">
</treenode>
<treenode node="clirequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;136;2;149;;;;vpos;;v;;a;;r&#10;Definition&#10;    clirequest(App $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The CLI Request class provides for ways to interact with a command line request.&#10;&#10;Parameters:&#10;    \Config\App $config&#10;    boolean $getShared;;d1,137;;b1,5;;m0;;e\Config\App $config;;pboolean $getShared;;p">
</treenode>
<treenode node="commands;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;160;2;168;;;;vpos;;v;;a;;r&#10;Definition&#10;    commands(bool $getShared = true)&#10;&#10;Description&#10;     The commands utility for running and working with CLI commands.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,161;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
<treenode node="curlrequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;181;2;204;;;;vpos;;v;;a;;r&#10;Definition&#10;    curlrequest(array $options = [], ResponseInterface $response = null, App $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The CURL Request class acts as a simple HTTP client for interacting with other servers, typically through APIs.&#10;&#10;Parameters:&#10;    array $options&#10;    \CodeIgniter\HTTP\ResponseInterface $response&#10;    \Config\App $config&#10;    boolean $getShared;;d1,182;;b1,5;;m0;;earray $options;;p\CodeIgniter\HTTP\ResponseInterface $response;;p\Config\App $config;;pboolean $getShared;;p">
</treenode>
<treenode node="email;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;216;2;227;;;;vpos;;v;;a;;r&#10;Definition&#10;    email($config = null, bool $getShared = true)&#10;&#10;Description&#10;     The Email class allows you to send email via mail, sendmail, SMTP.&#10;&#10;Parameters:&#10;    null $config&#10;    boolean $getShared;;d1,217;;b1,5;;m0;;enull $config;;pboolean $getShared;;p">
</treenode>
<treenode node="encrypter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;237;2;251;;;;vpos;;v;;aEncrypterInterface;;r&#10;Definition&#10;    encrypter($config = null, $getShared = false)&#10;&#10;Description&#10;     The Encryption class provides two-way encryption.&#10;&#10;Parameters:&#10;    mixed $config&#10;    boolean $getShared&#10;&#10;Return:&#10;   Encryption handler;;d1,238;;b1,5;;m0;;emixed $config;;pboolean $getShared;;p">
</treenode>
<treenode node="exceptions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;269;2;297;;;;vpos;;v;;a;;r&#10;Definition&#10;    exceptions(&#10;  \Config\Exceptions $config = null,&#10;  IncomingRequest $request = null,&#10;  Response $response = null,&#10;  bool $getShared = true&#10; )&#10;&#10;Description&#10;     The Exceptions class holds the methods that handle:&#10;&#10;Parameters:&#10;    \Config\Exceptions $config&#10;    \CodeIgniter\HTTP\IncomingRequest $request&#10;    \CodeIgniter\HTTP\Response $response&#10;    boolean $getShared;;d1,275;;b1,5;;m0;;e\Config\Exceptions $config;;p\CodeIgniter\HTTP\IncomingRequest $request;;p\CodeIgniter\HTTP\Response $response;;pboolean $getShared;;p">
</treenode>
<treenode node="filters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;312;2;325;;;;vpos;;v;;a;;r&#10;Definition&#10;    filters($config = null, bool $getShared = true)&#10;&#10;Description&#10;     Filters allow you to run tasks before and/or after a controller is executed. During before filters, the request can be modified, and actions taken based on the request, while after filters can act on or modify the response itself before it is sent to the client.&#10;&#10;Parameters:&#10;    mixed $config&#10;    boolean $getShared;;d1,313;;b1,5;;m0;;emixed $config;;pboolean $getShared;;p">
</treenode>
<treenode node="honeypot;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;338;2;351;;;;vpos;;v;;a;;r&#10;Definition&#10;    honeypot(BaseConfig $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The Honeypot provides a secret input on forms that bots should NOT fill in, providing an additional safeguard when accepting user input.&#10;&#10;Parameters:&#10;    \CodeIgniter\Config\BaseConfig|null $config&#10;    boolean $getShared;;d1,339;;b1,5;;m0;;e\CodeIgniter\Config\BaseConfig|null $config;;pboolean $getShared;;p">
</treenode>
<treenode node="image;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;365;2;382;;;;vpos;;v;;a;;r&#10;Definition&#10;    image(string $handler = null, $config = null, bool $getShared = true)&#10;&#10;Description&#10;     Acts as a factory for ImageHandler classes and returns an instance of the handler. Used like Services::image()-&gt;withFile($path)-&gt;rotate(90)-&gt;save();s&#10;&#10;Parameters:&#10;    string|null $handler&#10;    \Config\Images|null $config&#10;    boolean $getShared;;d1,366;;b1,5;;m0;;estring|null $handler;;p\Config\Images|null $config;;pboolean $getShared;;p">
</treenode>
<treenode node="iterator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;395;2;403;;;;vpos;;v;;a;;r&#10;Definition&#10;    iterator(bool $getShared = true)&#10;&#10;Description&#10;     The Iterator class provides a simple way of looping over a function and timing the results and memory usage. Used when debugging and optimizing applications.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,396;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
<treenode node="language;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;415;2;427;;;;vpos;;v;;a;;r&#10;Definition&#10;    language(string $locale = null, bool $getShared = true)&#10;&#10;Description&#10;     Responsible for loading the language string translations.&#10;&#10;Parameters:&#10;    string $locale&#10;    boolean $getShared;;d1,416;;b1,5;;m0;;estring $locale;;pboolean $getShared;;p">
</treenode>
<treenode node="logger;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;439;2;447;;;;vpos;;v;;a;;r&#10;Definition&#10;    logger(bool $getShared = true)&#10;&#10;Description&#10;     The Logger class is a PSR-3 compatible Logging class that supports multiple handlers that process the actual logging.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,440;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
<treenode node="migrations;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;460;2;470;;;;vpos;;v;;a;;r&#10;Definition&#10;    migrations(BaseConfig $config = null, ConnectionInterface $db = null, bool $getShared = true)&#10;&#10;Description&#10;     Return the appropriate Migration runner.&#10;&#10;Parameters:&#10;    \CodeIgniter\Config\BaseConfig $config&#10;    \CodeIgniter\Database\ConnectionInterface $db&#10;    boolean $getShared;;d1,461;;b1,5;;m0;;e\CodeIgniter\Config\BaseConfig $config;;p\CodeIgniter\Database\ConnectionInterface $db;;pboolean $getShared;;p">
</treenode>
<treenode node="negotiator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;484;2;497;;;;vpos;;v;;a;;r&#10;Definition&#10;    negotiator(RequestInterface $request = null, bool $getShared = true)&#10;&#10;Description&#10;     The Negotiate class provides the content negotiation features for working the request to determine correct language, encoding, charset, and more.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    boolean $getShared;;d1,485;;b1,5;;m0;;e\CodeIgniter\HTTP\RequestInterface $request;;pboolean $getShared;;p">
</treenode>
<treenode node="pager;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;510;2;528;;;;vpos;;v;;a;;r&#10;Definition&#10;    pager($config = null, RendererInterface $view = null, bool $getShared = true)&#10;&#10;Description&#10;     Return the appropriate pagination handler.&#10;&#10;Parameters:&#10;    mixed $config&#10;    \CodeIgniter\View\RendererInterface $view&#10;    boolean $getShared;;d1,511;;b1,5;;m0;;emixed $config;;p\CodeIgniter\View\RendererInterface $view;;pboolean $getShared;;p">
</treenode>
<treenode node="parser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;541;2;560;;;;vpos;;v;;a;;r&#10;Definition&#10;    parser(string $viewPath = null, $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The Parser is a simple template parser.&#10;&#10;Parameters:&#10;    string $viewPath&#10;    mixed $config&#10;    boolean $getShared;;d1,542;;b1,5;;m0;;estring $viewPath;;pmixed $config;;pboolean $getShared;;p">
</treenode>
<treenode node="passwords;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Config\Services.php;f15;61;2;69;;;;vpos;;v;;aValidatorInterface;;r&#10;Definition&#10;    passwords(Auth $config = null, bool $getShared = true): PasswordValidator&#10;&#10;Description&#10;     Returns an instance of the PasswordValidator.&#10;&#10;Parameters:&#10;    Auth|null $config&#10;    bool $getShared;;d1,62;;b1,5;;m0;;eAuth|null $config;;pbool $getShared;;p">
</treenode>
<treenode node="redirectResponse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;662;2;679;;;;vpos;;v;;a;;r&#10;Definition&#10;    redirectResponse(App $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The Redirect class provides nice way of working with redirects.&#10;&#10;Parameters:&#10;    \Config\App $config&#10;    boolean $getShared;;d1,663;;b1,5;;m0;;e\Config\App $config;;pboolean $getShared;;p">
</treenode>
<treenode node="renderer;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;575;2;595;;;;vpos;;v;;a;;r&#10;Definition&#10;    renderer(string $viewPath = null, $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The Renderer class is the class that actually displays a file to the user. The default View class within CodeIgniter is intentionally simple, but this service could easily be replaced by a template engine if the user needed to.&#10;&#10;Parameters:&#10;    string $viewPath&#10;    mixed $config&#10;    boolean $getShared;;d1,576;;b1,5;;m0;;estring $viewPath;;pmixed $config;;pboolean $getShared;;p">
</treenode>
<treenode node="request;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;607;2;625;;;;vpos;;v;;a;;r&#10;Definition&#10;    request(App $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The Request class models an HTTP request.&#10;&#10;Parameters:&#10;    \Config\App $config&#10;    boolean $getShared;;d1,608;;b1,5;;m0;;e\Config\App $config;;pboolean $getShared;;p">
</treenode>
<treenode node="resetter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Config\Services.php;f15;100;2;111;;;;vpos;;v;;aResetterInterface;;r&#10;Definition&#10;    resetter(Auth $config = null, bool $getShared = true): ResetterInterface&#10;&#10;Description&#10;     Returns an instance of the Resetter.&#10;&#10;Parameters:&#10;    Auth|null $config&#10;    bool $getShared;;d1,101;;b1,5;;m0;;eAuth|null $config;;pbool $getShared;;p">
</treenode>
<treenode node="response;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;637;2;650;;;;vpos;;v;;a;;r&#10;Definition&#10;    response(App $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The Response class models an HTTP response.&#10;&#10;Parameters:&#10;    \Config\App $config&#10;    boolean $getShared;;d1,638;;b1,5;;m0;;e\Config\App $config;;pboolean $getShared;;p">
</treenode>
<treenode node="router;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;713;2;726;;;;vpos;;v;;a;;r&#10;Definition&#10;    router(RouteCollectionInterface $routes = null, Request $request = null, bool $getShared = true)&#10;&#10;Description&#10;     The Router class uses a RouteCollection&apos;s array of routes, and determines the correct Controller and Method to execute.&#10;&#10;Parameters:&#10;    \CodeIgniter\Router\RouteCollectionInterface $routes&#10;    \CodeIgniter\HTTP\Request $request&#10;    boolean $getShared;;d1,714;;b1,5;;m0;;e\CodeIgniter\Router\RouteCollectionInterface $routes;;p\CodeIgniter\HTTP\Request $request;;pboolean $getShared;;p">
</treenode>
<treenode node="routes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;691;2;699;;;;vpos;;v;;a;;r&#10;Definition&#10;    routes(bool $getShared = true)&#10;&#10;Description&#10;     The Routes service is a class that allows for easily building a collection of routes.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,692;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
<treenode node="security;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;739;2;752;;;;vpos;;v;;a;;r&#10;Definition&#10;    security(App $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The Security class provides a few handy tools for keeping the site secure, most notably the CSRF protection tools.&#10;&#10;Parameters:&#10;    \Config\App $config&#10;    boolean $getShared;;d1,740;;b1,5;;m0;;e\Config\App $config;;pboolean $getShared;;p">
</treenode>
<treenode node="session;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;764;2;791;;;;vpos;;v;;a;;r&#10;Definition&#10;    session(App $config = null, bool $getShared = true)&#10;&#10;Description&#10;     Return the session manager.&#10;&#10;Parameters:&#10;    \Config\App $config&#10;    boolean $getShared;;d1,765;;b1,5;;m0;;e\Config\App $config;;pboolean $getShared;;p">
</treenode>
<treenode node="throttler;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;803;2;811;;;;vpos;;v;;a;;r&#10;Definition&#10;    throttler(bool $getShared = true)&#10;&#10;Description&#10;     The Throttler class provides a simple method for implementing rate limiting in your applications.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,804;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
<treenode node="timer;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;823;2;831;;;;vpos;;v;;a;;r&#10;Definition&#10;    timer(bool $getShared = true)&#10;&#10;Description&#10;     The Timer class provides a simple way to Benchmark portions of your application.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,824;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
<treenode node="toolbar;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;843;2;856;;;;vpos;;v;;a;;r&#10;Definition&#10;    toolbar(\Config\Toolbar $config = null, bool $getShared = true)&#10;&#10;Description&#10;     Return the debug toolbar.&#10;&#10;Parameters:&#10;    \Config\Toolbar $config&#10;    boolean $getShared;;d1,844;;b1,5;;m0;;e\Config\Toolbar $config;;pboolean $getShared;;p">
</treenode>
<treenode node="typography;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;932;2;940;;;;vpos;;v;;a;;r&#10;Definition&#10;    typography(bool $getShared = true)&#10;&#10;Description&#10;     The Typography class provides a way to format text in semantically relevant ways.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,933;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
<treenode node="uri;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;868;2;876;;;;vpos;;v;;a;;r&#10;Definition&#10;    uri(string $uri = null, bool $getShared = true)&#10;&#10;Description&#10;     The URI class provides a way to model and manipulate URIs.&#10;&#10;Parameters:&#10;    string $uri&#10;    boolean $getShared;;d1,869;;b1,5;;m0;;estring $uri;;pboolean $getShared;;p">
</treenode>
<treenode node="validation;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;888;2;901;;;;vpos;;v;;a;;r&#10;Definition&#10;    validation(\Config\Validation $config = null, bool $getShared = true)&#10;&#10;Description&#10;     The Validation class provides tools for validating input data.&#10;&#10;Parameters:&#10;    \Config\Validation $config&#10;    boolean $getShared;;d1,889;;b1,5;;m0;;e\Config\Validation $config;;pboolean $getShared;;p">
</treenode>
<treenode node="viewcell;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Config\Services.php;f15;913;2;921;;;;vpos;;v;;a;;r&#10;Definition&#10;    viewcell(bool $getShared = true)&#10;&#10;Description&#10;     View cells are intended to let you insert HTML into view that has been generated by any callable in the system.&#10;&#10;Parameters:&#10;    boolean $getShared;;d1,914;;b1,5;;m0;;eboolean $getShared;;p">
</treenode>
</treenode>
<treenode node="Session;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f0;48;1;1022;;;;vpos;;v;;aSessionInterface;;cLoggerAwareTrait;;c;;r&#10;Definition&#10;    class Session implements SessionInterface&#10;&#10;Description&#10;     Implementation of CodeIgniter session container.;;d0,49;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;171;2;188;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(\SessionHandlerInterface $driver, $config)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \SessionHandlerInterface $driver&#10;    \Config\App $config;;d1,172;;b1,0;;m0;;e\SessionHandlerInterface $driver;;p\Config\App $config;;p">
</treenode>
<treenode node="__get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;614;2;628;;;;vpos;;v;;anull;;r&#10;Definition&#10;    __get(string $key)&#10;&#10;Description&#10;     Magic method to get session variables by simply calling $foo = $session-&gt;foo;s&#10;&#10;Parameters:&#10;    string $key - Identifier of the session property to remove&#10;&#10;Return:&#10;   |string;;d1,615;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="__isset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;641;2;644;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    __isset(string $key): bool&#10;&#10;Description&#10;     Magic method to check for session variables. Different from has() in that it will validate &apos;session_id&apos; as well. Mostly used by internal PHP functions, users should stick to has()&#10;&#10;Parameters:&#10;    string $key - Identifier of the session property to remove;;d1,642;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="__set;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;599;2;602;;;;vpos;;v;;a;;r&#10;Definition&#10;    __set(string $key, $value)&#10;&#10;Description&#10;     Magic method to set variables in the session by simply calling $session-&gt;foo = bar;s&#10;&#10;Parameters:&#10;    string $key - Identifier of the session property to set&#10;    string|array $value;;d1,600;;b1,0;;m0;;estring $key;;pstring|array $value;;p">
</treenode>
<treenode node="configure;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f11;294;2;331;;;;vpos;;v;;a;;r&#10;Definition&#10;    configure()&#10;&#10;Description&#10;     Configuration.;;d1,295;;b2,0;;m0;;e">
</treenode>
<treenode node="configureSidLength;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f11;350;2;381;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    configureSidLength()&#10;&#10;Description&#10;     Configure session ID length;;d1,351;;b2,0;;m0;;e">
</treenode>
<treenode node="destroy;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;441;2;444;;;;vpos;;v;;a;;r&#10;Definition&#10;    destroy()&#10;&#10;Description&#10;     Destroys the current session.;;d1,442;;b1,0;;m0;;e">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;499;2;530;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    get(string $key = null)&#10;&#10;Description&#10;     Get user data that has been set in the session.&#10;&#10;Parameters:&#10;    string $key - Identifier of the session property to retrieve&#10;&#10;Return:&#10;   |null The property value(s);;d1,500;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;679;2;698;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFlashdata(string $key = null)&#10;&#10;Description&#10;     Retrieve one or more items of flash data from the session.&#10;&#10;Parameters:&#10;    string $key - Property identifier&#10;&#10;Return:&#10;   |null The requested property value, or an associative array  of them;;d1,680;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getFlashKeys;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;787;2;801;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getFlashKeys(): array&#10;&#10;Description&#10;     Retrieve all of the keys for session data marked as flashdata.&#10;&#10;Return:&#10;   The property names of all flashdata;;d1,788;;b1,0;;m0;;e">
</treenode>
<treenode node="getTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;831;2;850;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getTempdata(string $key = null)&#10;&#10;Description&#10;     Returns either a single piece of tempdata, or all temp data currently in the session.&#10;&#10;Parameters:&#10;    string $key - Session data key&#10;&#10;Return:&#10;   Session data value or null if not found;;d1,832;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getTempKeys;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;962;2;976;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getTempKeys(): array&#10;&#10;Description&#10;     Retrieve the keys of all session data that have been marked as temporary data.;;d1,963;;b1,0;;m0;;e">
</treenode>
<treenode node="has;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;541;2;544;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    has(string $key): bool&#10;&#10;Description&#10;     Returns whether an index exists in the session array.&#10;&#10;Parameters:&#10;    string $key - Identifier of the session property we are interested in;;d1,542;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="initVars;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f11;391;2;418;;;;vpos;;v;;a;;r&#10;Definition&#10;    initVars()&#10;&#10;Description&#10;     Handle temporary variables;;d1,392;;b2,0;;m0;;e">
</treenode>
<treenode node="keepFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;707;2;710;;;;vpos;;v;;a;;r&#10;Definition&#10;    keepFlashdata($key)&#10;&#10;Description&#10;     Keeps a single piece of flash data alive for one more request.&#10;&#10;Parameters:&#10;    array|string $key - Property identifier or array of them;;d1,708;;b1,0;;m0;;earray|string $key;;p">
</treenode>
<treenode node="markAsFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;721;2;748;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    markAsFlashdata($key): bool&#10;&#10;Description&#10;     Mark a session property or properties as flashdata.&#10;&#10;Parameters:&#10;    array|string $key - Property identifier or array of them&#10;&#10;Return:&#10;   False if any of the properties are not already set;;d1,722;;b1,0;;m0;;earray|string $key;;p">
</treenode>
<treenode node="markAsTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;876;2;922;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    markAsTempdata($key, int $ttl = 300): bool&#10;&#10;Description&#10;     Mark one of more pieces of data as being temporary, meaning that it has a set lifespan within the session.&#10;&#10;Parameters:&#10;    string|array $key - Property identifier or array of them&#10;    integer $ttl - Time to live, in seconds&#10;&#10;Return:&#10;   False if any of the properties were not set;;d1,877;;b1,0;;m0;;estring|array $key;;pinteger $ttl;;p">
</treenode>
<treenode node="push;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;556;2;562;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    push(string $key, array $data)&#10;&#10;Description&#10;     Push new value onto session value that is array.&#10;&#10;Parameters:&#10;    string $key - Identifier of the session property we are interested in&#10;    array $data - value to be pushed to existing session key;;d1,557;;b1,0;;m0;;estring $key;;parray $data;;p">
</treenode>
<treenode node="regenerate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;430;2;434;;;;vpos;;v;;a;;r&#10;Definition&#10;    regenerate(bool $destroy = false)&#10;&#10;Description&#10;     Regenerates the session ID.&#10;&#10;Parameters:&#10;    boolean $destroy - Should old session data be destroyed?;;d1,431;;b1,0;;m0;;eboolean $destroy;;p">
</treenode>
<treenode node="remove;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;575;2;588;;;;vpos;;v;;a;;r&#10;Definition&#10;    remove($key)&#10;&#10;Description&#10;     Remove one or more session properties.&#10;&#10;Parameters:&#10;    string|array $key - Identifier of the session property or properties to remove;;d1,576;;b1,0;;m0;;estring|array $key;;p">
</treenode>
<treenode node="removeTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;859;2;863;;;;vpos;;v;;a;;r&#10;Definition&#10;    removeTempdata(string $key)&#10;&#10;Description&#10;     Removes a single piece of temporary data from the session.&#10;&#10;Parameters:&#10;    string $key - Session data key;;d1,860;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="set;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;463;2;483;;;;vpos;;v;;a;;r&#10;Definition&#10;    set($data, $value = null)&#10;&#10;Description&#10;     Sets user data into the session.&#10;&#10;Parameters:&#10;    string|array $data - Property name or associative array of properties&#10;    string|array $value - Property value if single key provided;;d1,464;;b1,0;;m0;;estring|array $data;;pstring|array $value;;p">
</treenode>
<treenode node="setCookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f11;1014;2;1019;;;;vpos;;v;;a;;r&#10;Definition&#10;    setCookie()&#10;&#10;Description&#10;     Takes care of setting the cookie on the client side. Extracted for testing reasons.;;d1,1015;;b2,0;;m0;;e">
</treenode>
<treenode node="setFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;663;2;667;;;;vpos;;v;;a;;r&#10;Definition&#10;    setFlashdata($data, $value = null)&#10;&#10;Description&#10;     Sets data into the session that will only last for a single request. Perfect for use with single-use status update messages.&#10;&#10;Parameters:&#10;    array|string $data - Property identifier or associative array of properties&#10;    string|array $value - Property value if $data is a scalar;;d1,664;;b1,0;;m0;;earray|string $data;;pstring|array $value;;p">
</treenode>
<treenode node="setSaveHandler;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f11;984;2;987;;;;vpos;;v;;a;;r&#10;Definition&#10;    setSaveHandler()&#10;&#10;Description&#10;     Sets the driver as the session handler in PHP. Extracted for easier testing.;;d1,985;;b2,0;;m0;;e">
</treenode>
<treenode node="setTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;816;2;820;;;;vpos;;v;;a;;r&#10;Definition&#10;    setTempdata($data, $value = null, int $ttl = 300)&#10;&#10;Description&#10;     Sets new data into the session, and marks it as temporary data with a set lifespan.&#10;&#10;Parameters:&#10;    string|array $data - Session data key or associative array of items&#10;    null $value - Value to store&#10;    integer $ttl - Time-to-live in seconds;;d1,817;;b1,0;;m0;;estring|array $data;;pnull $value;;pinteger $ttl;;p">
</treenode>
<treenode node="start;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;197;2;267;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    start()&#10;&#10;Description&#10;     Initialize the session container and starts up the session.;;d1,198;;b1,0;;m0;;e">
</treenode>
<treenode node="startSession;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f11;995;2;1006;;;;vpos;;v;;a;;r&#10;Definition&#10;    startSession()&#10;&#10;Description&#10;     Starts the session. Extracted for testing reasons.;;d1,996;;b2,0;;m0;;e">
</treenode>
<treenode node="stop;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;278;2;285;;;;vpos;;v;;a;;r&#10;Definition&#10;    stop()&#10;&#10;Description&#10;     Does a full stop of the session:;;d1,279;;b1,0;;m0;;e">
</treenode>
<treenode node="unmarkFlashdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;757;2;778;;;;vpos;;v;;a;;r&#10;Definition&#10;    unmarkFlashdata($key)&#10;&#10;Description&#10;     Unmark data in the session as flashdata.&#10;&#10;Parameters:&#10;    mixed $key - Property identifier or array of them;;d1,758;;b1,0;;m0;;emixed $key;;p">
</treenode>
<treenode node="unmarkTempdata;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Session.php;f8;932;2;953;;;;vpos;;v;;a;;r&#10;Definition&#10;    unmarkTempdata($key)&#10;&#10;Description&#10;     Unmarks temporary data in the session, effectively removing its lifespan and allowing it to live as long as the session does.&#10;&#10;Parameters:&#10;    string|array $key - Property identifier or array of them;;d1,933;;b1,0;;m0;;estring|array $key;;p">
</treenode>
</treenode>
<treenode node="SessionException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Session\Exceptions\SessionException.php;f0;5;1;31;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="forEmptySavepath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Exceptions\SessionException.php;f15;22;2;25;;;;vpos;;v;;a;;r;;d1,23;;b1,5;;m0;;e">
</treenode>
<treenode node="forInvalidSavePath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Exceptions\SessionException.php;f15;12;2;15;;;;vpos;;v;;a;;r;;d1,13;;b1,5;;m0;;epath;;p">
</treenode>
<treenode node="forInvalidSavePathFormat;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Exceptions\SessionException.php;f15;27;2;30;;;;vpos;;v;;a;;r;;d1,28;;b1,5;;m0;;epath;;p">
</treenode>
<treenode node="forMissingDatabaseTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Exceptions\SessionException.php;f15;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,5;;m0;;e">
</treenode>
<treenode node="forWriteProtectedSavePath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Session\Exceptions\SessionException.php;f15;17;2;20;;;;vpos;;v;;a;;r;;d1,18;;b1,5;;m0;;epath;;p">
</treenode>
</treenode>
<treenode node="SimpleXMLElementPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\SimpleXMLElementPlugin.php;f0;31;1;80;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SimpleXMLElementPlugin.php;f0;32;1;153;;;;vpos;;v;;aPlugin;;cObjectPluginInterface;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SimpleXMLElementPlugin.php;f11;46;5;49;;;;vpos;;v;;a;;r;;d4,47;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SimpleXMLElementPlugin.php;f11;41;5;44;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SimpleXMLElementPlugin.php;f11;51;5;152;;;;vpos;;v;;a;;r;;d4,52;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="renderObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\SimpleXMLElementPlugin.php;f11;33;5;79;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="SourcePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\SourcePlugin.php;f0;30;1;78;;;;vpos;;v;;aPlugin;;cTabPluginInterface;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="renderTab;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\SourcePlugin.php;f11;32;5;77;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;er;;p">
</treenode>
</treenode>
<treenode node="SourceRepresentation;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\SourceRepresentation.php;f0;27;1;71;;;;vpos;;v;;aRepresentation;;c;;r;;d0,28;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\SourceRepresentation.php;f11;35;5;48;;;;vpos;;v;;a;;r;;d4,36;;b1,0;;m0;;efilename;;pline;;ppadding;;p">
</treenode>
<treenode node="getSource;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\SourceRepresentation.php;f18;59;5;70;;;;vpos;;v;;anull;;r&#10;Definition&#10;    getSource($filename, $start_line = 1, $length = null)&#10;&#10;Description&#10;     Gets section of source code.&#10;&#10;Parameters:&#10;    string $filename - Full path to file&#10;    int $start_line - The first line to display (1 based)&#10;    null|int $length - Amount of lines to show&#10;&#10;Return:&#10;   |array;;d4,60;;b1,5;;m0;;estring $filename;;pint $start_line;;pnull|int $length;;p">
</treenode>
</treenode>
<treenode node="SplFileInfoPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SplFileInfoPlugin.php;f0;32;1;54;;;;vpos;;v;;aPlugin;;c;;r;;d0,33;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SplFileInfoPlugin.php;f11;39;5;42;;;;vpos;;v;;a;;r;;d4,40;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SplFileInfoPlugin.php;f11;34;5;37;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SplFileInfoPlugin.php;f11;44;5;53;;;;vpos;;v;;a;;r;;d4,45;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="SplFileInfoRepresentation;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\SplFileInfoRepresentation.php;f0;30;1;176;;;;vpos;;v;;aRepresentation;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\SplFileInfoRepresentation.php;f11;49;5;150;;;;vpos;;v;;a;;r;;d4,50;;b1,0;;m0;;efileInfo;;p">
</treenode>
<treenode node="getLabel;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\SplFileInfoRepresentation.php;f11;152;5;155;;;;vpos;;v;;a;;r;;d4,153;;b1,0;;m0;;e">
</treenode>
<treenode node="getMTime;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\SplFileInfoRepresentation.php;f11;166;5;175;;;;vpos;;v;;a;;r;;d4,167;;b1,0;;m0;;e">
</treenode>
<treenode node="getSize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\Representation\SplFileInfoRepresentation.php;f11;157;5;164;;;;vpos;;v;;a;;r;;d4,158;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="SplObjectStoragePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SplObjectStoragePlugin.php;f0;30;1;53;;;;vpos;;v;;aPlugin;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SplObjectStoragePlugin.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SplObjectStoragePlugin.php;f11;32;5;35;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\SplObjectStoragePlugin.php;f11;42;5;52;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="StreamObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\StreamObject.php;f0;29;1;53;;;;vpos;;v;;aResourceObject;;c;;r;;d0,30;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\StreamObject.php;f11;33;5;37;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;emeta;;p">
</treenode>
<treenode node="getValueShort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\StreamObject.php;f11;39;5;52;;;;vpos;;v;;a;;r;;d4,40;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="StreamPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\StreamPlugin.php;f0;32;1;77;;;;vpos;;v;;aPlugin;;c;;r;;d0,33;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\StreamPlugin.php;f11;39;5;42;;;;vpos;;v;;a;;r;;d4,40;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\StreamPlugin.php;f11;34;5;37;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\StreamPlugin.php;f11;44;5;76;;;;vpos;;v;;a;;r;;d4,45;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="Table;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f0;53;1;579;;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f0;53;1;439;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Table&#10;&#10;Description&#10;     HTML Table Generating Class;;d0,54;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;125;2;132;;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f8;110;2;114;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    __construct($config = [])&#10;&#10;Description&#10;     Set the template from the table config file if it exists&#10;&#10;Parameters:&#10;    array $config - (default: array());;d1,126;;b1,0;;m0;;earray $config;;p">
</treenode>
<treenode node="_compileTemplate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f11;523;2;539;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    _compileTemplate()&#10;&#10;Description&#10;     Compile Template;;d1,524;;b2,0;;m0;;e">
</treenode>
<treenode node="_defaultTemplate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f11;548;2;576;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    _defaultTemplate()&#10;&#10;Description&#10;     Default Template;;d1,549;;b2,0;;m0;;e">
</treenode>
<treenode node="_prepArgs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f11;270;2;286;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    _prepArgs($args)&#10;&#10;Description&#10;     Prep Args&#10;&#10;Parameters:&#10;    array;;d1,271;;b2,0;;m0;;earray;;p">
</treenode>
<treenode node="_setFromArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f11;503;2;514;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    _setFromArray($data)&#10;&#10;Description&#10;     Set table data from an array&#10;&#10;Parameters:&#10;    array $data;;d1,504;;b2,0;;m0;;earray $data;;p">
</treenode>
<treenode node="_setFromDBResult;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f11;481;2;493;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    _setFromDBResult($object)&#10;&#10;Description&#10;     Set table data from a database result object&#10;&#10;Parameters:&#10;    BaseResult $object - Database result object;;d1,482;;b2,0;;m0;;eBaseResult $object;;p">
</treenode>
<treenode node="addRow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;254;2;258;;;;vpos;;v;;aTable;;r&#10;Definition&#10;    addRow()&#10;&#10;Description&#10;     Add a table row;;d1,255;;b1,0;;m0;;e">
</treenode>
<treenode node="clear;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;463;2;471;;;;vpos;;v;;aTable;;r&#10;Definition&#10;    clear()&#10;&#10;Description&#10;     Clears the table arrays.  Useful if multiple tables are being generated;;d1,464;;b1,0;;m0;;e">
</treenode>
<treenode node="copyData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f11;325;2;349;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    copyData()&#10;&#10;Description&#10;     Copies data from our old table to the new one, taking care map data correctly based on any columns that have been renamed.;;d1,326;;b2,0;;m0;;e">
</treenode>
<treenode node="createTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f11;273;2;316;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    createTable()&#10;&#10;Description&#10;     Creates the new table based on our current fields.;;d1,274;;b2,0;;m0;;e">
</treenode>
<treenode node="dropColumn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f8;193;2;212;;;;vpos;;v;;a;;r&#10;Definition&#10;    dropColumn($columns)&#10;&#10;Description&#10;     Drops columns from the table.&#10;&#10;Parameters:&#10;    string|array $columns;;d1,194;;b1,0;;m0;;estring|array $columns;;p">
</treenode>
<treenode node="dropForeignKey;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f8;242;2;266;;;;vpos;;v;;a;;r&#10;Definition&#10;    dropForeignKey(string $column)&#10;&#10;Description&#10;     Drops a foreign key from this table so that it won&apos;t be recreated in the future.&#10;&#10;Parameters:&#10;    string $column;;d1,243;;b1,0;;m0;;estring $column;;p">
</treenode>
<treenode node="dropIndexes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f11;422;2;438;;;;vpos;;v;;anull;;r&#10;Definition&#10;    dropIndexes()&#10;&#10;Description&#10;     Attempts to drop all indexes and constraints from the database for this table.&#10;&#10;Return:&#10;   |void;;d1,423;;b2,0;;m0;;e">
</treenode>
<treenode node="formatFields;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f11;359;2;386;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    formatFields($fields)&#10;&#10;Description&#10;     Converts fields retrieved from the database to the format needed for creating fields with Forge.&#10;&#10;Parameters:&#10;    array|boolean $fields;;d1,360;;b2,0;;m0;;earray|boolean $fields;;p">
</treenode>
<treenode node="formatKeys;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f11;396;2;414;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    formatKeys($keys)&#10;&#10;Description&#10;     Converts keys retrieved from the database to the format needed to create later.&#10;&#10;Parameters:&#10;    mixed $keys;;d1,397;;b2,0;;m0;;emixed $keys;;p">
</treenode>
<treenode node="fromTable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f8;125;2;154;;;;vpos;;v;;a;;r&#10;Definition&#10;    fromTable(string $table)&#10;&#10;Description&#10;     Reads an existing database table and collects all of the information needed to recreate this table.&#10;&#10;Parameters:&#10;    string $table;;d1,126;;b1,0;;m0;;estring $table;;p">
</treenode>
<treenode node="generate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;310;2;454;;;;vpos;;v;;astring;;r&#10;Definition&#10;    generate($tableData = null)&#10;&#10;Description&#10;     Generate the table&#10;&#10;Parameters:&#10;    mixed $tableData;;d1,311;;b1,0;;m0;;emixed $tableData;;p">
</treenode>
<treenode node="makeColumns;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;193;2;227;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    makeColumns($array = [], $columnLimit = 0)&#10;&#10;Description&#10;     Set columns. Takes a one-dimensional array as input and creates a multi-dimensional array with a depth equal to the number of columns. This allows a single array with many elements to be displayed in a table that has a fixed column count.&#10;&#10;Parameters:&#10;    array $array&#10;    integer $columnLimit;;d1,194;;b1,0;;m0;;earray $array;;pinteger $columnLimit;;p">
</treenode>
<treenode node="modifyColumn;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f8;222;2;232;;;;vpos;;v;;a;;r&#10;Definition&#10;    modifyColumn(array $field)&#10;&#10;Description&#10;     Modifies a field, including changing data type, renaming, etc.&#10;&#10;Parameters:&#10;    array $field;;d1,223;;b1,0;;m0;;earray $field;;p">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Table.php;f8;163;2;184;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    run(): bool&#10;&#10;Description&#10;     Called after `fromTable` and any actions, like `dropColumn`, etc, to finalize the action. It creates a temp table, creates the new table with modifications, and copies the data over to the new table.;;d1,164;;b1,0;;m0;;e">
</treenode>
<treenode node="setCaption;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;296;2;300;;;;vpos;;v;;aTable;;r&#10;Definition&#10;    setCaption($caption)&#10;&#10;Description&#10;     Add a table caption&#10;&#10;Parameters:&#10;    string $caption;;d1,297;;b1,0;;m0;;estring $caption;;p">
</treenode>
<treenode node="setEmpty;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;239;2;243;;;;vpos;;v;;aTable;;r&#10;Definition&#10;    setEmpty($value)&#10;&#10;Description&#10;     Set &quot;empty&quot; cells&#10;&#10;Parameters:&#10;    mixed $value;;d1,240;;b1,0;;m0;;emixed $value;;p">
</treenode>
<treenode node="setFooting;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;175;2;179;;;;vpos;;v;;aTable;;r&#10;Definition&#10;    setFooting()&#10;&#10;Description&#10;     Set the table footing;;d1,176;;b1,0;;m0;;e">
</treenode>
<treenode node="setHeading;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;162;2;166;;;;vpos;;v;;aTable;;r&#10;Definition&#10;    setHeading()&#10;&#10;Description&#10;     Set the table heading;;d1,163;;b1,0;;m0;;e">
</treenode>
<treenode node="setTemplate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Table.php;f8;142;2;151;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    setTemplate($template)&#10;&#10;Description&#10;     Set the template&#10;&#10;Parameters:&#10;    array $template;;d1,143;;b1,0;;m0;;earray $template;;p">
</treenode>
</treenode>
<treenode node="TablePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\TablePlugin.php;f0;31;1;132;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TablePlugin.php;f0;30;1;86;;;;vpos;;v;;aPlugin;;cTabPluginInterface;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TablePlugin.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TablePlugin.php;f11;32;5;35;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TablePlugin.php;f11;42;5;85;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="renderTab;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\TablePlugin.php;f11;35;5;131;;;;vpos;;v;;a;;r;;d4,36;;b1,0;;m0;;er;;p">
</treenode>
</treenode>
<treenode node="TestLogger;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Test\TestLogger.php;f0;4;1;81;;;;vpos;;v;;aLogger;;c;;r;;d0,5;;b0,0;;m0;;e">
<treenode node="cleanup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\TestLogger.php;f8;76;2;79;;;;vpos;;v;;a;;r;;d1,77;;b1,0;;m0;;efile;;p">
</treenode>
<treenode node="didLog;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\TestLogger.php;f15;61;2;72;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    didLog(string $level, $message)&#10;&#10;Description&#10;     Used by CIUnitTestCase class to provide -&gt;assertLogged() methods.&#10;&#10;Parameters:&#10;    string $level&#10;    string $message;;d1,62;;b1,5;;m0;;estring $level;;pstring $message;;p">
</treenode>
<treenode node="log;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\TestLogger.php;f8;21;2;49;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    log($level, $message, array $context = []): bool&#10;&#10;Description&#10;     The log method is overridden so that we can store log history during the tests to allow us to check -&gt;assertLogged() methods.&#10;&#10;Parameters:&#10;    string $level&#10;    string $message&#10;    array $context;;d1,22;;b1,0;;m0;;estring $level;;pstring $message;;parray $context;;p">
</treenode>
</treenode>
<treenode node="TextRenderer;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f0;32;1;345;;;;vpos;;v;;aRenderer;;c;;r;;d0,33;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;98;5;102;;;;vpos;;v;;a;;r;;d4,99;;b1,0;;m0;;e">
</treenode>
<treenode node="boxText;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;135;5;149;;;;vpos;;v;;a;;r;;d4,136;;b1,0;;m0;;etext;;pwidth;;p">
</treenode>
<treenode node="calledFrom;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f14;300;5;331;;;;vpos;;v;;a;;r;;d4,301;;b2,0;;m0;;e">
</treenode>
<treenode node="colorTitle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;250;5;253;;;;vpos;;v;;a;;r;;d4,251;;b1,0;;m0;;estring;;p">
</treenode>
<treenode node="colorType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;245;5;248;;;;vpos;;v;;a;;r;;d4,246;;b1,0;;m0;;estring;;p">
</treenode>
<treenode node="colorValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;240;5;243;;;;vpos;;v;;a;;r;;d4,241;;b1,0;;m0;;estring;;p">
</treenode>
<treenode node="escape;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;295;5;298;;;;vpos;;v;;a;;r;;d4,296;;b1,0;;m0;;estring;;pencoding;;p">
</treenode>
<treenode node="filterParserPlugins;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;274;5;288;;;;vpos;;v;;a;;r;;d4,275;;b1,0;;m0;;eplugins;;p">
</treenode>
<treenode node="getPlugin;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f14;333;5;344;;;;vpos;;v;;a;;r;;d4,334;;b2,0;;m0;;eplugins;;phints;;p">
</treenode>
<treenode node="ideLink;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;290;5;293;;;;vpos;;v;;a;;r;;d4,291;;b1,0;;m0;;efile;;pline;;p">
</treenode>
<treenode node="postRender;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;255;5;272;;;;vpos;;v;;a;;r;;d4,256;;b1,0;;m0;;e">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;104;5;122;;;;vpos;;v;;a;;r;;d4,105;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderChildren;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;202;5;238;;;;vpos;;v;;a;;r;;d4,203;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderHeader;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;162;5;200;;;;vpos;;v;;a;;r;;d4,163;;b1,0;;m0;;eo;;p">
</treenode>
<treenode node="renderNothing;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;124;5;133;;;;vpos;;v;;a;;r;;d4,125;;b1,0;;m0;;e">
</treenode>
<treenode node="renderTitle;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\TextRenderer.php;f11;151;5;160;;;;vpos;;v;;a;;r;;d4,152;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="Throttler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Throttle\Throttler.php;f0;57;1;211;;;;vpos;;v;;aThrottlerInterface;;c;;r&#10;Definition&#10;    class Throttler implements ThrottlerInterface&#10;&#10;Description&#10;     Class Throttler;;d0,58;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Throttle\Throttler.php;f8;97;2;100;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(CacheInterface $cache)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    type $cache;;d1,98;;b1,0;;m0;;etype $cache;;p">
</treenode>
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Throttle\Throttler.php;f8;136;2;182;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    check(string $key, int $capacity, int $seconds, int $cost = 1): bool&#10;&#10;Description&#10;     Restricts the number of requests made by a single IP address within a set number of seconds.&#10;&#10;Parameters:&#10;    string $key - The name to use as the &quot;bucket&quot; name&#10;    integer $capacity - The number of requests the &quot;bucket&quot; can hold&#10;    integer $seconds - The time it takes the &quot;bucket&quot; to completely refill&#10;    integer $cost - The number of tokens this action uses;;d1,137;;b1,0;;m0;;estring $key;;pinteger $capacity;;pinteger $seconds;;pinteger $cost;;p">
</treenode>
<treenode node="getTokenTime;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Throttle\Throttler.php;f8;110;2;113;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getTokenTime(): int&#10;&#10;Description&#10;     Returns the number of seconds until the next available token will be released for usage.;;d1,111;;b1,0;;m0;;e">
</treenode>
<treenode node="setTestTime;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Throttle\Throttler.php;f8;193;2;198;;;;vpos;;v;;a;;r&#10;Definition&#10;    setTestTime(int $time)&#10;&#10;Description&#10;     Used during testing to set the current timestamp to use.&#10;&#10;Parameters:&#10;    integer $time;;d1,194;;b1,0;;m0;;einteger $time;;p">
</treenode>
<treenode node="time;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Throttle\Throttler.php;f8;207;2;210;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    time(): int&#10;&#10;Description&#10;     Return the test time, defaulting to current.;;d1,208;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="ThrowableObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ThrowableObject.php;f0;31;1;53;;;;vpos;;v;;aInstanceObject;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ThrowableObject.php;f11;36;5;45;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;ethrow;;p">
</treenode>
<treenode node="getValueShort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\ThrowableObject.php;f11;47;5;52;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="ThrowablePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ThrowablePlugin.php;f0;33;1;59;;;;vpos;;v;;aPlugin;;c;;r;;d0,34;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ThrowablePlugin.php;f11;40;5;43;;;;vpos;;v;;a;;r;;d4,41;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ThrowablePlugin.php;f11;35;5;38;;;;vpos;;v;;a;;r;;d4,36;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ThrowablePlugin.php;f11;45;5;58;;;;vpos;;v;;a;;r;;d4,46;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="Time;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f0;59;1;1364;;;;vpos;;v;;aDateTime;;c;;r&#10;Definition&#10;    class Time extends DateTime&#10;&#10;Description&#10;     Class Time;;d0,60;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;104;2;138;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(string $time = null, $timezone = null, string $locale = null)&#10;&#10;Description&#10;     Time constructor.&#10;&#10;Parameters:&#10;    string|null $time&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,105;;b1,0;;m0;;estring|null $time;;p\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="__get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1336;2;1346;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __get($name)&#10;&#10;Description&#10;     Allow for property-type access to any getX method...&#10;&#10;Parameters:&#10;    string $name;;d1,1337;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="__isset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1357;2;1362;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    __isset($name): bool&#10;&#10;Description&#10;     Allow for property-type checking to any getX method...&#10;&#10;Parameters:&#10;    string $name;;d1,1358;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="__toString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1317;2;1320;;;;vpos;;v;;astring;;r&#10;Definition&#10;    __toString(): string&#10;&#10;Description&#10;     Outputs a short format version of the datetime.;;d1,1318;;b1,0;;m0;;e">
</treenode>
<treenode node="addDays;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;856;2;861;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    addDays(int $days)&#10;&#10;Description&#10;     Returns a new Time instance with $days added to the time.&#10;&#10;Parameters:&#10;    integer $days;;d1,857;;b1,0;;m0;;einteger $days;;p">
</treenode>
<treenode node="addHours;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;842;2;847;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    addHours(int $hours)&#10;&#10;Description&#10;     Returns a new Time instance with $hours added to the time.&#10;&#10;Parameters:&#10;    integer $hours;;d1,843;;b1,0;;m0;;einteger $hours;;p">
</treenode>
<treenode node="addMinutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;828;2;833;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    addMinutes(int $minutes)&#10;&#10;Description&#10;     Returns a new Time instance with $minutes added to the time.&#10;&#10;Parameters:&#10;    integer $minutes;;d1,829;;b1,0;;m0;;einteger $minutes;;p">
</treenode>
<treenode node="addMonths;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;870;2;875;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    addMonths(int $months)&#10;&#10;Description&#10;     Returns a new Time instance with $months added to the time.&#10;&#10;Parameters:&#10;    integer $months;;d1,871;;b1,0;;m0;;einteger $months;;p">
</treenode>
<treenode node="addSeconds;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;814;2;819;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    addSeconds(int $seconds)&#10;&#10;Description&#10;     Returns a new Time instance with $seconds added to the time.&#10;&#10;Parameters:&#10;    integer $seconds;;d1,815;;b1,0;;m0;;einteger $seconds;;p">
</treenode>
<treenode node="addYears;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;884;2;889;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    addYears(int $years)&#10;&#10;Description&#10;     Returns a new Time instance with $years added to the time.&#10;&#10;Parameters:&#10;    integer $years;;d1,885;;b1,0;;m0;;einteger $years;;p">
</treenode>
<treenode node="create;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;280;2;290;;;;vpos;;v;;a;;r&#10;Definition&#10;    create(int $year = null, int $month = null, int $day = null, int $hour = null, int $minutes = null, int $seconds = null, $timezone = null, string $locale = null)&#10;&#10;Description&#10;     Returns a new instance with the date time values individually set.&#10;&#10;Parameters:&#10;    integer|null $year&#10;    integer|null $month&#10;    integer|null $day&#10;    integer|null $hour&#10;    integer|null $minutes&#10;    integer|null $seconds&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,281;;b1,5;;m0;;einteger|null $year;;pinteger|null $month;;pinteger|null $day;;pinteger|null $hour;;pinteger|null $minutes;;pinteger|null $seconds;;p\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="createFromDate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;239;2;242;;;;vpos;;v;;a;;r&#10;Definition&#10;    createFromDate(int $year = null, int $month = null, int $day = null, $timezone = null, string $locale = null)&#10;&#10;Description&#10;     Returns a new instance based on the year, month and day. If any of those three are left empty, will default to the current value.&#10;&#10;Parameters:&#10;    integer|null $year&#10;    integer|null $month&#10;    integer|null $day&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,240;;b1,5;;m0;;einteger|null $year;;pinteger|null $month;;pinteger|null $day;;p\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="createFromFormat;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;305;2;310;;;;vpos;;v;;a;;r&#10;Definition&#10;    createFromFormat($format, $datetime, $timeZone = null)&#10;&#10;Description&#10;     Provides a replacement for DateTime&apos;s own createFromFormat function, that provides more flexible timeZone handling&#10;&#10;Parameters:&#10;    string $format&#10;    string $datetime&#10;    \DateTimeZone|string|null $timeZone;;d1,306;;b1,5;;m0;;estring $format;;pstring $datetime;;p\DateTimeZone|string|null $timeZone;;p">
</treenode>
<treenode node="createFromTime;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;258;2;261;;;;vpos;;v;;a;;r&#10;Definition&#10;    createFromTime(int $hour = null, int $minutes = null, int $seconds = null, $timezone = null, string $locale = null)&#10;&#10;Description&#10;     Returns a new instance with the date set to today, and the time set to the values passed in.&#10;&#10;Parameters:&#10;    integer|null $hour&#10;    integer|null $minutes&#10;    integer|null $seconds&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,259;;b1,5;;m0;;einteger|null $hour;;pinteger|null $minutes;;pinteger|null $seconds;;p\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="createFromTimestamp;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;324;2;327;;;;vpos;;v;;a;;r&#10;Definition&#10;    createFromTimestamp(int $timestamp, $timezone = null, string $locale = null)&#10;&#10;Description&#10;     Returns a new instance with the datetime set based on the provided UNIX timestamp.&#10;&#10;Parameters:&#10;    integer $timestamp&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,325;;b1,5;;m0;;einteger $timestamp;;p\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="difference;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1229;2;1235;;;;vpos;;v;;a;;r&#10;Definition&#10;    difference($testTime, string $timezone = null)&#10;&#10;Description&#10;     &#10;&#10;Parameters:&#10;     $testTime&#10;    string|null $timezone;;d1,1230;;b1,0;;m0;;e $testTime;;pstring|null $timezone;;p">
</treenode>
<treenode node="equals;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1066;2;1075;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    equals($testTime, string $timezone = null): bool&#10;&#10;Description&#10;     Determines if the datetime passed in is equal to the current instance. Equal in this case means that they represent the same moment in time, and are not required to be in the same timezone, as both times are converted to UTC and compared that way.&#10;&#10;Parameters:&#10;    Time|DateTime|string $testTime&#10;    string|null $timezone;;d1,1067;;b1,0;;m0;;eTime|DateTime|string $testTime;;pstring|null $timezone;;p">
</treenode>
<treenode node="getAge;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;553;2;560;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getAge()&#10;&#10;Description&#10;     Returns the age in years from the &quot;current&quot; date and &apos;now&apos;;;d1,554;;b1,0;;m0;;e">
</treenode>
<treenode node="getCalendar;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1284;2;1287;;;;vpos;;v;;a;;r&#10;Definition&#10;    getCalendar()&#10;&#10;Description&#10;     Returns the IntlCalendar object used for this object, taking into account the locale, date, etc.;;d1,1285;;b1,0;;m0;;e">
</treenode>
<treenode node="getDay;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;449;2;452;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDay(): string&#10;&#10;Description&#10;     Return the localized day of the month.;;d1,450;;b1,0;;m0;;e">
</treenode>
<treenode node="getDayOfWeek;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;501;2;504;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDayOfWeek(): string&#10;&#10;Description&#10;     Return the index of the day of the week;;d1,502;;b1,0;;m0;;e">
</treenode>
<treenode node="getDayOfYear;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;514;2;517;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getDayOfYear(): string&#10;&#10;Description&#10;     Return the index of the day of the year;;d1,515;;b1,0;;m0;;e">
</treenode>
<treenode node="getDst;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;582;2;599;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    getDst(): bool&#10;&#10;Description&#10;     Are we in daylight savings time currently?;;d1,583;;b1,0;;m0;;e">
</treenode>
<treenode node="getHour;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;462;2;465;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getHour(): string&#10;&#10;Description&#10;     Return the localized hour (in 24-hour format).;;d1,463;;b1,0;;m0;;e">
</treenode>
<treenode node="getLocal;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;609;2;614;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    getLocal(): bool&#10;&#10;Description&#10;     Returns boolean whether the passed timezone is the same as the local timezone.;;d1,610;;b1,0;;m0;;e">
</treenode>
<treenode node="getMinute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;475;2;478;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMinute(): string&#10;&#10;Description&#10;     Return the localized minutes in the hour.;;d1,476;;b1,0;;m0;;e">
</treenode>
<treenode node="getMonth;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;436;2;439;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMonth(): string&#10;&#10;Description&#10;     Returns the localized Month;;d1,437;;b1,0;;m0;;e">
</treenode>
<treenode node="getQuarter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;570;2;573;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getQuarter(): string&#10;&#10;Description&#10;     Returns the number of the current quarter for the year.;;d1,571;;b1,0;;m0;;e">
</treenode>
<treenode node="getSecond;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;488;2;491;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getSecond(): string&#10;&#10;Description&#10;     Return the localized seconds;;d1,489;;b1,0;;m0;;e">
</treenode>
<treenode node="getTimezoneName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;633;2;636;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getTimezoneName(): string&#10;&#10;Description&#10;     Returns the name of the current timezone.;;d1,634;;b1,0;;m0;;e">
</treenode>
<treenode node="getUtc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;623;2;626;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    getUtc(): bool&#10;&#10;Description&#10;     Returns boolean whether object is in UTC.;;d1,624;;b1,0;;m0;;e">
</treenode>
<treenode node="getUTCObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1250;2;1270;;;;vpos;;v;;a;;r&#10;Definition&#10;    getUTCObject($time, string $timezone = null)&#10;&#10;Description&#10;     Returns a Time instance with the timezone converted to UTC.&#10;&#10;Parameters:&#10;     $time&#10;    string|null $timezone;;d1,1251;;b1,0;;m0;;e $time;;pstring|null $timezone;;p">
</treenode>
<treenode node="getWeekOfMonth;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;527;2;530;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getWeekOfMonth(): string&#10;&#10;Description&#10;     Return the index of the week in the month;;d1,528;;b1,0;;m0;;e">
</treenode>
<treenode node="getWeekOfYear;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;540;2;543;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getWeekOfYear(): string&#10;&#10;Description&#10;     Return the index of the week in the year;;d1,541;;b1,0;;m0;;e">
</treenode>
<treenode node="getYear;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;423;2;426;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getYear(): string&#10;&#10;Description&#10;     Returns the localized Year;;d1,424;;b1,0;;m0;;e">
</treenode>
<treenode node="hasRelativeKeywords;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f18;1298;2;1307;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasRelativeKeywords(string $time): bool&#10;&#10;Description&#10;     Check a time string to see if it includes a relative date (like &apos;next Tuesday&apos;).&#10;&#10;Parameters:&#10;    string $time;;d1,1299;;b2,5;;m0;;estring $time;;p">
</treenode>
<treenode node="hasTestNow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;407;2;410;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasTestNow(): bool&#10;&#10;Description&#10;     Returns whether we have a testNow instance saved.;;d1,408;;b1,5;;m0;;e">
</treenode>
<treenode node="humanize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1163;2;1220;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    humanize()&#10;&#10;Description&#10;     Returns a text string that is easily readable that describes how long ago, or how long from now, a date is, like:;;d1,1164;;b1,0;;m0;;e">
</treenode>
<treenode node="instance;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;340;2;346;;;;vpos;;v;;a;;r&#10;Definition&#10;    instance(DateTime $dateTime, string $locale = null)&#10;&#10;Description&#10;     Takes an instance of DateTime and returns an instance of Time with it&apos;s same values.&#10;&#10;Parameters:&#10;    \DateTime $dateTime&#10;    string|null $locale;;d1,341;;b1,5;;m0;;e\DateTime $dateTime;;pstring|null $locale;;p">
</treenode>
<treenode node="isAfter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1139;2;1145;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isAfter($testTime, string $timezone = null): bool&#10;&#10;Description&#10;     Determines if the current instance&apos;s time is after $testTime, after converting in UTC.&#10;&#10;Parameters:&#10;     $testTime&#10;    string|null $timezone;;d1,1140;;b1,0;;m0;;e $testTime;;pstring|null $timezone;;p">
</treenode>
<treenode node="isBefore;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1119;2;1125;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isBefore($testTime, string $timezone = null): bool&#10;&#10;Description&#10;     Determines if the current instance&apos;s time is before $testTime, after converting to UTC.&#10;&#10;Parameters:&#10;     $testTime&#10;    string|null $timezone;;d1,1120;;b1,0;;m0;;e $testTime;;pstring|null $timezone;;p">
</treenode>
<treenode node="now;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;151;2;154;;;;vpos;;v;;a;;r&#10;Definition&#10;    now($timezone = null, string $locale = null)&#10;&#10;Description&#10;     Returns a new Time instance with the timezone set.&#10;&#10;Parameters:&#10;    string|DateTimeZone|null $timezone&#10;    string|null $locale;;d1,152;;b1,5;;m0;;estring|DateTimeZone|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;171;2;174;;;;vpos;;v;;a;;r&#10;Definition&#10;    parse(string $datetime, $timezone = null, string $locale = null)&#10;&#10;Description&#10;     Returns a new Time instance while parsing a datetime string.&#10;&#10;Parameters:&#10;    string $datetime&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,172;;b1,5;;m0;;estring $datetime;;p\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="sameAs;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1088;2;1105;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    sameAs($testTime, string $timezone = null): bool&#10;&#10;Description&#10;     Ensures that the times are identical, taking timezone into account.&#10;&#10;Parameters:&#10;    Time|DateTime|string $testTime&#10;    string|null $timezone;;d1,1089;;b1,0;;m0;;eTime|DateTime|string $testTime;;pstring|null $timezone;;p">
</treenode>
<treenode node="setDay;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;686;2;701;;;;vpos;;v;;a;;r&#10;Definition&#10;    setDay($value)&#10;&#10;Description&#10;     Sets the day of the month.&#10;&#10;Parameters:&#10;    integer|string $value;;d1,687;;b1,0;;m0;;einteger|string $value;;p">
</treenode>
<treenode node="setHour;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;711;2;719;;;;vpos;;v;;a;;r&#10;Definition&#10;    setHour($value)&#10;&#10;Description&#10;     Sets the hour of the day (24 hour cycle)&#10;&#10;Parameters:&#10;    integer|string $value;;d1,712;;b1,0;;m0;;einteger|string $value;;p">
</treenode>
<treenode node="setMinute;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;729;2;737;;;;vpos;;v;;a;;r&#10;Definition&#10;    setMinute($value)&#10;&#10;Description&#10;     Sets the minute of the hour&#10;&#10;Parameters:&#10;    integer|string $value;;d1,730;;b1,0;;m0;;einteger|string $value;;p">
</treenode>
<treenode node="setMonth;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;663;2;676;;;;vpos;;v;;a;;r&#10;Definition&#10;    setMonth($value)&#10;&#10;Description&#10;     Sets the month of the year.&#10;&#10;Parameters:&#10;    integer|string $value;;d1,664;;b1,0;;m0;;einteger|string $value;;p">
</treenode>
<treenode node="setSecond;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;747;2;755;;;;vpos;;v;;a;;r&#10;Definition&#10;    setSecond($value)&#10;&#10;Description&#10;     Sets the second of the minute.&#10;&#10;Parameters:&#10;    integer|string $value;;d1,748;;b1,0;;m0;;einteger|string $value;;p">
</treenode>
<treenode node="setTestNow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;378;2;398;;;;vpos;;v;;a;;r&#10;Definition&#10;    setTestNow($datetime = null, $timezone = null, string $locale = null)&#10;&#10;Description&#10;     Creates an instance of Time that will be returned during testing when calling &apos;Time::now&apos; instead of the current time.&#10;&#10;Parameters:&#10;    \CodeIgniter\I18n\Time|string|null $datetime&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,379;;b1,5;;m0;;e\CodeIgniter\I18n\Time|string|null $datetime;;p\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="setTimestamp;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;796;2;801;;;;vpos;;v;;a;;r&#10;Definition&#10;    setTimestamp($timestamp)&#10;&#10;Description&#10;     Returns a new instance with the date set to the new timestamp.&#10;&#10;Parameters:&#10;    integer $timestamp;;d1,797;;b1,0;;m0;;einteger $timestamp;;p">
</treenode>
<treenode node="setTimezone;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;782;2;786;;;;vpos;;v;;a;;r&#10;Definition&#10;    setTimezone($timezone)&#10;&#10;Description&#10;     Returns a new instance with the revised timezone.&#10;&#10;Parameters:&#10;    string|\DateTimeZone $timezone;;d1,783;;b1,0;;m0;;estring|\DateTimeZone $timezone;;p">
</treenode>
<treenode node="setValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f11;766;2;772;;;;vpos;;v;;a;;r&#10;Definition&#10;    setValue(string $name, $value)&#10;&#10;Description&#10;     Helper method to do the heavy lifting of the &apos;setX&apos; methods.&#10;&#10;Parameters:&#10;    string $name&#10;    integer $value;;d1,767;;b2,0;;m0;;estring $name;;pinteger $value;;p">
</treenode>
<treenode node="setYear;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;650;2;653;;;;vpos;;v;;a;;r&#10;Definition&#10;    setYear($value)&#10;&#10;Description&#10;     Sets the current year for this instance.&#10;&#10;Parameters:&#10;    integer|string $value;;d1,651;;b1,0;;m0;;einteger|string $value;;p">
</treenode>
<treenode node="subDays;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;940;2;945;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    subDays(int $days)&#10;&#10;Description&#10;     Returns a new Time instance with $days subtracted from the time.&#10;&#10;Parameters:&#10;    integer $days;;d1,941;;b1,0;;m0;;einteger $days;;p">
</treenode>
<treenode node="subHours;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;926;2;931;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    subHours(int $hours)&#10;&#10;Description&#10;     Returns a new Time instance with $hours subtracted from the time.&#10;&#10;Parameters:&#10;    integer $hours;;d1,927;;b1,0;;m0;;einteger $hours;;p">
</treenode>
<treenode node="subMinutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;912;2;917;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    subMinutes(int $minutes)&#10;&#10;Description&#10;     Returns a new Time instance with $minutes subtracted from the time.&#10;&#10;Parameters:&#10;    integer $minutes;;d1,913;;b1,0;;m0;;einteger $minutes;;p">
</treenode>
<treenode node="subMonths;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;954;2;959;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    subMonths(int $months)&#10;&#10;Description&#10;     Returns a new Time instance with $months subtracted from the time.&#10;&#10;Parameters:&#10;    integer $months;;d1,955;;b1,0;;m0;;einteger $months;;p">
</treenode>
<treenode node="subSeconds;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;898;2;903;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    subSeconds(int $seconds)&#10;&#10;Description&#10;     Returns a new Time instance with $seconds subtracted from the time.&#10;&#10;Parameters:&#10;    integer $seconds;;d1,899;;b1,0;;m0;;einteger $seconds;;p">
</treenode>
<treenode node="subYears;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;968;2;973;;;;vpos;;v;;astatic;;r&#10;Definition&#10;    subYears(int $years)&#10;&#10;Description&#10;     Returns a new Time instance with $hours subtracted from the time.&#10;&#10;Parameters:&#10;    integer $years;;d1,969;;b1,0;;m0;;einteger $years;;p">
</treenode>
<treenode node="toDateString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;997;2;1000;;;;vpos;;v;;astring;;r&#10;Definition&#10;    toDateString()&#10;&#10;Description&#10;     Returns a localized version of the date in Y-m-d format.;;d1,998;;b1,0;;m0;;e">
</treenode>
<treenode node="toDateTime;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;356;2;362;;;;vpos;;v;;a;;r&#10;Definition&#10;    toDateTime()&#10;&#10;Description&#10;     Converts the current instance to a mutable DateTime object.;;d1,357;;b1,0;;m0;;e">
</treenode>
<treenode node="toDateTimeString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;984;2;987;;;;vpos;;v;;a;;r&#10;Definition&#10;    toDateTimeString()&#10;&#10;Description&#10;     Returns the localized value of the date in the format &apos;Y-m-d H:i:s&apos;;;d1,985;;b1,0;;m0;;e">
</treenode>
<treenode node="today;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;187;2;190;;;;vpos;;v;;a;;r&#10;Definition&#10;    today($timezone = null, string $locale = null)&#10;&#10;Description&#10;     Return a new time with the time set to midnight.&#10;&#10;Parameters:&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,188;;b1,5;;m0;;e\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="toFormattedDateString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1012;2;1015;;;;vpos;;v;;astring;;r&#10;Definition&#10;    toFormattedDateString()&#10;&#10;Description&#10;     Returns a localized version of the date in nicer date format:;;d1,1013;;b1,0;;m0;;e">
</treenode>
<treenode node="toLocalizedString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1042;2;1047;;;;vpos;;v;;astring;;r&#10;Definition&#10;    toLocalizedString(string $format = null)&#10;&#10;Description&#10;     Returns the localized value of this instance in $format.&#10;&#10;Parameters:&#10;    string|null $format&#10;&#10;Return:&#10;   |boolean;;d1,1043;;b1,0;;m0;;estring|null $format;;p">
</treenode>
<treenode node="tomorrow;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;219;2;222;;;;vpos;;v;;a;;r&#10;Definition&#10;    tomorrow($timezone = null, string $locale = null)&#10;&#10;Description&#10;     Returns an instance set to midnight tomorrow morning.&#10;&#10;Parameters:&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,220;;b1,5;;m0;;e\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
<treenode node="toTimeString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f8;1027;2;1030;;;;vpos;;v;;astring;;r&#10;Definition&#10;    toTimeString()&#10;&#10;Description&#10;     Returns a localized version of the time in nicer date format:;;d1,1028;;b1,0;;m0;;e">
</treenode>
<treenode node="yesterday;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\Time.php;f15;203;2;206;;;;vpos;;v;;a;;r&#10;Definition&#10;    yesterday($timezone = null, string $locale = null)&#10;&#10;Description&#10;     Returns an instance set to midnight yesterday morning.&#10;&#10;Parameters:&#10;    \DateTimeZone|string|null $timezone&#10;    string|null $locale;;d1,204;;b1,5;;m0;;e\DateTimeZone|string|null $timezone;;pstring|null $locale;;p">
</treenode>
</treenode>
<treenode node="TimeDifference;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f0;49;1;363;;;;vpos;;v;;a;;r&#10;Definition&#10;    class TimeDifference&#10;&#10;Description&#10;     Class TimeDifference;;d0,50;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;129;2;139;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(DateTime $currentTime, DateTime $testTime)&#10;&#10;Description&#10;     Note: both parameters are required to be in the same timezone. No timezone shifting is done internally.&#10;&#10;Parameters:&#10;    DateTime $currentTime&#10;    DateTime $testTime;;d1,130;;b1,0;;m0;;eDateTime $currentTime;;pDateTime $testTime;;p">
</treenode>
<treenode node="__get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;336;2;347;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    __get($name)&#10;&#10;Description&#10;     Allow property-like access to our calculated values.&#10;&#10;Parameters:&#10;    string $name;;d1,337;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="__isset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;356;2;362;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    __isset($name)&#10;&#10;Description&#10;     Allow property-like checking for our calculated values.&#10;&#10;Parameters:&#10;    string $name;;d1,357;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="getDays;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;204;2;213;;;;vpos;;v;;afloat;;r&#10;Definition&#10;    getDays(bool $raw = false)&#10;&#10;Description&#10;     Returns the number of days difference between the two dates.&#10;&#10;Parameters:&#10;    boolean $raw&#10;&#10;Return:&#10;   |integer;;d1,205;;b1,0;;m0;;eboolean $raw;;p">
</treenode>
<treenode node="getHours;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;222;2;231;;;;vpos;;v;;afloat;;r&#10;Definition&#10;    getHours(bool $raw = false)&#10;&#10;Description&#10;     Returns the number of hours difference between the two dates.&#10;&#10;Parameters:&#10;    boolean $raw&#10;&#10;Return:&#10;   |integer;;d1,223;;b1,0;;m0;;eboolean $raw;;p">
</treenode>
<treenode node="getMinutes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;240;2;249;;;;vpos;;v;;afloat;;r&#10;Definition&#10;    getMinutes(bool $raw = false)&#10;&#10;Description&#10;     Returns the number of minutes difference between the two dates.&#10;&#10;Parameters:&#10;    boolean $raw&#10;&#10;Return:&#10;   |integer;;d1,241;;b1,0;;m0;;eboolean $raw;;p">
</treenode>
<treenode node="getMonths;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;168;2;177;;;;vpos;;v;;afloat;;r&#10;Definition&#10;    getMonths(bool $raw = false)&#10;&#10;Description&#10;     Returns the number of months difference between the two dates.&#10;&#10;Parameters:&#10;    boolean $raw&#10;&#10;Return:&#10;   |integer;;d1,169;;b1,0;;m0;;eboolean $raw;;p">
</treenode>
<treenode node="getSeconds;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;258;2;267;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getSeconds(bool $raw = false)&#10;&#10;Description&#10;     Returns the number of seconds difference between the two dates.&#10;&#10;Parameters:&#10;    boolean $raw;;d1,259;;b1,0;;m0;;eboolean $raw;;p">
</treenode>
<treenode node="getWeeks;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;186;2;195;;;;vpos;;v;;afloat;;r&#10;Definition&#10;    getWeeks(bool $raw = false)&#10;&#10;Description&#10;     Returns the number of weeks difference between the two dates.&#10;&#10;Parameters:&#10;    boolean $raw&#10;&#10;Return:&#10;   |integer;;d1,187;;b1,0;;m0;;eboolean $raw;;p">
</treenode>
<treenode node="getYears;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;150;2;159;;;;vpos;;v;;afloat;;r&#10;Definition&#10;    getYears(bool $raw = false)&#10;&#10;Description&#10;     Returns the number of years of difference between the two.&#10;&#10;Parameters:&#10;    boolean $raw&#10;&#10;Return:&#10;   |integer;;d1,151;;b1,0;;m0;;eboolean $raw;;p">
</treenode>
<treenode node="humanize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\I18n\TimeDifference.php;f8;276;2;327;;;;vpos;;v;;astring;;r&#10;Definition&#10;    humanize(string $locale = null): string&#10;&#10;Description&#10;     Convert the time to human readable format&#10;&#10;Parameters:&#10;    string|null $locale;;d1,277;;b1,0;;m0;;estring|null $locale;;p">
</treenode>
</treenode>
<treenode node="Timer;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Timer.php;f0;49;1;180;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Timer&#10;&#10;Description&#10;     Class Timer;;d0,50;;b0,0;;m0;;e">
<treenode node="getElapsedTime;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Timer.php;f8;120;2;137;;;;vpos;;v;;anull;;r&#10;Definition&#10;    getElapsedTime(string $name, int $decimals = 4)&#10;&#10;Description&#10;     Returns the duration of a recorded timer.&#10;&#10;Parameters:&#10;    string $name - The name of the timer&#10;    integer $decimals - Number of decimal places&#10;&#10;Return:&#10;   |float       Returns null if timer exists by that name;;d1,121;;b1,0;;m0;;estring $name;;pinteger $decimals;;p">
</treenode>
<treenode node="getTimers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Timer.php;f8;148;2;163;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getTimers(int $decimals = 4): array&#10;&#10;Description&#10;     Returns the array of timers, with the duration pre-calculated for you.&#10;&#10;Parameters:&#10;    integer $decimals - Number of decimal places;;d1,149;;b1,0;;m0;;einteger $decimals;;p">
</treenode>
<treenode node="has;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Timer.php;f8;174;2;177;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    has(string $name): bool&#10;&#10;Description&#10;     Checks whether or not a timer with the specified name exists.&#10;&#10;Parameters:&#10;    string $name;;d1,175;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="start;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Timer.php;f8;72;2;80;;;;vpos;;v;;aTimer;;r&#10;Definition&#10;    start(string $name, float $time = null)&#10;&#10;Description&#10;     Starts a timer running.&#10;&#10;Parameters:&#10;    string $name - The name of this timer&#10;    float $time - Allows user to provide time;;d1,73;;b1,0;;m0;;estring $name;;pfloat $time;;p">
</treenode>
<treenode node="stop;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Timer.php;f8;94;2;106;;;;vpos;;v;;aTimer;;r&#10;Definition&#10;    stop(string $name)&#10;&#10;Description&#10;     Stops a running timer.&#10;&#10;Parameters:&#10;    string $name - The name of this timer;;d1,95;;b1,0;;m0;;estring $name;;p">
</treenode>
</treenode>
<treenode node="Timers;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Timers.php;f0;46;1;106;;;;vpos;;v;;aBaseCollector;;c;;r&#10;Definition&#10;    class Timers extends BaseCollector&#10;&#10;Description&#10;     Timers collector;;d0,47;;b0,0;;m0;;e">
<treenode node="formatTimelineData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Timers.php;f11;81;2;104;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    formatTimelineData(): array&#10;&#10;Description&#10;     Child classes should implement this to return the timeline data formatted for correct usage.;;d1,82;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="TimestampPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\TimestampPlugin.php;f0;31;1;41;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TimestampPlugin.php;f0;29;1;70;;;;vpos;;v;;aPlugin;;cTabPluginInterface;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TimestampPlugin.php;f11;43;5;46;;;;vpos;;v;;a;;r;;d4,44;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TimestampPlugin.php;f11;38;5;41;;;;vpos;;v;;a;;r;;d4,39;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TimestampPlugin.php;f11;48;5;69;;;;vpos;;v;;a;;r;;d4,49;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="renderTab;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\TimestampPlugin.php;f11;33;5;40;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;er;;p">
</treenode>
</treenode>
<treenode node="Toolbar;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f0;58;1;513;;O:\xampp\htdocs\2020\blog-4\app\Config\Toolbar.php;f0;4;1;67;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Toolbar&#10;&#10;Description&#10;     Debug Toolbar;;d0,59;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f8;82;2;97;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(BaseConfig $config)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    BaseConfig $config;;d1,83;;b1,0;;m0;;eBaseConfig $config;;p">
</treenode>
<treenode node="collectTimelineData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f11;262;2;280;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    collectTimelineData($collectors): array&#10;&#10;Description&#10;     Returns a sorted array of timeline data arrays from the collectors.&#10;&#10;Parameters:&#10;    array $collectors;;d1,263;;b2,0;;m0;;earray $collectors;;p">
</treenode>
<treenode node="collectVarData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f11;290;2;305;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    collectVarData(): array&#10;&#10;Description&#10;     Returns an array of data from all of the modules that should be displayed in the &apos;Vars&apos; tab.;;d1,291;;b2,0;;m0;;e">
</treenode>
<treenode node="format;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f11;473;2;511;;;;vpos;;v;;astring;;r&#10;Definition&#10;    format(string $data, string $format = &apos;html&apos;): string&#10;&#10;Description&#10;     Format output&#10;&#10;Parameters:&#10;    string $data - JSON encoded Toolbar data&#10;    string $format - html, json, xml;;d1,474;;b2,0;;m0;;estring $data;;pstring $format;;p">
</treenode>
<treenode node="prepare;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f8;334;2;403;;;;vpos;;v;;atype;;r&#10;Definition&#10;    prepare(RequestInterface $request = null, ResponseInterface $response = null)&#10;&#10;Description&#10;     Prepare for debugging..&#10;&#10;Parameters:&#10;    RequestInterface $request&#10;    ResponseInterface $response;;d1,335;;b1,0;;m0;;eRequestInterface $request;;pResponseInterface $response;;p">
</treenode>
<treenode node="renderTimeline;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f11;224;2;251;;;;vpos;;v;;astring;;r&#10;Definition&#10;    renderTimeline(array $collectors, float $startTime, int $segmentCount, int $segmentDuration, array &amp;$styles): string&#10;&#10;Description&#10;     Called within the view to display the timeline itself.&#10;&#10;Parameters:&#10;    array $collectors&#10;    float $startTime&#10;    integer $segmentCount&#10;    integer $segmentDuration&#10;    array $styles;;d1,225;;b2,0;;m0;;earray $collectors;;pfloat $startTime;;pinteger $segmentCount;;pinteger $segmentDuration;;parray $styles;;p">
</treenode>
<treenode node="respond;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f8;410;2;463;;;;vpos;;v;;a;;r&#10;Definition&#10;    respond()&#10;&#10;Description&#10;     Inject debug toolbar into the response.;;d1,411;;b1,0;;m0;;e">
</treenode>
<treenode node="roundTo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f11;317;2;322;;;;vpos;;v;;afloat;;r&#10;Definition&#10;    roundTo(float $number, int $increments = 5): float&#10;&#10;Description&#10;     Rounds a number to the nearest incremental value.&#10;&#10;Parameters:&#10;    float $number&#10;    integer $increments;;d1,318;;b2,0;;m0;;efloat $number;;pinteger $increments;;p">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar.php;f8;111;2;208;;;;vpos;;v;;astring;;r&#10;Definition&#10;    run(float $startTime, float $totalTime, RequestInterface $request, ResponseInterface $response): string&#10;&#10;Description&#10;     Returns all the data required by Debug Bar&#10;&#10;Parameters:&#10;    float $startTime - App start time&#10;    float $totalTime&#10;    \CodeIgniter\HTTP\RequestInterface $request&#10;    \CodeIgniter\HTTP\ResponseInterface $response&#10;&#10;Return:&#10;   JSON encoded data;;d1,112;;b1,0;;m0;;efloat $startTime;;pfloat $totalTime;;p\CodeIgniter\HTTP\RequestInterface $request;;p\CodeIgniter\HTTP\ResponseInterface $response;;p">
</treenode>
</treenode>
<treenode node="ToStringPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ToStringPlugin.php;f0;31;1;66;;;;vpos;;v;;aPlugin;;c;;r;;d0,32;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ToStringPlugin.php;f11;43;5;46;;;;vpos;;v;;a;;r;;d4,44;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ToStringPlugin.php;f11;38;5;41;;;;vpos;;v;;a;;r;;d4,39;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\ToStringPlugin.php;f11;48;5;65;;;;vpos;;v;;a;;r;;d4,49;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
</treenode>
<treenode node="TraceFrameObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\TraceFrameObject.php;f0;32;1;99;;;;vpos;;v;;aBasicObject;;c;;r;;d0,33;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\TraceFrameObject.php;f11;37;5;98;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;ebase;;praw_frame;;p">
</treenode>
</treenode>
<treenode node="TraceFramePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\TraceFramePlugin.php;f0;30;1;67;;;;vpos;;v;;aPlugin;;cObjectPluginInterface;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="renderObject;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Rich\TraceFramePlugin.php;f11;32;5;66;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="TraceObject;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\TraceObject.php;f0;27;1;44;;;;vpos;;v;;aBasicObject;;c;;r;;d0,28;;b0,0;;m0;;e">
<treenode node="getSize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\TraceObject.php;f11;36;5;43;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;e">
</treenode>
<treenode node="getType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Object\TraceObject.php;f11;31;5;34;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="TracePlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\TracePlugin.php;f0;30;1;110;;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TracePlugin.php;f0;32;1;91;;;;vpos;;v;;aPlugin;;c;;r;;d0,31;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TracePlugin.php;f11;41;5;44;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TracePlugin.php;f11;36;5;39;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\TracePlugin.php;f11;46;5;90;;;;vpos;;v;;a;;r;;d4,47;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Renderer\Text\TracePlugin.php;f11;32;5;109;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;eo;;p">
</treenode>
</treenode>
<treenode node="Typography;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Typography\Typography.php;f0;44;1;407;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Typography&#10;&#10;Description&#10;     Typography Class;;d0,45;;b0,0;;m0;;e">
<treenode node="autoTypography;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Typography\Typography.php;f8;105;2;268;;;;vpos;;v;;astring;;r&#10;Definition&#10;    autoTypography(string $str, bool $reduce_linebreaks = false): string&#10;&#10;Description&#10;     Auto Typography&#10;&#10;Parameters:&#10;    string $str&#10;    boolean $reduce_linebreaks - whether to reduce more then two consecutive newlines to two;;d1,106;;b1,0;;m0;;estring $str;;pboolean $reduce_linebreaks;;p">
</treenode>
<treenode node="formatCharacters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Typography\Typography.php;f8;282;2;327;;;;vpos;;v;;astring;;r&#10;Definition&#10;    formatCharacters(string $str): string&#10;&#10;Description&#10;     Format Characters&#10;&#10;Parameters:&#10;    string $str;;d1,283;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="formatNewLines;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Typography\Typography.php;f11;339;2;364;;;;vpos;;v;;astring;;r&#10;Definition&#10;    formatNewLines(string $str): string&#10;&#10;Description&#10;     Format Newlines&#10;&#10;Parameters:&#10;    string $str;;d1,340;;b2,0;;m0;;estring $str;;p">
</treenode>
<treenode node="nl2brExceptPre;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Typography\Typography.php;f8;392;2;405;;;;vpos;;v;;astring;;r&#10;Definition&#10;    nl2brExceptPre(string $str): string&#10;&#10;Description&#10;     Convert newlines to HTML line breaks except within PRE tags&#10;&#10;Parameters:&#10;    string $str;;d1,393;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="protectCharacters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Typography\Typography.php;f11;379;2;382;;;;vpos;;v;;astring;;r&#10;Definition&#10;    protectCharacters(array $match): string&#10;&#10;Description&#10;     Protect Characters&#10;&#10;Parameters:&#10;    array $match;;d1,380;;b2,0;;m0;;earray $match;;p">
</treenode>
</treenode>
<treenode node="UploadedFile;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f0;56;1;413;;;;vpos;;v;;aFile;;cUploadedFileInterface;;c;;r&#10;Definition&#10;    class UploadedFile extends File implements UploadedFileInterface&#10;&#10;Description&#10;     Value object representing a single file uploaded through an HTTP request. Used by the IncomingRequest class to provide files.;;d0,57;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;113;2;123;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(string $path, string $originalName, string $mimeType = null, int $size = null, int $error = null)&#10;&#10;Description&#10;     Accepts the file information as would be filled in from the $_FILES array.&#10;&#10;Parameters:&#10;    string $path - The temporary location of the uploaded file&#10;    string $originalName - The client-provided filename&#10;    string $mimeType - The type of file as provided by PHP&#10;    integer $size - The size of the file, in bytes&#10;    integer $error - The error constant of the upload (one of PHP&apos;s UPLOADERRXXX constants);;d1,114;;b1,0;;m0;;estring $path;;pstring $originalName;;pstring $mimeType;;pinteger $size;;pinteger $error;;p">
</treenode>
<treenode node="getClientExtension;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;374;2;377;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getClientExtension(): string&#10;&#10;Description&#10;     Returns the original file extension, based on the file name that was uploaded. This is NOT a trusted source. For a trusted version, use guessExtension() instead.;;d1,375;;b1,0;;m0;;e">
</treenode>
<treenode node="getClientMimeType;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;296;2;299;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getClientMimeType(): string&#10;&#10;Description&#10;     Returns the mime type as provided by the client. This is NOT a trusted value. For a trusted version, use getMimeType() instead.&#10;&#10;Return:&#10;   The media type sent by the client or null if none was provided;;d1,297;;b1,0;;m0;;e">
</treenode>
<treenode node="getClientName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;322;2;325;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getClientName(): string&#10;&#10;Description&#10;     Returns the name of the file as provided by the client during upload.;;d1,323;;b1,0;;m0;;e">
</treenode>
<treenode node="getError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;252;2;260;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getError(): int&#10;&#10;Description&#10;     Retrieve the error associated with the uploaded file.&#10;&#10;Return:&#10;   One of PHP&apos;s UPLOAD_ERR_XXX constants;;d1,253;;b1,0;;m0;;e">
</treenode>
<treenode node="getErrorString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;269;2;285;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getErrorString(): string&#10;&#10;Description&#10;     Get error string;;d1,270;;b1,0;;m0;;e">
</treenode>
<treenode node="getExtension;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;350;2;353;;;;vpos;;v;;a;;r&#10;Definition&#10;    getExtension(): string&#10;&#10;Description&#10;     Overrides SPLFileInfo&apos;s to work with uploaded files, since the temp file that&apos;s been uploaded doesn&apos;t have an extension.;;d1,351;;b1,0;;m0;;e">
</treenode>
<treenode node="getName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;310;2;313;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getName(): string&#10;&#10;Description&#10;     Retrieve the filename. This will typically be the filename sent by the client, and should not be trusted. If the file has been moved, this will return the final name of the moved file.&#10;&#10;Return:&#10;   The filename sent by the client or null if none was provided;;d1,311;;b1,0;;m0;;e">
</treenode>
<treenode node="getTempName;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;334;2;337;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getTempName(): string&#10;&#10;Description&#10;     Gets the temporary filename where the file was uploaded to.;;d1,335;;b1,0;;m0;;e">
</treenode>
<treenode node="guessExtension;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;360;2;363;;;;vpos;;v;;astring;;r&#10;Definition&#10;    guessExtension(): string&#10;&#10;Description&#10;     Attempts to determine the best file extension.&#10;&#10;Return:&#10;   |null;;d1,361;;b1,0;;m0;;e">
</treenode>
<treenode node="hasMoved;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;231;2;234;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasMoved(): bool&#10;&#10;Description&#10;     Returns whether the file has been moved or not. If it has, the move() method will not work and certain properties, like the tempName, will no longer be available.;;d1,232;;b1,0;;m0;;e">
</treenode>
<treenode node="isValid;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;387;2;390;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isValid(): bool&#10;&#10;Description&#10;     Returns whether the file was uploaded successfully, based on whether it was uploaded via HTTP and has no errors.;;d1,388;;b1,0;;m0;;e">
</treenode>
<treenode node="move;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;160;2;197;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    move(string $targetPath, string $name = null, bool $overwrite = false)&#10;&#10;Description&#10;     Move the uploaded file to a new location.&#10;&#10;Parameters:&#10;    string $targetPath - Path to which to move the uploaded file&#10;    string $name - the name to rename the file to&#10;    boolean $overwrite - State for indicating whether to overwrite the previously generated file with the same;;d1,161;;b1,0;;m0;;estring $targetPath;;pstring $name;;pboolean $overwrite;;p">
</treenode>
<treenode node="setPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f11;207;2;220;;;;vpos;;v;;astring;;r&#10;Definition&#10;    setPath(string $path): string&#10;&#10;Description&#10;     create file target path if the set path does not exist&#10;&#10;Parameters:&#10;    string $path&#10;&#10;Return:&#10;   The path set or created;;d1,208;;b2,0;;m0;;estring $path;;p">
</treenode>
<treenode node="store;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\Files\UploadedFile.php;f8;402;2;410;;;;vpos;;v;;astring;;r&#10;Definition&#10;    store(string $folderName = null, string $fileName = null): string&#10;&#10;Description&#10;     Save the uploaded file to a new location.&#10;&#10;Parameters:&#10;    string $folderName - the folder name to writable/uploads directory&#10;    string $fileName - the name to rename the file to&#10;&#10;Return:&#10;   file full path;;d1,403;;b1,0;;m0;;estring $folderName;;pstring $fileName;;p">
</treenode>
</treenode>
<treenode node="URI;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f0;46;1;1193;;;;vpos;;v;;a;;r&#10;Definition&#10;    class URI&#10;&#10;Description&#10;     Abstraction for a uniform resource identifier (URI).;;d0,47;;b0,0;;m0;;e">
<treenode node="CHAR_SUB_DELIMS;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f6;54;22;54;;;;vpos;;v;;a;;r&#10;Description&#10;     Sub-delimiters used in query strings and fragments.;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="CHAR_UNRESERVED;PHP:PHP Word;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f6;61;22;61;;;;vpos;;v;;a;;r&#10;Description&#10;     Unreserved characters used in paths, query strings, and fragments.;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;171;2;177;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(string $uri = null)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    string $uri;;d1,172;;b1,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="__toString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;569;2;575;;;;vpos;;v;;a;;r&#10;Definition&#10;    __toString(): string&#10;&#10;Description&#10;     Allow the URI to be output as a string by simply casting it to a string or echoing out.;;d1,570;;b1,0;;m0;;e">
</treenode>
<treenode node="addQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;837;2;842;;;;vpos;;v;;a;;r&#10;Definition&#10;    addQuery(string $key, $value = null)&#10;&#10;Description&#10;     Adds a single new element to the query vars.&#10;&#10;Parameters:&#10;    string $key&#10;    mixed $value;;d1,838;;b1,0;;m0;;estring $key;;pmixed $value;;p">
</treenode>
<treenode node="applyParts;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f11;959;2;1015;;;;vpos;;v;;a;;r&#10;Definition&#10;    applyParts(array $parts)&#10;&#10;Description&#10;     Saves our parts from a parse_url call.&#10;&#10;Parameters:&#10;    array $parts;;d1,960;;b2,0;;m0;;earray $parts;;p">
</treenode>
<treenode node="createURIString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f15;590;2;619;;;;vpos;;v;;astring;;r&#10;Definition&#10;    createURIString(string $scheme = null, string $authority = null, string $path = null, string $query = null, string $fragment = null): string&#10;&#10;Description&#10;     Builds a representation of the string from the component parts.&#10;&#10;Parameters:&#10;    string $scheme&#10;    string $authority&#10;    string $path&#10;    string $query&#10;    string $fragment;;d1,591;;b1,5;;m0;;estring $scheme;;pstring $authority;;pstring $path;;pstring $query;;pstring $fragment;;p">
</treenode>
<treenode node="filterPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f11;921;2;950;;;;vpos;;v;;astring;;r&#10;Definition&#10;    filterPath(string $path = null): string&#10;&#10;Description&#10;     Encodes any dangerous characters, and removes dot segments. While dot segments have valid uses according to the spec, this URI class does not allow them.&#10;&#10;Parameters:&#10;     $path;;d1,922;;b2,0;;m0;;e $path;;p">
</treenode>
<treenode node="getAuthority;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;271;2;298;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getAuthority(bool $ignorePort = false): string&#10;&#10;Description&#10;     Retrieve the authority component of the URI.&#10;&#10;Parameters:&#10;    boolean $ignorePort&#10;&#10;Return:&#10;   The URI authority, in &quot;[user-info;;d1,272;;b1,0;;m0;;eboolean $ignorePort;;p">
</treenode>
<treenode node="getFragment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;478;2;481;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getFragment(): string&#10;&#10;Description&#10;     Retrieve a URI fragment;;d1,479;;b1,0;;m0;;e">
</treenode>
<treenode node="getHost;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;364;2;367;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getHost(): string&#10;&#10;Description&#10;     Retrieve the host component of the URI.&#10;&#10;Return:&#10;   The URI host;;d1,365;;b1,0;;m0;;e">
</treenode>
<treenode node="getPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;418;2;421;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getPath(): string&#10;&#10;Description&#10;     Retrieve the path component of the URI.&#10;&#10;Return:&#10;   The URI path;;d1,419;;b1,0;;m0;;e">
</treenode>
<treenode node="getPort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;386;2;389;;;;vpos;;v;;anull;;r&#10;Definition&#10;    getPort()&#10;&#10;Description&#10;     Retrieve the port component of the URI.&#10;&#10;Return:&#10;   |integer The URI port;;d1,387;;b1,0;;m0;;e">
</treenode>
<treenode node="getQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;432;2;469;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getQuery(array $options = []): string&#10;&#10;Description&#10;     Retrieve the query string&#10;&#10;Parameters:&#10;    array $options;;d1,433;;b1,0;;m0;;earray $options;;p">
</treenode>
<treenode node="getScheme;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;243;2;246;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getScheme(): string&#10;&#10;Description&#10;     Retrieve the scheme component of the URI.&#10;&#10;Return:&#10;   The URI scheme;;d1,244;;b1,0;;m0;;e">
</treenode>
<treenode node="getSegment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;506;2;518;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getSegment(int $number, string $default = &apos;&apos;): string&#10;&#10;Description&#10;     Returns the value of a specific segment of the URI path.&#10;&#10;Parameters:&#10;    integer $number - Segment number&#10;    string $default - Default value&#10;&#10;Return:&#10;   The value of the segment;;d1,507;;b1,0;;m0;;einteger $number;;pstring $default;;p">
</treenode>
<treenode node="getSegments;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;490;2;493;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getSegments(): array&#10;&#10;Description&#10;     Returns the segments of the path as an array.;;d1,491;;b1,0;;m0;;e">
</treenode>
<treenode node="getTotalSegments;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;558;2;561;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getTotalSegments(): int&#10;&#10;Description&#10;     Returns the total number of segments.;;d1,559;;b1,0;;m0;;e">
</treenode>
<treenode node="getUserInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;322;2;332;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getUserInfo()&#10;&#10;Description&#10;     Retrieve the user information component of the URI.&#10;&#10;Return:&#10;   |null The URI user information, in &quot;username[:password]&quot; format;;d1,323;;b1,0;;m0;;e">
</treenode>
<treenode node="keepQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;873;2;890;;;;vpos;;v;;a;;r&#10;Definition&#10;    keepQuery(...$params)&#10;&#10;Description&#10;     Filters the query variables so that only the keys passed in are kept. The rest are removed from the object.&#10;&#10;Parameters:&#10;    array - ...$params;;d1,874;;b1,0;;m0;;earray;;p">
</treenode>
<treenode node="mergePaths;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f11;1104;2;1122;;;;vpos;;v;;astring;;r&#10;Definition&#10;    mergePaths(URI $base, URI $reference): string&#10;&#10;Description&#10;     Given 2 paths, will merge them according to rules set out in RFC 2986, Section 5.2&#10;&#10;Parameters:&#10;    URI $base&#10;    URI $reference;;d1,1105;;b2,0;;m0;;eURI $base;;pURI $reference;;p">
</treenode>
<treenode node="refreshPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;766;2;775;;;;vpos;;v;;a;;r&#10;Definition&#10;    refreshPath()&#10;&#10;Description&#10;     Sets the path portion of the URI based on segments.&#10;&#10;Parameters:&#10;    string $path;;d1,767;;b1,0;;m0;;e">
</treenode>
<treenode node="removeDotSegments;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;1138;2;1190;;;;vpos;;v;;astring;;r&#10;Definition&#10;    removeDotSegments(string $path): string&#10;&#10;Description&#10;     Used when resolving and merging paths to correctly interpret and remove single and double dot segments from the path per RFC 3986 Section 5.2.4&#10;&#10;Parameters:&#10;    string $path;;d1,1139;;b1,0;;m0;;estring $path;;p">
</treenode>
<treenode node="resolveRelativeURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;1029;2;1089;;;;vpos;;v;;a;;r&#10;Definition&#10;    resolveRelativeURI(string $uri)&#10;&#10;Description&#10;     Combines one URI string with this one based on the rules set out in RFC 3986 Section 2&#10;&#10;Parameters:&#10;    string $uri;;d1,1030;;b1,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="setAuthority;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;630;2;648;;;;vpos;;v;;a;;r&#10;Definition&#10;    setAuthority(string $str)&#10;&#10;Description&#10;     Parses the given string an saves the appropriate authority pieces.&#10;&#10;Parameters:&#10;    string $str;;d1,631;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="setFragment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;903;2;908;;;;vpos;;v;;a;;r&#10;Definition&#10;    setFragment(string $string)&#10;&#10;Description&#10;     Sets the fragment portion of the URI.&#10;&#10;Parameters:&#10;    string $string;;d1,904;;b1,0;;m0;;estring $string;;p">
</treenode>
<treenode node="setHost;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;701;2;706;;;;vpos;;v;;a;;r&#10;Definition&#10;    setHost(string $str)&#10;&#10;Description&#10;     Sets the host name to use.&#10;&#10;Parameters:&#10;    string $str;;d1,702;;b1,0;;m0;;estring $str;;p">
</treenode>
<treenode node="setPath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;748;2;757;;;;vpos;;v;;a;;r&#10;Definition&#10;    setPath(string $path)&#10;&#10;Description&#10;     Sets the path portion of the URI.&#10;&#10;Parameters:&#10;    string $path;;d1,749;;b1,0;;m0;;estring $path;;p">
</treenode>
<treenode node="setPort;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;717;2;737;;;;vpos;;v;;a;;r&#10;Definition&#10;    setPort(int $port = null)&#10;&#10;Description&#10;     Sets the port portion of the URI.&#10;&#10;Parameters:&#10;    integer $port;;d1,718;;b1,0;;m0;;einteger $port;;p">
</treenode>
<treenode node="setQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;787;2;808;;;;vpos;;v;;a;;r&#10;Definition&#10;    setQuery(string $query)&#10;&#10;Description&#10;     Sets the query portion of the URI, while attempting to clean the various parts of the query keys and values.&#10;&#10;Parameters:&#10;    string $query;;d1,788;;b1,0;;m0;;estring $query;;p">
</treenode>
<treenode node="setQueryArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;820;2;825;;;;vpos;;v;;a;;r&#10;Definition&#10;    setQueryArray(array $query)&#10;&#10;Description&#10;     A convenience method to pass an array of items in as the Query portion of the URI.&#10;&#10;Parameters:&#10;    array $query;;d1,821;;b1,0;;m0;;earray $query;;p">
</treenode>
<treenode node="setScheme;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;664;2;672;;;;vpos;;v;;a;;r&#10;Definition&#10;    setScheme(string $str)&#10;&#10;Description&#10;     Sets the scheme for this URI.&#10;&#10;Parameters:&#10;     $str;;d1,665;;b1,0;;m0;;e $str;;p">
</treenode>
<treenode node="setSegment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;529;2;549;;;;vpos;;v;;a;;r&#10;Definition&#10;    setSegment(int $number, $value)&#10;&#10;Description&#10;     Set the value of a specific segment of the URI path. Allows to set only existing segments or add new one.&#10;&#10;Parameters:&#10;    integer $number&#10;    mixed $value - (string or int);;d1,530;;b1,0;;m0;;einteger $number;;pmixed $value;;p">
</treenode>
<treenode node="setSilent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;189;2;194;;;;vpos;;v;;aURI;;r&#10;Definition&#10;    setSilent(bool $silent = true)&#10;&#10;Description&#10;     If $silent == true, then will not throw exceptions and will attempt to continue gracefully.&#10;&#10;Parameters:&#10;    boolean $silent;;d1,190;;b1,0;;m0;;eboolean $silent;;p">
</treenode>
<treenode node="setURI;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;205;2;225;;;;vpos;;v;;aURI;;r&#10;Definition&#10;    setURI(string $uri = null)&#10;&#10;Description&#10;     Sets and overwrites any current URI information.&#10;&#10;Parameters:&#10;    string|null $uri;;d1,206;;b1,0;;m0;;estring|null $uri;;p">
</treenode>
<treenode node="setUserInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;684;2;690;;;;vpos;;v;;a;;r&#10;Definition&#10;    setUserInfo(string $user, string $pass)&#10;&#10;Description&#10;     Sets the userInfo/Authority portion of the URI.&#10;&#10;Parameters:&#10;    string $user - The user&apos;s username&#10;    string $pass - The user&apos;s password;;d1,685;;b1,0;;m0;;estring $user;;pstring $pass;;p">
</treenode>
<treenode node="showPassword;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;344;2;349;;;;vpos;;v;;aURI;;r&#10;Definition&#10;    showPassword(bool $val = true)&#10;&#10;Description&#10;     Temporarily sets the URI to show a password in userInfo. Will reset itself after the first call to authority().&#10;&#10;Parameters:&#10;    boolean $val;;d1,345;;b1,0;;m0;;eboolean $val;;p">
</treenode>
<treenode node="stripQuery;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\URI.php;f8;853;2;861;;;;vpos;;v;;a;;r&#10;Definition&#10;    stripQuery(...$params)&#10;&#10;Description&#10;     Removes one or more query vars from the URI.&#10;&#10;Parameters:&#10;    array - ...$params;;d1,854;;b1,0;;m0;;earray;;p">
</treenode>
</treenode>
<treenode node="User;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f0;6;1;295;;;;vpos;;v;;aEntity;;c;;r;;d0,7;;b0,0;;m0;;e">
<treenode node="activate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f11;148;5;154;;;;vpos;;v;;a;;r&#10;Definition&#10;    activate()&#10;&#10;Description&#10;     Activate user.;;d4,149;;b1,0;;m0;;e">
</treenode>
<treenode node="ban;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f8;185;2;191;;;;vpos;;v;;a;;r&#10;Definition&#10;    ban(string $reason)&#10;&#10;Description&#10;     Bans a user.&#10;&#10;Parameters:&#10;    string $reason;;d1,186;;b1,0;;m0;;estring $reason;;p">
</treenode>
<treenode node="can;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f11;223;2;226;;;;vpos;;v;;abool;;r&#10;Definition&#10;    can(string $permission)&#10;&#10;Description&#10;     Determines whether the user has the appropriate permission, either directly, or through one of it&apos;s groups.&#10;&#10;Parameters:&#10;    string $permission;;d4,224;;b1,0;;m0;;estring $permission;;p">
</treenode>
<treenode node="deactivate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f11;161;5;166;;;;vpos;;v;;a;;r&#10;Definition&#10;    deactivate()&#10;&#10;Description&#10;     Unactivate user.;;d4,162;;b1,0;;m0;;e">
</treenode>
<treenode node="forcePasswordReset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f11;107;5;113;;;;vpos;;v;;aUser;;r&#10;Definition&#10;    forcePasswordReset()&#10;&#10;Description&#10;     Force a user to reset their password on next page refresh or login. Checked in the LocalAuthenticator&apos;s check() method.&#10;&#10;Parameters:&#10;    User $user;;d4,108;;b1,0;;m0;;e">
</treenode>
<treenode node="generateActivateHash;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f8;136;2;141;;;;vpos;;v;;a;;r&#10;Definition&#10;    generateActivateHash()&#10;&#10;Description&#10;     Generates a secure random hash to use for account activation.;;d1,137;;b1,0;;m0;;e">
</treenode>
<treenode node="generateResetHash;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f8;122;2;128;;;;vpos;;v;;a;;r&#10;Definition&#10;    generateResetHash()&#10;&#10;Description&#10;     Generates a secure hash to use for password reset purposes, saves it to the instance.;;d1,123;;b1,0;;m0;;e">
</treenode>
<treenode node="getPermissions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f11;238;5;251;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getPermissions()&#10;&#10;Description&#10;     Returns the user&apos;s permissions, formatted for simple checking:&#10;&#10;Return:&#10;   |mixed;;d4,239;;b1,0;;m0;;e">
</treenode>
<treenode node="getRoles;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f11;263;2;281;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getRoles()&#10;&#10;Description&#10;     Returns the user&apos;s roles, formatted for simple checking:&#10;&#10;Return:&#10;   |mixed;;d4,264;;b1,0;;m0;;e">
</treenode>
<treenode node="isActivated;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f11;173;5;176;;;;vpos;;v;;abool;;r&#10;Definition&#10;    isActivated(): bool&#10;&#10;Description&#10;     Checks to see if a user is active.;;d4,174;;b1,0;;m0;;e">
</treenode>
<treenode node="isBanned;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f8;210;2;213;;;;vpos;;v;;abool;;r&#10;Definition&#10;    isBanned(): bool&#10;&#10;Description&#10;     Checks to see if a user has been banned.;;d1,211;;b1,0;;m0;;e">
</treenode>
<treenode node="setPassword;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f8;53;2;96;;;;vpos;;v;;a;;r&#10;Definition&#10;    setPassword(string $password)&#10;&#10;Description&#10;     Automatically hashes the password when set.&#10;&#10;Parameters:&#10;    string $password;;d1,54;;b1,0;;m0;;estring $password;;p">
</treenode>
<treenode node="setPermissions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f11;291;2;294;;;;vpos;;v;;a;;r&#10;Definition&#10;    setPermissions(array $permissions = null)&#10;&#10;Description&#10;     Warns the developer it won&apos;t work, so they don&apos;t spend hours tracking stuff down.&#10;&#10;Parameters:&#10;    array $permissions;;d4,292;;b1,0;;m0;;earray $permissions;;p">
</treenode>
<treenode node="unBan;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Entities\User.php;f8;198;2;203;;;;vpos;;v;;a;;r&#10;Definition&#10;    unBan()&#10;&#10;Description&#10;     Removes a ban from a user.;;d1,199;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="UserActivator;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\UserActivator.php;f0;5;1;60;;;;vpos;;v;;a;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\UserActivator.php;f11;14;5;17;;;;vpos;;v;;a;;r;;d4,15;;b1,0;;m0;;econfig;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\UserActivator.php;f11;55;5;58;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    error()&#10;&#10;Description&#10;     Returns the current error.;;d4,56;;b1,0;;m0;;e">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Activators\UserActivator.php;f11;27;5;48;;;;vpos;;v;;abool;;r&#10;Definition&#10;    send(User $user = null): bool&#10;&#10;Description&#10;     Sends activation message to the user via specified class in `$requireActivation` setting in Config\Auth.php.&#10;&#10;Parameters:&#10;    User $user;;d4,28;;b1,0;;m0;;eUser $user;;p">
</treenode>
</treenode>
<treenode node="UserAgent;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f0;46;1;501;;;;vpos;;v;;a;;r&#10;Definition&#10;    class UserAgent&#10;&#10;Description&#10;     Abstraction for an HTTP user agent;;d0,47;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;134;2;143;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct(UserAgents $config = null)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    null|\Config\UserAgents $config;;d1,135;;b1,0;;m0;;enull|\Config\UserAgents $config;;p">
</treenode>
<treenode node="__toString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;496;2;499;;;;vpos;;v;;astring;;r&#10;Definition&#10;    __toString(): string&#10;&#10;Description&#10;     Outputs the original Agent String when cast as a string.;;d1,497;;b1,0;;m0;;e">
</treenode>
<treenode node="compileData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f11;368;2;379;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    compileData()&#10;&#10;Description&#10;     Compile the User Agent Data;;d1,369;;b2,0;;m0;;e">
</treenode>
<treenode node="getAgentString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;257;2;260;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getAgentString(): string&#10;&#10;Description&#10;     Agent String;;d1,258;;b1,0;;m0;;e">
</treenode>
<treenode node="getBrowser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;281;2;284;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getBrowser(): string&#10;&#10;Description&#10;     Get Browser Name;;d1,282;;b1,0;;m0;;e">
</treenode>
<treenode node="getMobile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;316;2;319;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getMobile(): string&#10;&#10;Description&#10;     Get the Mobile Device;;d1,317;;b1,0;;m0;;e">
</treenode>
<treenode node="getPlatform;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;269;2;272;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getPlatform(): string&#10;&#10;Description&#10;     Get Platform;;d1,270;;b1,0;;m0;;e">
</treenode>
<treenode node="getReferrer;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;328;2;331;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getReferrer(): string&#10;&#10;Description&#10;     Get the referrer;;d1,329;;b1,0;;m0;;e">
</treenode>
<treenode node="getRobot;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;305;2;308;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getRobot(): string&#10;&#10;Description&#10;     Get The Robot Name;;d1,306;;b1,0;;m0;;e">
</treenode>
<treenode node="getVersion;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;293;2;296;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getVersion(): string&#10;&#10;Description&#10;     Get the Browser Version;;d1,294;;b1,0;;m0;;e">
</treenode>
<treenode node="isBrowser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;154;2;169;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isBrowser(string $key = null): bool&#10;&#10;Description&#10;     Is Browser&#10;&#10;Parameters:&#10;    string $key;;d1,155;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="isMobile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;206;2;221;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isMobile(string $key = null): bool&#10;&#10;Description&#10;     Is Mobile&#10;&#10;Parameters:&#10;    string $key;;d1,207;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="isReferral;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;230;2;248;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isReferral(): bool&#10;&#10;Description&#10;     Is this a referral from another site?;;d1,231;;b1,0;;m0;;e">
</treenode>
<treenode node="isRobot;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;180;2;195;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isRobot(string $key = null): bool&#10;&#10;Description&#10;     Is Robot&#10;&#10;Parameters:&#10;    string $key;;d1,181;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f8;342;2;360;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    parse(string $string)&#10;&#10;Description&#10;     Parse a custom user-agent string&#10;&#10;Parameters:&#10;    string $string;;d1,343;;b1,0;;m0;;estring $string;;p">
</treenode>
<treenode node="setBrowser;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f11;415;2;434;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    setBrowser(): bool&#10;&#10;Description&#10;     Set the Browser;;d1,416;;b2,0;;m0;;e">
</treenode>
<treenode node="setMobile;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f11;470;2;487;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    setMobile(): bool&#10;&#10;Description&#10;     Set the Mobile Device;;d1,471;;b2,0;;m0;;e">
</treenode>
<treenode node="setPlatform;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f11;388;2;406;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    setPlatform(): bool&#10;&#10;Description&#10;     Set the Platform;;d1,389;;b2,0;;m0;;e">
</treenode>
<treenode node="setRobot;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\HTTP\UserAgent.php;f11;443;2;461;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    setRobot(): bool&#10;&#10;Description&#10;     Set the Robot;;d1,444;;b2,0;;m0;;e">
</treenode>
</treenode>
<treenode node="UserAgents;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\Config\UserAgents.php;f0;4;1;217;;;;vpos;;v;;aBaseConfig;;c;;r;;d0,5;;b0,0;;m0;;e">
</treenode>
<treenode node="UserFaker;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Test\Fakers\UserFaker.php;f0;6;1;23;;;;vpos;;v;;aUserModel;;c;;r;;d0,7;;b0,0;;m0;;e">
<treenode node="fake;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Test\Fakers\UserFaker.php;f8;15;2;22;;;;vpos;;v;;aUser;;r&#10;Definition&#10;    fake(Generator &amp;$faker): User&#10;&#10;Description&#10;     Faked data for Fabricator.&#10;&#10;Parameters:&#10;    Generator $faker;;d1,16;;b1,0;;m0;;eGenerator $faker;;p">
</treenode>
</treenode>
<treenode node="UserModel;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\UserModel.php;f0;6;1;122;;;;vpos;;v;;aModel;;c;;r;;d0,7;;b0,0;;m0;;e">
<treenode node="addToGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\UserModel.php;f14;111;5;120;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    addToGroup($data)&#10;&#10;Description&#10;     If a default role is assigned in Config\Auth, will add this user to that group. Will do nothing if the group cannot be found.&#10;&#10;Parameters:&#10;     $data;;d4,112;;b2,0;;m0;;e $data;;p">
</treenode>
<treenode node="clearGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\UserModel.php;f11;95;5;100;;;;vpos;;v;;a;;r&#10;Definition&#10;    clearGroup()&#10;&#10;Description&#10;     Clears the group to assign to newly created users.;;d4,96;;b1,0;;m0;;e">
</treenode>
<treenode node="logActivationAttempt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\UserModel.php;f11;64;5;72;;;;vpos;;v;;a;;r&#10;Definition&#10;    logActivationAttempt(string $token = null, string $ipAddress = null, string $userAgent = null)&#10;&#10;Description&#10;     Logs an activation attempt for posterity sake.&#10;&#10;Parameters:&#10;    string|null $token&#10;    string|null $ipAddress&#10;    string|null $userAgent;;d4,65;;b1,0;;m0;;estring|null $token;;pstring|null $ipAddress;;pstring|null $userAgent;;p">
</treenode>
<treenode node="logResetAttempt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\UserModel.php;f11;46;5;55;;;;vpos;;v;;a;;r&#10;Definition&#10;    logResetAttempt(string $email, string $token = null, string $ipAddress = null, string $userAgent = null)&#10;&#10;Description&#10;     Logs a password reset attempt for posterity sake.&#10;&#10;Parameters:&#10;    string $email&#10;    string|null $token&#10;    string|null $ipAddress&#10;    string|null $userAgent;;d4,47;;b1,0;;m0;;estring $email;;pstring|null $token;;pstring|null $ipAddress;;pstring|null $userAgent;;p">
</treenode>
<treenode node="withGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Models\UserModel.php;f11;81;5;88;;;;vpos;;v;;a;;r&#10;Definition&#10;    withGroup(string $groupName)&#10;&#10;Description&#10;     Sets the group to assign any users created.&#10;&#10;Parameters:&#10;    string $groupName;;d4,82;;b1,0;;m0;;estring $groupName;;p">
</treenode>
</treenode>
<treenode node="UserNotFoundException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\UserNotFoundException.php;f0;2;1;8;;;;vpos;;v;;aRuntimeException;;cExceptionInterface;;c;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="forUserID;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Exceptions\UserNotFoundException.php;f18;4;5;7;;;;vpos;;v;;a;;r;;d4,5;;b1,5;;m0;;eid;;p">
</treenode>
</treenode>
<treenode node="UserResetter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\UserResetter.php;f0;5;1;60;;;;vpos;;v;;a;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\UserResetter.php;f11;14;5;17;;;;vpos;;v;;a;;r;;d4,15;;b1,0;;m0;;econfig;;p">
</treenode>
<treenode node="error;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\UserResetter.php;f11;55;5;58;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    error()&#10;&#10;Description&#10;     Returns the current error.;;d4,56;;b1,0;;m0;;e">
</treenode>
<treenode node="send;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Resetters\UserResetter.php;f11;27;5;48;;;;vpos;;v;;abool;;r&#10;Definition&#10;    send(User $user = null): bool&#10;&#10;Description&#10;     Sends reset message to the user via specified class in `$activeResetter` setting in Config\Auth.php.&#10;&#10;Parameters:&#10;    User $user;;d4,28;;b1,0;;m0;;eUser $user;;p">
</treenode>
</treenode>
<treenode node="Utils;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f6;35;1;239;;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Utils.php;f0;47;1;72;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Utils.php;f0;46;1;78;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Utils.php;f0;47;1;79;;;;vpos;;v;;a;;r&#10;Definition&#10;    class Utils&#10;&#10;Description&#10;     A collection of utility methods. Should all be static methods with no dependencies.;;d0,36;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f12;40;5;42;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct()&#10;&#10;Description&#10;      codeCoverageIgnore;;d4,41;;b3,0;;m0;;e">
</treenode>
<treenode node="_backup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Database\SQLite3\Utils.php;f8;66;2;69;;O:\xampp\htdocs\2020\blog-4\system\Database\Postgre\Utils.php;f8;72;2;75;;O:\xampp\htdocs\2020\blog-4\system\Database\MySQLi\Utils.php;f8;73;2;76;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    _backup(array $prefs = null)&#10;&#10;Description&#10;     Platform dependent version of the backup function.&#10;&#10;Parameters:&#10;    array|null $prefs;;d1,67;;b1,0;;m0;;earray|null $prefs;;p">
</treenode>
<treenode node="composerGetExtras;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f18;69;5;109;;;;vpos;;v;;a;;r;;d4,70;;b1,5;;m0;;ekey;;p">
</treenode>
<treenode node="composerSkipFlags;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f18;114;5;125;;;;vpos;;v;;a;;r&#10;Definition&#10;    composerSkipFlags()&#10;&#10;Description&#10;      codeCoverageIgnore;;d4,115;;b1,5;;m0;;e">
</treenode>
<treenode node="getHumanReadableBytes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f18;51;5;62;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getHumanReadableBytes($value)&#10;&#10;Description&#10;     Turns a byte value into a human-readable representation.&#10;&#10;Parameters:&#10;    int $value - Amount of bytes&#10;&#10;Return:&#10;   Human readable value and unit;;d4,52;;b1,5;;m0;;eint $value;;p">
</treenode>
<treenode node="getTypeString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f18;231;5;238;;;;vpos;;v;;a;;r;;d4,232;;b1,5;;m0;;etype;;p">
</treenode>
<treenode node="isSequential;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f18;64;5;67;;;;vpos;;v;;a;;r;;d4,65;;b1,5;;m0;;earray;;p">
</treenode>
<treenode node="isTrace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f18;127;5;166;;;;vpos;;v;;a;;r;;d4,128;;b1,5;;m0;;etrace;;p">
</treenode>
<treenode node="normalizeAliases;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f18;179;5;213;;;;vpos;;v;;a;;r;;d4,180;;b1,5;;m0;;ealiases;;p">
</treenode>
<treenode node="traceFrameIsListed;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f18;168;5;177;;;;vpos;;v;;a;;r;;d4,169;;b1,5;;m0;;eframe;;pmatches;;p">
</treenode>
<treenode node="truncateString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Utils.php;f18;215;5;229;;;;vpos;;v;;a;;r;;d4,216;;b1,5;;m0;;einput;;plength;;pend;;pencoding;;p">
</treenode>
</treenode>
<treenode node="Validation;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f0;47;1;867;;O:\xampp\htdocs\2020\blog-4\app\Config\Validation.php;f0;2;1;36;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;118;2;125;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config, RendererInterface $view)&#10;&#10;Description&#10;     Validation constructor.&#10;&#10;Parameters:&#10;    \Config\Validation $config&#10;    RendererInterface $view;;d1,119;;b1,0;;m0;;e\Config\Validation $config;;pRendererInterface $view;;p">
</treenode>
<treenode node="check;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;207;2;215;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    check($value, string $rule, array $errors = []): bool&#10;&#10;Description&#10;     Check;s runs the validation process, returning true or false determining whether validation was successful or not.&#10;&#10;Parameters:&#10;    mixed $value - Value to validation&#10;    string $rule - Rule&#10;    string[] $errors - Errors&#10;&#10;Return:&#10;   True if valid, else false;;d1,208;;b1,0;;m0;;emixed $value;;pstring $rule;;pstring[] $errors;;p">
</treenode>
<treenode node="fillPlaceholders;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f11;662;2;696;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    fillPlaceholders(array $rules, array $data): array&#10;&#10;Description&#10;     Replace any placeholders within the rules with the values that match the &apos;key&apos; of any properties being set. For example, if we had the following $data array:&#10;&#10;Parameters:&#10;    array $rules&#10;    array $data;;d1,663;;b2,0;;m0;;earray $rules;;parray $data;;p">
</treenode>
<treenode node="getError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;725;2;734;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getError(string $field = null): string&#10;&#10;Description&#10;     Returns the error(s) for a specified $field (or empty string if not set).&#10;&#10;Parameters:&#10;    string $field - Field&#10;&#10;Return:&#10;   Error(s);;d1,726;;b1,0;;m0;;estring $field;;p">
</treenode>
<treenode node="getErrorMessage;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f11;799;2;818;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getErrorMessage(string $rule, string $field, string $label = null, string $param = null, string $value = null): string&#10;&#10;Description&#10;     Attempts to find the appropriate error message&#10;&#10;Parameters:&#10;    string $rule&#10;    string $field&#10;    string|null $label&#10;    string $param&#10;    string $value - The value that caused the validation to fail;;d1,800;;b2,0;;m0;;estring $rule;;pstring $field;;pstring|null $label;;pstring $param;;pstring $value;;p">
</treenode>
<treenode node="getErrors;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;753;2;767;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getErrors(): array&#10;&#10;Description&#10;     Returns the array of errors that were encountered during a run() call. The array should be in the following format:&#10;&#10;Return:&#10;   Excluded from code coverage because that it always run as cli;;d1,754;;b1,0;;m0;;e">
</treenode>
<treenode node="getRuleGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;496;2;509;;;;vpos;;v;;astring;;r&#10;Definition&#10;    getRuleGroup(string $group): array&#10;&#10;Description&#10;     Get rule group.&#10;&#10;Parameters:&#10;    string $group - Group&#10;&#10;Return:&#10;   [] Rule group;;d1,497;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="getRules;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;466;2;469;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getRules(): array&#10;&#10;Description&#10;     Returns all of the rules currently defined.;;d1,467;;b1,0;;m0;;e">
</treenode>
<treenode node="hasError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;710;2;713;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasError(string $field): bool&#10;&#10;Description&#10;     Checks to see if an error exists for the given field.&#10;&#10;Parameters:&#10;    string $field;;d1,711;;b1,0;;m0;;estring $field;;p">
</treenode>
<treenode node="hasRule;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;480;2;483;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    hasRule(string $field): bool&#10;&#10;Description&#10;     Checks to see if the rule for key $field has been set or not.&#10;&#10;Parameters:&#10;    string $field;;d1,481;;b1,0;;m0;;estring $field;;p">
</treenode>
<treenode node="listErrors;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;539;2;548;;;;vpos;;v;;astring;;r&#10;Definition&#10;    listErrors(string $template = &apos;list&apos;): string&#10;&#10;Description&#10;     Returns the rendered HTML of the errors as defined in $template.&#10;&#10;Parameters:&#10;    string $template;;d1,540;;b1,0;;m0;;estring $template;;p">
</treenode>
<treenode node="loadRuleGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;609;2;638;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    loadRuleGroup(string $group = null)&#10;&#10;Description&#10;     Loads custom rule groups (if set) into the current rules.&#10;&#10;Parameters:&#10;    string|null $group&#10;&#10;Return:&#10;   |ValidationException|null;;d1,610;;b1,0;;m0;;estring|null $group;;p">
</treenode>
<treenode node="loadRuleSets;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f11;582;2;593;;;;vpos;;v;;a;;r&#10;Definition&#10;    loadRuleSets()&#10;&#10;Description&#10;     Loads all of the rulesets classes that have been defined in the Config\Validation and stores them locally so we can use them.;;d1,583;;b2,0;;m0;;e">
</treenode>
<treenode node="processRules;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f11;233;2;353;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    processRules(string $field, string $label = null, $value, $rules = null, array $data): bool&#10;&#10;Description&#10;     Runs all of $rules against $field, until one fails, or all of them have been processed. If one fails, it adds the error to $this-&gt;errors and moves on to the next, so that we can collect all of the first errors.&#10;&#10;Parameters:&#10;    string $field&#10;    string|null $label&#10;    string|array $value - Value to be validated, can be a string or an array&#10;    array|null $rules&#10;    array $data - // All of the fields to check;;d1,234;;b2,0;;m0;;estring $field;;pstring|null $label;;pstring|array $value;;parray|null $rules;;parray $data;;p">
</treenode>
<treenode node="reset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;856;2;864;;;;vpos;;v;;a;;r&#10;Definition&#10;    reset(): ValidationInterface&#10;&#10;Description&#10;     Resets the class to a blank slate. Should be called whenever you need to process more than one array.;;d1,857;;b1,0;;m0;;e">
</treenode>
<treenode node="run;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;139;2;193;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    run(array $data = null, string $group = null, string $db_group = null): bool&#10;&#10;Description&#10;     Runs the validation process, returning true/false determining whether validation was successful or not.&#10;&#10;Parameters:&#10;    array $data - The array of data to validate&#10;    string $group - The pre-defined group of rules to apply&#10;    string $db_group - The database group to use;;d1,140;;b1,0;;m0;;earray $data;;pstring $group;;pstring $db_group;;p">
</treenode>
<treenode node="setError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;779;2;784;;;;vpos;;v;;a;;r&#10;Definition&#10;    setError(string $field, string $error): ValidationInterface&#10;&#10;Description&#10;     Sets the error for a specific field. Used by custom validation methods.&#10;&#10;Parameters:&#10;    string $field&#10;    string $error;;d1,780;;b1,0;;m0;;estring $field;;pstring $error;;p">
</treenode>
<treenode node="setRule;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;402;2;413;;;;vpos;;v;;a;;r&#10;Definition&#10;    setRule(string $field, string $label = null, string $rules, array $errors = [])&#10;&#10;Description&#10;     Sets an individual rule and custom error messages for a single field.&#10;&#10;Parameters:&#10;    string $field&#10;    string|null $label&#10;    string $rules&#10;    array $errors;;d1,403;;b1,0;;m0;;estring $field;;pstring|null $label;;pstring $rules;;parray $errors;;p">
</treenode>
<treenode node="setRuleGroup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;520;2;530;;;;vpos;;v;;a;;r&#10;Definition&#10;    setRuleGroup(string $group)&#10;&#10;Description&#10;     Set rule group.&#10;&#10;Parameters:&#10;    string $group - Group;;d1,521;;b1,0;;m0;;estring $group;;p">
</treenode>
<treenode node="setRules;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;438;2;457;;;;vpos;;v;;a;;r&#10;Definition&#10;    setRules(array $rules, array $errors = []): ValidationInterface&#10;&#10;Description&#10;     Stores the rules that should be used to validate the items. Rules should be an array formatted like:&#10;&#10;Parameters:&#10;    array $rules&#10;    array $errors - // An array of custom error messages;;d1,439;;b1,0;;m0;;earray $rules;;parray $errors;;p">
</treenode>
<treenode node="showError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;560;2;574;;;;vpos;;v;;astring;;r&#10;Definition&#10;    showError(string $field, string $template = &apos;single&apos;): string&#10;&#10;Description&#10;     Displays a single error in formatted HTML as defined in the $template view.&#10;&#10;Parameters:&#10;    string $field&#10;    string $template;;d1,561;;b1,0;;m0;;estring $field;;pstring $template;;p">
</treenode>
<treenode node="splitRules;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f11;827;2;843;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    splitRules(string $rules): array&#10;&#10;Description&#10;     Split rules string by pipe operator.&#10;&#10;Parameters:&#10;    string $rules;;d1,828;;b2,0;;m0;;estring $rules;;p">
</treenode>
<treenode node="withRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Validation.php;f8;365;2;377;;;;vpos;;v;;a;;r&#10;Definition&#10;    withRequest(RequestInterface $request): ValidationInterface&#10;&#10;Description&#10;     Takes a Request object and grabs the input data to use from its array values.&#10;&#10;Parameters:&#10;    \CodeIgniter\HTTP\RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request;;d1,366;;b1,0;;m0;;e\CodeIgniter\HTTP\RequestInterface|\CodeIgniter\HTTP\IncomingRequest $request;;p">
</treenode>
</treenode>
<treenode node="ValidationException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Exceptions\ValidationException.php;f0;5;1;31;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="forGroupNotArray;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Exceptions\ValidationException.php;f15;17;2;20;;;;vpos;;v;;a;;r;;d1,18;;b1,5;;m0;;egroup;;p">
</treenode>
<treenode node="forGroupNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Exceptions\ValidationException.php;f15;12;2;15;;;;vpos;;v;;a;;r;;d1,13;;b1,5;;m0;;egroup;;p">
</treenode>
<treenode node="forInvalidTemplate;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Exceptions\ValidationException.php;f15;22;2;25;;;;vpos;;v;;a;;r;;d1,23;;b1,5;;m0;;etemplate;;p">
</treenode>
<treenode node="forNoRuleSets;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Exceptions\ValidationException.php;f15;27;2;30;;;;vpos;;v;;a;;r;;d1,28;;b1,5;;m0;;e">
</treenode>
<treenode node="forRuleNotFound;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Validation\Exceptions\ValidationException.php;f15;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,5;;m0;;erule;;p">
</treenode>
</treenode>
<treenode node="ValidationRules;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\ValidationRules.php;f0;15;1;106;;;;vpos;;v;;a;;r&#10;Definition&#10;    class ValidationRules&#10;&#10;Description&#10;     Class ValidationRules;;d0,16;;b0,0;;m0;;e">
<treenode node="buildUserFromData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\ValidationRules.php;f14;83;5;90;;;;vpos;;v;;a;;r&#10;Definition&#10;    buildUserFromData(array $data = [])&#10;&#10;Description&#10;     Builds a new user instance from assigned data..&#10;&#10;Parameters:&#10;    array $data - Assigned data;;d4,84;;b2,0;;m0;;earray $data;;p">
</treenode>
<treenode node="buildUserFromRequest;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\ValidationRules.php;f14;67;5;74;;;;vpos;;v;;a;;r&#10;Definition&#10;    buildUserFromRequest()&#10;&#10;Description&#10;     Builds a new user instance from the global request.;;d4,68;;b2,0;;m0;;e">
</treenode>
<treenode node="prepareValidFields;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\ValidationRules.php;f14;97;5;104;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    prepareValidFields(): array&#10;&#10;Description&#10;     Prepare valid user fields;;d4,98;;b2,0;;m0;;e">
</treenode>
<treenode node="strong_password;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Authentication\Passwords\ValidationRules.php;f11;32;5;60;;;;vpos;;v;;abool;;r&#10;Definition&#10;    strong_password(string $value, string &amp;$error1 = null, array $data = [], string &amp;$error2 = null)&#10;&#10;Description&#10;     A validation helper method to check if the passed in password will pass all of the validators currently defined.&#10;&#10;Parameters:&#10;    string $value - Field value&#10;    string $error1 - Error that will be returned (for call without validation data array)&#10;    array $data - Validation data array&#10;    string $error2 - Error that will be returned (for call with validation data array);;d4,33;;b1,0;;m0;;estring $value;;pstring $error1;;parray $data;;pstring $error2;;p">
</treenode>
</treenode>
<treenode node="View;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f0;50;1;564;;O:\xampp\htdocs\2020\blog-4\system\Config\View.php;f0;44;1;106;;O:\xampp\htdocs\2020\blog-4\app\Config\View.php;f0;2;1;33;;;;vpos;;v;;aRendererInterface;;c;;r&#10;Definition&#10;    class View implements RendererInterface&#10;&#10;Description&#10;     Class View;;d0,51;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;163;2;171;;O:\xampp\htdocs\2020\blog-4\system\Config\View.php;f8;98;2;104;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config, string $viewPath = null, $loader = null, bool $debug = null, LoggerInterface $logger = null)&#10;&#10;Description&#10;     Constructor&#10;&#10;Parameters:&#10;    \Config\View $config&#10;    string $viewPath&#10;    mixed $loader&#10;    boolean $debug&#10;    LoggerInterface $logger;;d1,164;;b1,0;;m0;;e\Config\View $config;;pstring $viewPath;;pmixed $loader;;pboolean $debug;;pLoggerInterface $logger;;p">
</treenode>
<treenode node="endSection;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;469;2;486;;;;vpos;;v;;a;;r&#10;Definition&#10;    endSection()&#10;&#10;Description&#10;     ;;d1,470;;b1,0;;m0;;e">
</treenode>
<treenode node="excerpt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;354;2;357;;;;vpos;;v;;astring;;r&#10;Definition&#10;    excerpt(string $string, int $length = 20): string&#10;&#10;Description&#10;     Extract first bit of a long string and add ellipsis&#10;&#10;Parameters:&#10;    string $string&#10;    integer $length;;d1,355;;b1,0;;m0;;estring $string;;pinteger $length;;p">
</treenode>
<treenode node="extend;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;443;2;446;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    extend(string $layout)&#10;&#10;Description&#10;     Specifies that the current view should extend an existing layout.&#10;&#10;Parameters:&#10;    string $layout;;d1,444;;b1,0;;m0;;estring $layout;;p">
</treenode>
<treenode node="getData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;429;2;432;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getData(): array&#10;&#10;Description&#10;     Returns the current data that will be displayed in the view.;;d1,430;;b1,0;;m0;;e">
</treenode>
<treenode node="getPerformanceData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;535;2;538;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getPerformanceData(): array&#10;&#10;Description&#10;     Returns the performance data that might have been collected during the execution. Used primarily in the Debug Toolbar.;;d1,536;;b1,0;;m0;;e">
</treenode>
<treenode node="include;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;522;2;525;;;;vpos;;v;;astring;;r&#10;Definition&#10;    include(string $view, array $options = null, $saveData = true): string&#10;&#10;Description&#10;     Used within layout views to include additional views.&#10;&#10;Parameters:&#10;    string $view&#10;    array|null $options&#10;    null $saveData;;d1,523;;b1,0;;m0;;estring $view;;parray|null $options;;pnull $saveData;;p">
</treenode>
<treenode node="logPerformance;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f11;549;2;561;;;;vpos;;v;;a;;r&#10;Definition&#10;    logPerformance(float $start, float $end, string $view)&#10;&#10;Description&#10;     Logs performance data for rendering a view.&#10;&#10;Parameters:&#10;    float $start&#10;    float $end&#10;    string $view;;d1,550;;b2,0;;m0;;efloat $start;;pfloat $end;;pstring $view;;p">
</treenode>
<treenode node="render;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;189;2;292;;;;vpos;;v;;astring;;r&#10;Definition&#10;    render(string $view, array $options = null, bool $saveData = null): string&#10;&#10;Description&#10;     Builds the output based upon a file name and any data that has already been set.&#10;&#10;Parameters:&#10;    string $view&#10;    array $options&#10;    boolean $saveData;;d1,190;;b1,0;;m0;;estring $view;;parray $options;;pboolean $saveData;;p">
</treenode>
<treenode node="renderSection;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;495;2;509;;;;vpos;;v;;a;;r&#10;Definition&#10;    renderSection(string $sectionName)&#10;&#10;Description&#10;     Renders a section&apos;s contents.&#10;&#10;Parameters:&#10;    string $sectionName;;d1,496;;b1,0;;m0;;estring $sectionName;;p">
</treenode>
<treenode node="renderString;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;311;2;343;;;;vpos;;v;;astring;;r&#10;Definition&#10;    renderString(string $view, array $options = null, bool $saveData = null): string&#10;&#10;Description&#10;     Builds the output based upon a string and any data that has already been set. Cache does not apply, because there is no &quot;key&quot;.&#10;&#10;Parameters:&#10;    string $view - The view contents&#10;    array $options - Reserved for 3rd-party uses since&#10;    boolean $saveData - If true, will save data for use with any other calls,;;d1,312;;b1,0;;m0;;estring $view;;parray $options;;pboolean $saveData;;p">
</treenode>
<treenode node="resetData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;415;2;420;;;;vpos;;v;;aRendererInterface;;r&#10;Definition&#10;    resetData(): RendererInterface&#10;&#10;Description&#10;     Removes all of the view data from the system.;;d1,416;;b1,0;;m0;;e">
</treenode>
<treenode node="section;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;455;2;460;;;;vpos;;v;;a;;r&#10;Definition&#10;    section(string $name)&#10;&#10;Description&#10;     Starts holds content for a section within the layout.&#10;&#10;Parameters:&#10;    string $name;;d1,456;;b1,0;;m0;;estring $name;;p">
</treenode>
<treenode node="setData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;370;2;381;;;;vpos;;v;;aRendererInterface;;r&#10;Definition&#10;    setData(array $data = [], string $context = null): RendererInterface&#10;&#10;Description&#10;     Sets several pieces of view data at once.&#10;&#10;Parameters:&#10;    array $data&#10;    string $context - The context to escape it for: html, css, js, url;;d1,371;;b1,0;;m0;;earray $data;;pstring $context;;p">
</treenode>
<treenode node="setVar;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\View.php;f8;395;2;406;;;;vpos;;v;;aRendererInterface;;r&#10;Definition&#10;    setVar(string $name, $value = null, string $context = null): RendererInterface&#10;&#10;Description&#10;     Sets a single piece of view data.&#10;&#10;Parameters:&#10;    string $name&#10;    mixed $value&#10;    string $context - The context to escape it for: html, css, js, url;;d1,396;;b1,0;;m0;;estring $name;;pmixed $value;;pstring $context;;p">
</treenode>
</treenode>
<treenode node="ViewException;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\View\Exceptions\ViewException.php;f0;5;1;36;;;;vpos;;v;;aFrameworkException;;cExceptionInterface;;c;;r;;d0,6;;b0,0;;m0;;e">
<treenode node="forInvalidCellClass;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Exceptions\ViewException.php;f15;27;2;30;;;;vpos;;v;;a;;r;;d1,28;;b1,5;;m0;;eclass;;p">
</treenode>
<treenode node="forInvalidCellMethod;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Exceptions\ViewException.php;f15;7;2;10;;;;vpos;;v;;a;;r;;d1,8;;b1,5;;m0;;eclass;;pmethod;;p">
</treenode>
<treenode node="forInvalidCellParameter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Exceptions\ViewException.php;f15;17;2;20;;;;vpos;;v;;a;;r;;d1,18;;b1,5;;m0;;ekey;;p">
</treenode>
<treenode node="forMissingCellParameters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Exceptions\ViewException.php;f15;12;2;15;;;;vpos;;v;;a;;r;;d1,13;;b1,5;;m0;;eclass;;pmethod;;p">
</treenode>
<treenode node="forNoCellClass;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Exceptions\ViewException.php;f15;22;2;25;;;;vpos;;v;;a;;r;;d1,23;;b1,5;;m0;;e">
</treenode>
<treenode node="forTagSyntaxError;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\View\Exceptions\ViewException.php;f15;32;2;35;;;;vpos;;v;;a;;r;;d1,33;;b1,5;;m0;;eoutput;;p">
</treenode>
</treenode>
<treenode node="Views;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Views.php;f0;47;1;191;;;;vpos;;v;;aBaseCollector;;c;;r&#10;Definition&#10;    class Views extends BaseCollector&#10;&#10;Description&#10;     Views collector;;d0,48;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Views.php;f8;109;2;112;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct()&#10;&#10;Description&#10;     Constructor.;;d1,110;;b1,0;;m0;;e">
</treenode>
<treenode node="formatTimelineData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Views.php;f11;122;2;139;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    formatTimelineData(): array&#10;&#10;Description&#10;     Child classes should implement this to return the timeline data formatted for correct usage.;;d1,123;;b2,0;;m0;;e">
</treenode>
<treenode node="getBadgeValue;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Views.php;f8;175;2;178;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    getBadgeValue(): int&#10;&#10;Description&#10;     Returns a count of all views.;;d1,176;;b1,0;;m0;;e">
</treenode>
<treenode node="getVarData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Views.php;f8;161;2;166;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    getVarData(): array&#10;&#10;Description&#10;     Gets a collection of data that should be shown in the &apos;Vars&apos; tab. The format is an array of sections, each with their own array of key/value pairs:;;d1,162;;b1,0;;m0;;e">
</treenode>
<treenode node="icon;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Toolbar\Collectors\Views.php;f8;187;2;190;;;;vpos;;v;;astring;;r&#10;Definition&#10;    icon(): string&#10;&#10;Description&#10;     Display the icon.;;d1,188;;b1,0;;m0;;e">
</treenode>
</treenode>
<treenode node="WincacheHandler;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f0;48;1;262;;;;vpos;;v;;aCacheInterface;;c;;r&#10;Definition&#10;    class WincacheHandler implements CacheInterface&#10;&#10;Description&#10;     Cache handler for WinCache from Microsoft &amp; IIS. Windows-only, so not testable on travis-ci. Unusable methods flagged for code coverage ignoring.;;d0,49;;b0,0;;m0;;e">
<treenode node="__construct;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;65;2;68;;;;vpos;;v;;a;;r&#10;Definition&#10;    __construct($config)&#10;&#10;Description&#10;     Constructor.&#10;&#10;Parameters:&#10;    \Config\Cache $config;;d1,66;;b1,0;;m0;;e\Config\Cache $config;;p">
</treenode>
<treenode node="clean;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;195;2;198;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    clean()&#10;&#10;Description&#10;     Will delete all items in the entire cache.;;d1,196;;b1,0;;m0;;e">
</treenode>
<treenode node="decrement;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;176;2;184;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    decrement(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic decrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,177;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="delete;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;135;2;140;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    delete(string $key)&#10;&#10;Description&#10;     Deletes a specific item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,136;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="get;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;93;2;102;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get(string $key)&#10;&#10;Description&#10;     Attempts to fetch an item from the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,94;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="getCacheInfo;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;212;2;215;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getCacheInfo()&#10;&#10;Description&#10;     Returns information on the entire cache.;;d1,213;;b1,0;;m0;;e">
</treenode>
<treenode node="getMetaData;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;228;2;247;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    getMetaData(string $key)&#10;&#10;Description&#10;     Returns detailed information about the specific item in the cache.&#10;&#10;Parameters:&#10;    string $key - Cache item name;;d1,229;;b1,0;;m0;;estring $key;;p">
</treenode>
<treenode node="increment;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;154;2;162;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    increment(string $key, int $offset = 1)&#10;&#10;Description&#10;     Performs atomic incrementation of a raw stored value.&#10;&#10;Parameters:&#10;    string $key - Cache ID&#10;    integer $offset - Step/value to increase by;;d1,155;;b1,0;;m0;;estring $key;;pinteger $offset;;p">
</treenode>
<treenode node="initialize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;77;2;80;;;;vpos;;v;;a;;r&#10;Definition&#10;    initialize()&#10;&#10;Description&#10;     Takes care of any handler-specific setup that must be done.;;d1,78;;b1,0;;m0;;e">
</treenode>
<treenode node="isSupported;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;256;2;259;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    isSupported(): bool&#10;&#10;Description&#10;     Determines if the driver is supported on this system.;;d1,257;;b1,0;;m0;;e">
</treenode>
<treenode node="save;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Cache\Handlers\WincacheHandler.php;f8;117;2;122;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    save(string $key, $value, int $ttl = 60)&#10;&#10;Description&#10;     Saves an item to the cache store.&#10;&#10;Parameters:&#10;    string $key - Cache item name&#10;    mixed $value - The data to save&#10;    integer $ttl - Time To Live, in seconds (default 60);;d1,118;;b1,0;;m0;;estring $key;;pmixed $value;;pinteger $ttl;;p">
</treenode>
</treenode>
<treenode node="XMLFormatter;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\Format\XMLFormatter.php;f0;47;1;118;;;;vpos;;v;;aFormatterInterface;;c;;r&#10;Definition&#10;    class XMLFormatter implements FormatterInterface&#10;&#10;Description&#10;     XML data formatter;;d0,48;;b0,0;;m0;;e">
<treenode node="arrayToXML;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Format\XMLFormatter.php;f11;91;2;115;;;;vpos;;v;;a;;r&#10;Definition&#10;    arrayToXML(array $data, &amp;$output)&#10;&#10;Description&#10;     A recursive method to convert an array into a valid XML string.&#10;&#10;Parameters:&#10;    array $data&#10;    \SimpleXMLElement $output;;d1,92;;b2,0;;m0;;earray $data;;p\SimpleXMLElement $output;;p">
</treenode>
<treenode node="format;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Format\XMLFormatter.php;f8;57;2;77;;;;vpos;;v;;astring;;r&#10;Definition&#10;    format($data)&#10;&#10;Description&#10;     Takes the given data and formats it.&#10;&#10;Parameters:&#10;     $data&#10;&#10;Return:&#10;   |boolean (XML string | false);;d1,58;;b1,0;;m0;;e $data;;p">
</treenode>
</treenode>
<treenode node="XmlPlugin;PHP:Class Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\XmlPlugin.php;f0;32;1;149;;;;vpos;;v;;aPlugin;;c;;r;;d0,33;;b0,0;;m0;;e">
<treenode node="getTriggers;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\XmlPlugin.php;f11;50;5;53;;;;vpos;;v;;a;;r;;d4,51;;b1,0;;m0;;e">
</treenode>
<treenode node="getTypes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\XmlPlugin.php;f11;45;5;48;;;;vpos;;v;;a;;r;;d4,46;;b1,0;;m0;;e">
</treenode>
<treenode node="parse;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\XmlPlugin.php;f11;55;5;82;;;;vpos;;v;;a;;r;;d4,56;;b1,0;;m0;;evar;;po;;ptrigger;;p">
</treenode>
<treenode node="xmlToDOMDocument;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\XmlPlugin.php;f21;128;5;148;;;;vpos;;v;;anull;;r&#10;Definition&#10;    xmlToDOMDocument($var, $parent_path)&#10;&#10;Description&#10;     Get the DOMDocument info.&#10;&#10;Parameters:&#10;    string $var - The XML string&#10;    null|string $parent_path - The path to the parent, in this case the XML string&#10;&#10;Return:&#10;   |array The root element DOMNode, the access path, and the root element name;;d4,129;;b2,5;;m0;;estring $var;;pnull|string $parent_path;;p">
</treenode>
<treenode node="xmlToSimpleXML;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\Parser\XmlPlugin.php;f21;84;5;111;;;;vpos;;v;;a;;r;;d4,85;;b2,5;;m0;;evar;;pparent_path;;p">
</treenode>
</treenode>
<treenode node="_array_search_dot;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\array_helper.php;f1;74;2;122;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    _array_search_dot(array $indexes, array $array)&#10;&#10;Description&#10;     Used by dot_array_search to recursively search the array with wildcards.&#10;&#10;Parameters:&#10;    array $indexes&#10;    array $array&#10;&#10;Return:&#10;   |null;;d1,75;;b0,0;;m0;;earray $indexes;;parray $array;;p">
</treenode>
<treenode node="_has_protocol;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;705;2;708;;;;vpos;;v;;afalse;;r&#10;Definition&#10;    _has_protocol(string $url)&#10;&#10;Description&#10;     Test the protocol of a URI.&#10;&#10;Parameters:&#10;    string $url&#10;&#10;Return:&#10;   |integer;;d1,706;;b0,0;;m0;;estring $url;;p">
</treenode>
<treenode node="_list;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;97;2;131;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _list(string $type = &apos;ul&apos;, $list = [], $attributes = &apos;&apos;, int $depth = 0): string&#10;&#10;Description&#10;     Generates the list&#10;&#10;Parameters:&#10;    string $type&#10;    mixed $list&#10;    mixed $attributes - string, array, object&#10;    integer $depth;;d1,98;;b0,0;;m0;;estring $type;;pmixed $list;;pmixed $attributes;;pinteger $depth;;p">
</treenode>
<treenode node="_media;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;479;2;513;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _media(string $name, array $types = [], string $unsupportedMessage = &apos;&apos;, string $attributes = &apos;&apos;, array $tracks = []): string&#10;&#10;Description&#10;     Generate media based tag&#10;&#10;Parameters:&#10;    string $name&#10;    array $types&#10;    string $unsupportedMessage - The message to display if the media tag is not supported by the browser&#10;    string $attributes&#10;    array $tracks;;d1,480;;b0,0;;m0;;estring $name;;parray $types;;pstring $unsupportedMessage;;pstring $attributes;;parray $tracks;;p">
</treenode>
<treenode node="_space_indent;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;722;2;725;;;;vpos;;v;;astring;;r&#10;Definition&#10;    _space_indent(int $depth = 2): string&#10;&#10;Description&#10;     Provide space indenting.&#10;&#10;Parameters:&#10;    integer $depth;;d1,723;;b0,0;;m0;;einteger $depth;;p">
</treenode>
<treenode node="alternator;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;800;2;814;;;;vpos;;v;;astring;;r&#10;Definition&#10;    alternator(): string&#10;&#10;Description&#10;     Alternator&#10;&#10;Parameters:&#10;    string - (as many parameters as needed);;d1,801;;b0,0;;m0;;e">
</treenode>
<treenode node="anchor;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;261;2;281;;;;vpos;;v;;astring;;r&#10;Definition&#10;    anchor($uri = &apos;&apos;, string $title = &apos;&apos;, $attributes = &apos;&apos;, \Config\App $altConfig = null): string&#10;&#10;Description&#10;     Anchor Link&#10;&#10;Parameters:&#10;    mixed $uri - URI string or array of URI segments&#10;    string $title - The link title&#10;    mixed $attributes - Any attributes&#10;    \Config\App|null $altConfig - Alternate configuration to use;;d1,262;;b0,0;;m0;;emixed $uri;;pstring $title;;pmixed $attributes;;p\Config\App|null $altConfig;;p">
</treenode>
<treenode node="anchor_popup;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;301;2;347;;;;vpos;;v;;astring;;r&#10;Definition&#10;    anchor_popup($uri = &apos;&apos;, string $title = &apos;&apos;, $attributes = false, \Config\App $altConfig = null): string&#10;&#10;Description&#10;     Anchor Link - Pop-up version&#10;&#10;Parameters:&#10;    string $uri - the URL&#10;    string $title - the link title&#10;    mixed $attributes - any attributes&#10;    \Config\App|null $altConfig - Alternate configuration to use;;d1,302;;b0,0;;m0;;estring $uri;;pstring $title;;pmixed $attributes;;p\Config\App|null $altConfig;;p">
</treenode>
<treenode node="app_timezone;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;76;2;81;;;;vpos;;v;;astring;;r&#10;Definition&#10;    app_timezone(): string&#10;&#10;Description&#10;     Returns the timezone the application has been set to display dates in. This might be different than the timezone set at the server level, as you often want to stores dates in UTC and convert them on the fly for the user.;;d1,77;;b0,0;;m0;;e">
</treenode>
<treenode node="ascii_to_entities;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;137;2;184;;;;vpos;;v;;astring;;r&#10;Definition&#10;    ascii_to_entities(string $str): string&#10;&#10;Description&#10;     High ASCII to Entities&#10;&#10;Parameters:&#10;    string $str;;d1,138;;b0,0;;m0;;estring $str;;p">
</treenode>
<treenode node="audio;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;418;2;461;;;;vpos;;v;;astring;;r&#10;Definition&#10;    audio($src, string $unsupportedMessage = &apos;&apos;, string $attributes = &apos;&apos;, array $tracks = [], bool $indexPage = false): string&#10;&#10;Description&#10;     Audio&#10;&#10;Parameters:&#10;    mixed $src - Either a source string or an array of sources&#10;    string $unsupportedMessage - The message to display if the media tag is not supported by the browser&#10;    string $attributes - HTML attributes&#10;    array $tracks&#10;    boolean $indexPage;;d1,419;;b0,0;;m0;;emixed $src;;pstring $unsupportedMessage;;pstring $attributes;;parray $tracks;;pboolean $indexPage;;p">
</treenode>
<treenode node="auto_link;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;499;2;535;;;;vpos;;v;;astring;;r&#10;Definition&#10;    auto_link(string $str, string $type = &apos;both&apos;, bool $popup = false): string&#10;&#10;Description&#10;     Auto-linker&#10;&#10;Parameters:&#10;    string $str - the string&#10;    string $type - the type: email, url, or both&#10;    boolean $popup - whether to create pop-up links;;d1,500;;b0,0;;m0;;estring $str;;pstring $type;;pboolean $popup;;p">
</treenode>
<treenode node="base_url;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;101;2;143;;;;vpos;;v;;astring;;r&#10;Definition&#10;    base_url($uri = &apos;&apos;, string $protocol = null): string&#10;&#10;Description&#10;     Return the base URL to use in views&#10;&#10;Parameters:&#10;    mixed $uri - URI string or array of URI segments&#10;    string $protocol;;d1,102;;b0,0;;m0;;emixed $uri;;pstring $protocol;;p">
</treenode>
<treenode node="cache;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;99;2;111;;;;vpos;;v;;a;;r&#10;Definition&#10;    cache(string $key = null)&#10;&#10;Description&#10;     A convenience method that provides access to the Cache object. If no parameter is provided, will return the object, otherwise, will attempt to return the cached value.&#10;&#10;Parameters:&#10;    string|null $key;;d1,100;;b0,0;;m0;;estring|null $key;;p">
</treenode>
<treenode node="camelize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;201;2;204;;;;vpos;;v;;astring;;r&#10;Definition&#10;    camelize(string $string): string&#10;&#10;Description&#10;     Camelize&#10;&#10;Parameters:&#10;    string $string - Input string;;d1,202;;b0,0;;m0;;estring $string;;p">
</treenode>
<treenode node="character_limiter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;94;2;121;;;;vpos;;v;;astring;;r&#10;Definition&#10;    character_limiter(string $str, int $n = 500, string $end_char = &apos;&amp;#8230;s&apos;): string&#10;&#10;Description&#10;     Character Limiter&#10;&#10;Parameters:&#10;    string $str&#10;    integer $n&#10;    string $end_char - the end character;;d1,95;;b0,0;;m0;;estring $str;;pinteger $n;;pstring $end_char;;p">
</treenode>
<treenode node="command;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;127;2;139;;;;vpos;;v;;afalse;;r&#10;Definition&#10;    command(string $command)&#10;&#10;Description&#10;     Runs a single command. Input expected in a single string as would be used on the command line itself:&#10;&#10;Parameters:&#10;    string $command&#10;&#10;Return:&#10;   |string;;d1,128;;b0,0;;m0;;estring $command;;p">
</treenode>
<treenode node="config;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;152;2;155;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    config(string $name, bool $getShared = true)&#10;&#10;Description&#10;     More simple way of getting config instances&#10;&#10;Parameters:&#10;    string $name&#10;    boolean $getShared;;d1,153;;b0,0;;m0;;estring $name;;pboolean $getShared;;p">
</treenode>
<treenode node="convert_accented_characters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;423;2;445;;;;vpos;;v;;astring;;r&#10;Definition&#10;    convert_accented_characters(string $str): string&#10;&#10;Description&#10;     Convert Accented Foreign Characters to ASCII&#10;&#10;Parameters:&#10;    string $str - Input string;;d1,424;;b0,0;;m0;;estring $str;;p">
</treenode>
<treenode node="counted;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;180;2;185;;;;vpos;;v;;astring;;r&#10;Definition&#10;    counted(int $count, string $string): string&#10;&#10;Description&#10;     Counted&#10;&#10;Parameters:&#10;    integer $count - Number of items&#10;    string $string - Input string;;d1,181;;b0,0;;m0;;einteger $count;;pstring $string;;p">
</treenode>
<treenode node="csrf_field;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;218;2;221;;;;vpos;;v;;astring;;r&#10;Definition&#10;    csrf_field(string $id = null): string&#10;&#10;Description&#10;     Generates a hidden input field for use within manually generated forms.&#10;&#10;Parameters:&#10;    string|null $id;;d1,219;;b0,0;;m0;;estring|null $id;;p">
</treenode>
<treenode node="csrf_hash;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;201;2;206;;;;vpos;;v;;astring;;r&#10;Definition&#10;    csrf_hash(): string&#10;&#10;Description&#10;     Returns the current hash value for the CSRF protection. Can be used in Views when building hidden inputs manually, or used in javascript vars for API usage.;;d1,202;;b0,0;;m0;;e">
</treenode>
<treenode node="csrf_header;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;184;2;189;;;;vpos;;v;;astring;;r&#10;Definition&#10;    csrf_header(): string&#10;&#10;Description&#10;     Returns the CSRF header name. Can be used in Views by adding it to the meta tag or used in javascript to define a header name when using APIs.;;d1,185;;b0,0;;m0;;e">
</treenode>
<treenode node="csrf_meta;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;233;2;236;;;;vpos;;v;;astring;;r&#10;Definition&#10;    csrf_meta(string $id = null): string&#10;&#10;Description&#10;     Generates a meta tag for use within javascript calls.&#10;&#10;Parameters:&#10;    string|null $id;;d1,234;;b0,0;;m0;;estring|null $id;;p">
</treenode>
<treenode node="csrf_token;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;167;2;172;;;;vpos;;v;;astring;;r&#10;Definition&#10;    csrf_token(): string&#10;&#10;Description&#10;     Returns the CSRF token name. Can be used in Views when building hidden inputs manually, or used in javascript vars when using APIs.;;d1,168;;b0,0;;m0;;e">
</treenode>
<treenode node="current_url;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;160;2;177;;;;vpos;;v;;astring;;r&#10;Definition&#10;    current_url(bool $returnObject = false)&#10;&#10;Description&#10;     Current URL&#10;&#10;Parameters:&#10;    boolean $returnObject - True to return an object instead of a strong&#10;&#10;Return:&#10;   |\CodeIgniter\HTTP\URI;;d1,161;;b0,0;;m0;;eboolean $returnObject;;p">
</treenode>
<treenode node="d;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\init_helpers.php;f4;33;5;38;;;;vpos;;v;;aint;;r&#10;Definition&#10;    d()&#10;&#10;Description&#10;     Alias of Kint::dump().&#10;&#10;Return:&#10;   |string;;d4,34;;b0,0;;m0;;e">
</treenode>
<treenode node="dasherize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;349;2;352;;;;vpos;;v;;astring;;r&#10;Definition&#10;    dasherize(string $string): string&#10;&#10;Description&#10;     Replaces underscores with dashes in the string.&#10;&#10;Parameters:&#10;    string $string - Input string;;d1,350;;b0,0;;m0;;estring $string;;p">
</treenode>
<treenode node="db_connect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;260;2;263;;;;vpos;;v;;a;;r&#10;Definition&#10;    db_connect($db = null, bool $getShared = true)&#10;&#10;Description&#10;     Grabs a database connection and returns it to the user.&#10;&#10;Parameters:&#10;    \CodeIgniter\Database\ConnectionInterface|array|string $db&#10;    boolean $getShared;;d1,261;;b0,0;;m0;;e\CodeIgniter\Database\ConnectionInterface|array|string $db;;pboolean $getShared;;p">
</treenode>
<treenode node="dd;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;275;2;282;;;;vpos;;v;;a;;r&#10;Definition&#10;    dd(...$vars)&#10;&#10;Description&#10;     Prints a Kint debug report and exits.&#10;&#10;Parameters:&#10;    array - ...$vars;;d1,276;;b0,0;;m0;;earray;;p">
</treenode>
<treenode node="delete_cookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\cookie_helper.php;f1;118;2;121;;;;vpos;;v;;avoid;;r&#10;Definition&#10;    delete_cookie($name, string $domain = &apos;&apos;, string $path = &apos;/&apos;, string $prefix = &apos;&apos;)&#10;&#10;Description&#10;     Delete a COOKIE&#10;&#10;Parameters:&#10;    mixed $name&#10;    string $domain - the cookie domain&#10;    string $path - the cookie path&#10;    string $prefix - the cookie prefix;;d1,119;;b0,0;;m0;;emixed $name;;pstring $domain;;pstring $path;;pstring $prefix;;p">
</treenode>
<treenode node="delete_files;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\filesystem_helper.php;f1;166;2;207;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    delete_files(string $path, bool $del_dir = false, bool $htdocs = false, bool $hidden = false): bool&#10;&#10;Description&#10;     Delete Files&#10;&#10;Parameters:&#10;    string $path - File path&#10;    boolean $del_dir - Whether to delete any directories found in the path&#10;    boolean $htdocs - Whether to skip deleting &#10;    boolean $hidden - Whether to include hidden files (files beginning with a period);;d1,167;;b0,0;;m0;;estring $path;;pboolean $del_dir;;pboolean $htdocs;;pboolean $hidden;;p">
</treenode>
<treenode node="directory_map;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\filesystem_helper.php;f1;63;2;100;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    directory_map(string $source_dir, int $directory_depth = 0, bool $hidden = false): array&#10;&#10;Description&#10;     Create a Directory Map&#10;&#10;Parameters:&#10;    string $source_dir - Path to source&#10;    integer $directory_depth - Depth of directories to traverse&#10;    boolean $hidden - Whether to show hidden files;;d1,64;;b0,0;;m0;;estring $source_dir;;pinteger $directory_depth;;pboolean $hidden;;p">
</treenode>
<treenode node="doctype;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;208;2;213;;;;vpos;;v;;astring;;r&#10;Definition&#10;    doctype(string $type = &apos;html5&apos;): string&#10;&#10;Description&#10;     Doctype&#10;&#10;Parameters:&#10;    string $type - The doctype to be generated;;d1,209;;b0,0;;m0;;estring $type;;p">
</treenode>
<treenode node="dot_array_search;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\array_helper.php;f1;55;2;60;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    dot_array_search(string $index, array $array)&#10;&#10;Description&#10;     Searches an array through dot syntax. Supports wildcard searches, like foo.*.bar&#10;&#10;Parameters:&#10;    string $index&#10;    array $array&#10;&#10;Return:&#10;   |null;;d1,56;;b0,0;;m0;;estring $index;;parray $array;;p">
</treenode>
<treenode node="ellipsize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;567;2;591;;;;vpos;;v;;astring;;r&#10;Definition&#10;    ellipsize(string $str, int $max_length, $position = 1, string $ellipsis = &apos;&amp;hellip;s&apos;): string&#10;&#10;Description&#10;     Ellipsize String&#10;&#10;Parameters:&#10;    string $str - String to ellipsize&#10;    integer $max_length - Max length of string&#10;    mixed $position - int (1|0) or float, &#10;    string $ellipsis - ellipsis ;s Default &apos;&#10;&#10;Return:&#10;   Ellipsized string;;d1,568;;b0,0;;m0;;estring $str;;pinteger $max_length;;pmixed $position;;pstring $ellipsis;;p">
</treenode>
<treenode node="embed;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;674;2;691;;;;vpos;;v;;astring;;r&#10;Definition&#10;    embed(string $src, string $type = &apos;unknown&apos;, string $attributes = &apos;&apos;, bool $indexPage = false): string&#10;&#10;Description&#10;     Embed&#10;&#10;Parameters:&#10;    string $src - The path of the resource to embed&#10;    string $type - MIME-type&#10;    string $attributes - HTML attributes&#10;    boolean $indexPage;;d1,675;;b0,0;;m0;;estring $src;;pstring $type;;pstring $attributes;;pboolean $indexPage;;p">
</treenode>
<treenode node="encode_php_tags;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\security_helper.php;f1;92;2;95;;;;vpos;;v;;astring;;r&#10;Definition&#10;    encode_php_tags(string $str): string&#10;&#10;Description&#10;     Convert PHP tags to entities&#10;&#10;Parameters:&#10;    string $str;;d1,93;;b0,0;;m0;;estring $str;;p">
</treenode>
<treenode node="entities_to_ascii;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;201;2;248;;;;vpos;;v;;astring;;r&#10;Definition&#10;    entities_to_ascii(string $str, bool $all = true): string&#10;&#10;Description&#10;     Entities to ASCII&#10;&#10;Parameters:&#10;    string $str&#10;    boolean $all;;d1,202;;b0,0;;m0;;estring $str;;pboolean $all;;p">
</treenode>
<treenode node="env;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;298;2;326;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    env(string $key, $default = null)&#10;&#10;Description&#10;     Allows user to retrieve values from the environment variables that have been set. Especially useful for retrieving values set from the .env file for use in config files.&#10;&#10;Parameters:&#10;    string $key&#10;    null $default;;d1,299;;b0,0;;m0;;estring $key;;pnull $default;;p">
</treenode>
<treenode node="error_reporting;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Debug\Exceptions.php;f4;45;28;45;;;;vpos;;v;;a;;r&#10;Description&#10;     CodeIgniter;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="esc;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;348;2;399;;;;vpos;;v;;astring;;r&#10;Definition&#10;    esc($data, string $context = &apos;html&apos;, string $encoding = null)&#10;&#10;Description&#10;     Performs simple auto-escaping of data for security reasons. Might consider making this more complex at a later date.&#10;&#10;Parameters:&#10;    string|array $data&#10;    string $context&#10;    string $encoding&#10;&#10;Return:&#10;   |array;;d1,349;;b0,0;;m0;;estring|array $data;;pstring $context;;pstring $encoding;;p">
</treenode>
<treenode node="excerpt;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;836;2;879;;;;vpos;;v;;astring;;r&#10;Definition&#10;    excerpt(string $text, string $phrase = null, int $radius = 100, string $ellipsis = &apos;...&apos;): string&#10;&#10;Description&#10;     Excerpt.&#10;&#10;Parameters:&#10;    string $text - String to search the phrase&#10;    string $phrase - Phrase that will be searched for&#10;    integer $radius - The amount of characters returned around the phrase&#10;    string $ellipsis - Ending that will be appended&#10;&#10;Return:&#10;   If no $phrase is passed, will generate an excerpt of $radius characters;;d1,837;;b0,0;;m0;;estring $text;;pstring $phrase;;pinteger $radius;;pstring $ellipsis;;p">
</treenode>
<treenode node="fake;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\test_helper.php;f1;59;2;71;;;;vpos;;v;;aobject;;r&#10;Definition&#10;    fake($model, array $overrides = null)&#10;&#10;Description&#10;     Creates a single item using Fabricator.&#10;&#10;Parameters:&#10;    Model|object|string $model - Instance or name of the model&#10;    array|null $overrides - Overriding data to pass to Fabricator::setOverrides()&#10;&#10;Return:&#10;   |array;;d1,60;;b0,0;;m0;;eModel|object|string $model;;parray|null $overrides;;p">
</treenode>
<treenode node="force_https;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;419;2;474;;;;vpos;;v;;a;;r&#10;Definition&#10;    force_https(int $duration = 31536000, RequestInterface $request = null, ResponseInterface $response = null)&#10;&#10;Description&#10;     Used to force a page to be accessed in via HTTPS. Uses a standard redirect, plus will set the HSTS header for modern browsers that support, which gives best protection against man-in-the-middle attacks.&#10;&#10;Parameters:&#10;    integer $duration - How long should the SSL header be set for? (in seconds)&#10;    RequestInterface $request&#10;    ResponseInterface $response;;d1,420;;b0,0;;m0;;einteger $duration;;pRequestInterface $request;;pResponseInterface $response;;p">
</treenode>
<treenode node="form_button;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;566;2;582;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_button($data = &apos;&apos;, string $content = &apos;&apos;, $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Form Button&#10;&#10;Parameters:&#10;    mixed $data&#10;    string $content&#10;    mixed $extra;;d1,567;;b0,0;;m0;;emixed $data;;pstring $content;;pmixed $extra;;p">
</treenode>
<treenode node="form_checkbox;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;446;2;477;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_checkbox($data = &apos;&apos;, string $value = &apos;&apos;, bool $checked = false, $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Checkbox Field&#10;&#10;Parameters:&#10;    mixed $data&#10;    string $value&#10;    boolean $checked&#10;    mixed $extra;;d1,447;;b0,0;;m0;;emixed $data;;pstring $value;;pboolean $checked;;pmixed $extra;;p">
</treenode>
<treenode node="form_close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;713;2;716;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_close(string $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Form Close Tag&#10;&#10;Parameters:&#10;    string $extra;;d1,714;;b0,0;;m0;;estring $extra;;p">
</treenode>
<treenode node="form_datalist;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;636;2;654;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_datalist(string $name, string $value, array $options): string&#10;&#10;Description&#10;     Datalist&#10;&#10;Parameters:&#10;    string $name&#10;    string $value&#10;    array $options;;d1,637;;b0,0;;m0;;estring $name;;pstring $value;;parray $options;;p">
</treenode>
<treenode node="form_dropdown;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;359;2;429;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_dropdown($data = &apos;&apos;, $options = [], $selected = [], $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Drop-down Menu&#10;&#10;Parameters:&#10;    mixed $data&#10;    mixed $options&#10;    mixed $selected&#10;    mixed $extra;;d1,360;;b0,0;;m0;;emixed $data;;pmixed $options;;pmixed $selected;;pmixed $extra;;p">
</treenode>
<treenode node="form_fieldset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;672;2;682;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_fieldset(string $legend_text = &apos;&apos;, array $attributes = []): string&#10;&#10;Description&#10;     Fieldset Tag&#10;&#10;Parameters:&#10;    string $legend_text - The legend text&#10;    array $attributes - Additional attributes;;d1,673;;b0,0;;m0;;estring $legend_text;;parray $attributes;;p">
</treenode>
<treenode node="form_fieldset_close;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;696;2;699;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_fieldset_close(string $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Fieldset Close Tag&#10;&#10;Parameters:&#10;    string $extra;;d1,697;;b0,0;;m0;;estring $extra;;p">
</treenode>
<treenode node="form_hidden;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;167;2;200;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_hidden($name, $value = &apos;&apos;, bool $recursing = false): string&#10;&#10;Description&#10;     Hidden Input Field&#10;&#10;Parameters:&#10;    string|array $name - Field name or associative array to create multiple fields&#10;    string|array $value - Field value&#10;    boolean $recursing;;d1,168;;b0,0;;m0;;estring|array $name;;pstring|array $value;;pboolean $recursing;;p">
</treenode>
<treenode node="form_input;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;218;2;227;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_input($data = &apos;&apos;, string $value = &apos;&apos;, $extra = &apos;&apos;, string $type = &apos;text&apos;): string&#10;&#10;Description&#10;     Text Input Field. If &apos;type&apos; is passed in the $type field, it will be used as the input type, for making &apos;email&apos;, &apos;phone&apos;, etc input fields.&#10;&#10;Parameters:&#10;    mixed $data&#10;    string $value&#10;    mixed $extra&#10;    string $type;;d1,219;;b0,0;;m0;;emixed $data;;pstring $value;;pmixed $extra;;pstring $type;;p">
</treenode>
<treenode node="form_label;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;598;2;616;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_label(string $label_text = &apos;&apos;, string $id = &apos;&apos;, array $attributes = []): string&#10;&#10;Description&#10;     Form Label Tag&#10;&#10;Parameters:&#10;    string $label_text - The text to appear onscreen&#10;    string $id - The id the label applies to&#10;    array $attributes - Additional attributes;;d1,599;;b0,0;;m0;;estring $label_text;;pstring $id;;parray $attributes;;p">
</treenode>
<treenode node="form_multiselect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;332;2;342;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_multiselect(string $name = &apos;&apos;, array $options = [], array $selected = [], $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Multi-select menu&#10;&#10;Parameters:&#10;    string $name&#10;    array $options&#10;    array $selected&#10;    mixed $extra;;d1,333;;b0,0;;m0;;estring $name;;parray $options;;parray $selected;;pmixed $extra;;p">
</treenode>
<treenode node="form_open;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;62;2;118;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_open(string $action = &apos;&apos;, $attributes = [], array $hidden = []): string&#10;&#10;Description&#10;     Form Declaration&#10;&#10;Parameters:&#10;    string $action - the URI segments of the form destination&#10;    array|string $attributes - a key/value pair of attributes, or string representation&#10;    array $hidden - a key/value pair hidden data;;d1,63;;b0,0;;m0;;estring $action;;parray|string $attributes;;parray $hidden;;p">
</treenode>
<treenode node="form_open_multipart;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;136;2;148;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_open_multipart(string $action = &apos;&apos;, $attributes = [], array $hidden = []): string&#10;&#10;Description&#10;     Form Declaration - Multipart type&#10;&#10;Parameters:&#10;    string $action - The URI segments of the form destination&#10;    array|string $attributes - A key/value pair of attributes, or the same as a string&#10;    array $hidden - A key/value pair hidden data;;d1,137;;b0,0;;m0;;estring $action;;parray|string $attributes;;parray $hidden;;p">
</treenode>
<treenode node="form_password;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;245;2;251;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_password($data = &apos;&apos;, string $value = &apos;&apos;, $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Password Field&#10;&#10;Parameters:&#10;    mixed $data&#10;    string $value&#10;    mixed $extra;;d1,246;;b0,0;;m0;;emixed $data;;pstring $value;;pmixed $extra;;p">
</treenode>
<treenode node="form_radio;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;494;2;500;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_radio($data = &apos;&apos;, string $value = &apos;&apos;, bool $checked = false, $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Radio Button&#10;&#10;Parameters:&#10;    mixed $data&#10;    string $value&#10;    boolean $checked&#10;    mixed $extra;;d1,495;;b0,0;;m0;;emixed $data;;pstring $value;;pboolean $checked;;pmixed $extra;;p">
</treenode>
<treenode node="form_reset;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;541;2;550;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_reset($data = &apos;&apos;, string $value = &apos;&apos;, $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Reset Button&#10;&#10;Parameters:&#10;    mixed $data&#10;    string $value&#10;    mixed $extra;;d1,542;;b0,0;;m0;;emixed $data;;pstring $value;;pmixed $extra;;p">
</treenode>
<treenode node="form_submit;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;516;2;525;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_submit($data = &apos;&apos;, string $value = &apos;&apos;, $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Submit Button&#10;&#10;Parameters:&#10;    mixed $data&#10;    string $value&#10;    mixed $extra;;d1,517;;b0,0;;m0;;emixed $data;;pstring $value;;pmixed $extra;;p">
</treenode>
<treenode node="form_textarea;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;295;2;315;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_textarea($data = &apos;&apos;, string $value = &apos;&apos;, $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Textarea field&#10;&#10;Parameters:&#10;    mixed $data&#10;    string $value&#10;    mixed $extra;;d1,296;;b0,0;;m0;;emixed $data;;pstring $value;;pmixed $extra;;p">
</treenode>
<treenode node="form_upload;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;269;2;279;;;;vpos;;v;;astring;;r&#10;Definition&#10;    form_upload($data = &apos;&apos;, string $value = &apos;&apos;, $extra = &apos;&apos;): string&#10;&#10;Description&#10;     Upload Field&#10;&#10;Parameters:&#10;    mixed $data&#10;    string $value&#10;    mixed $extra;;d1,270;;b0,0;;m0;;emixed $data;;pstring $value;;pmixed $extra;;p">
</treenode>
<treenode node="format_number;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\number_helper.php;f1;213;2;259;;;;vpos;;v;;astring;;r&#10;Definition&#10;    format_number(float $num, int $precision = 1, string $locale = null, array $options = []): string&#10;&#10;Description&#10;     A general purpose, locale-aware, number_format method. Used by all of the functions of the number_helper.&#10;&#10;Parameters:&#10;    float $num&#10;    integer $precision&#10;    string|null $locale&#10;    array $options;;d1,214;;b0,0;;m0;;efloat $num;;pinteger $precision;;pstring|null $locale;;parray $options;;p">
</treenode>
<treenode node="function_usable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;504;2;519;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    function_usable(string $function_name): bool&#10;&#10;Description&#10;     Function usable&#10;&#10;Parameters:&#10;    string $function_name - Function to check for&#10;&#10;Return:&#10;   TRUE if the function exists and is safe to call,;;d1,505;;b0,0;;m0;;estring $function_name;;p">
</treenode>
<treenode node="get_cookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\cookie_helper.php;f1;90;2;100;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    get_cookie($index, bool $xssClean = false)&#10;&#10;Description&#10;     Fetch an item from the COOKIE array&#10;&#10;Parameters:&#10;    string $index&#10;    boolean $xssClean;;d1,91;;b0,0;;m0;;estring $index;;pboolean $xssClean;;p">
</treenode>
<treenode node="get_dir_file_info;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\filesystem_helper.php;f1;289;2;326;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    get_dir_file_info(string $source_dir, bool $top_level_only = true, bool $recursion = false): array&#10;&#10;Description&#10;     Get Directory File Information&#10;&#10;Parameters:&#10;    string $source_dir - Path to source&#10;    boolean $top_level_only - Look only at the top level directory specified?&#10;    boolean $recursion - Internal variable to determine recursion status - do not use in calls;;d1,290;;b0,0;;m0;;estring $source_dir;;pboolean $top_level_only;;pboolean $recursion;;p">
</treenode>
<treenode node="get_file_info;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\filesystem_helper.php;f1;346;2;389;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    get_file_info(string $file, $returned_values = [&apos;name&apos;, &apos;server_path&apos;, &apos;size&apos;, &apos;date&apos;])&#10;&#10;Description&#10;     Get File Info&#10;&#10;Parameters:&#10;    string $file - Path to file&#10;    mixed $returned_values - Array or comma separated string of information returned&#10;&#10;Return:&#10;   |null;;d1,347;;b0,0;;m0;;estring $file;;pmixed $returned_values;;p">
</treenode>
<treenode node="get_filenames;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\filesystem_helper.php;f1;226;2;268;;;;vpos;;v;;aarray;;r&#10;Definition&#10;    get_filenames(string $source_dir, ?bool $include_path = false, bool $hidden = false): array&#10;&#10;Description&#10;     Get Filenames&#10;&#10;Parameters:&#10;    string $source_dir - Path to source&#10;    boolean|null $include_path - Whether to include the path as part of the filename;s false for no path, null for a relative path, true for full path&#10;    boolean $hidden - Whether to include hidden files (files beginning with a period);;d1,227;;b0,0;;m0;;estring $source_dir;;pboolean|null $include_path;;pboolean $hidden;;p">
</treenode>
<treenode node="has_permission;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Helpers\auth_helper.php;f1;88;2;99;;;;vpos;;v;;abool;;r&#10;Definition&#10;    has_permission($permission): bool&#10;&#10;Description&#10;     Ensures that the current user has the passed in permission. The permission can be passed in either as an ID or name.&#10;&#10;Parameters:&#10;    int|string $permission;;d1,89;;b0,0;;m0;;eint|string $permission;;p">
</treenode>
<treenode node="helper;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;536;2;628;;;;vpos;;v;;a;;r&#10;Definition&#10;    helper($filenames)&#10;&#10;Description&#10;     Loads a helper file into memory. Supports namespaced helpers, both in and out of the &apos;helpers&apos; directory of a namespaced directory.&#10;&#10;Parameters:&#10;    string|array $filenames;;d1,537;;b0,0;;m0;;estring|array $filenames;;p">
</treenode>
<treenode node="highlight_code;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;324;2;387;;;;vpos;;v;;astring;;r&#10;Definition&#10;    highlight_code(string $str): string&#10;&#10;Description&#10;     Code Highlighter&#10;&#10;Parameters:&#10;    string $str - the text string;;d1,325;;b0,0;;m0;;estring $str;;p">
</treenode>
<treenode node="highlight_phrase;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;406;2;409;;;;vpos;;v;;astring;;r&#10;Definition&#10;    highlight_phrase(string $str, string $phrase, string $tag_open = &apos;&lt;mark&gt;&apos;, string $tag_close = &apos;&lt;/mark&gt;&apos;): string&#10;&#10;Description&#10;     Phrase Highlighter&#10;&#10;Parameters:&#10;    string $str - the text string&#10;    string $phrase - the phrase you&apos;d like to highlight&#10;    string $tag_open - the opening tag to precede the phrase with&#10;    string $tag_close - the closing tag to end the phrase with;;d1,407;;b0,0;;m0;;estring $str;;pstring $phrase;;pstring $tag_open;;pstring $tag_close;;p">
</treenode>
<treenode node="humanize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;261;2;269;;;;vpos;;v;;astring;;r&#10;Definition&#10;    humanize(string $string, string $separator = &apos;_&apos;): string&#10;&#10;Description&#10;     Humanize&#10;&#10;Parameters:&#10;    string $string - Input string&#10;    string $separator - Input separator;;d1,262;;b0,0;;m0;;estring $string;;pstring $separator;;p">
</treenode>
<treenode node="img;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;148;2;189;;;;vpos;;v;;astring;;r&#10;Definition&#10;    img($src = &apos;&apos;, bool $indexPage = false, $attributes = &apos;&apos;): string&#10;&#10;Description&#10;     Image&#10;&#10;Parameters:&#10;    mixed $src&#10;    boolean $indexPage&#10;    mixed $attributes;;d1,149;;b0,0;;m0;;emixed $src;;pboolean $indexPage;;pmixed $attributes;;p">
</treenode>
<treenode node="in_groups;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Helpers\auth_helper.php;f1;64;2;75;;;;vpos;;v;;abool;;r&#10;Definition&#10;    in_groups($groups): bool&#10;&#10;Description&#10;     Ensures that the current user is in at least one of the passed in groups. The groups can be passed in as either ID&apos;s or group names. You can pass either a single item or an array of items.&#10;&#10;Parameters:&#10;    mixed $groups;;d1,65;;b0,0;;m0;;emixed $groups;;p">
</treenode>
<treenode node="increment_string;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;779;2;784;;;;vpos;;v;;astring;;r&#10;Definition&#10;    increment_string(string $str, string $separator = &apos;_&apos;, int $first = 1): string&#10;&#10;Description&#10;     Add&apos;s _1 to a string or increment the ending number to allow _2, _3, etc&#10;&#10;Parameters:&#10;    string $str - Required&#10;    string $separator - What should the duplicate number be appended with&#10;    integer $first - Which number should be used for the first dupe increment;;d1,780;;b0,0;;m0;;estring $str;;pstring $separator;;pinteger $first;;p">
</treenode>
<treenode node="index_page;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;236;2;242;;;;vpos;;v;;astring;;r&#10;Definition&#10;    index_page(\Config\App $altConfig = null): string&#10;&#10;Description&#10;     Index page&#10;&#10;Parameters:&#10;    \Config\App|null $altConfig - Alternate configuration to use;;d1,237;;b0,0;;m0;;e\Config\App|null $altConfig;;p">
</treenode>
<treenode node="is_cli;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Test\Mock\MockCommon.php;f1;22;2;33;;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;640;2;643;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    is_cli(bool $new_return = null): bool&#10;&#10;Description&#10;     Is CLI?&#10;&#10;Parameters:&#10;    boolean $new_return - return value to set;;d1,23;;b0,0;;m0;;eboolean $new_return;;p">
</treenode>
<treenode node="is_pluralizable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;282;2;336;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    is_pluralizable(string $word): bool&#10;&#10;Description&#10;     Checks if the given word has a plural version.&#10;&#10;Parameters:&#10;    string $word - Word to check;;d1,283;;b0,0;;m0;;estring $word;;p">
</treenode>
<treenode node="is_really_writable;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;664;2;697;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    is_really_writable(string $file): bool&#10;&#10;Description&#10;     Tests for file writability&#10;&#10;Parameters:&#10;    string $file;;d1,665;;b0,0;;m0;;estring $file;;p">
</treenode>
<treenode node="lang;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;712;2;716;;;;vpos;;v;;astring;;r&#10;Definition&#10;    lang(string $line, array $args = [], string $locale = null)&#10;&#10;Description&#10;     A convenience method to translate a string or array of them and format the result with the intl extension&apos;s MessageFormatter.&#10;&#10;Parameters:&#10;    string|[] $line&#10;    array $args&#10;    string $locale;;d1,713;;b0,0;;m0;;estring|[] $line;;parray $args;;pstring $locale;;p">
</treenode>
<treenode node="link_tag;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;278;2;333;;;;vpos;;v;;astring;;r&#10;Definition&#10;    link_tag($href = &apos;&apos;, string $rel = &apos;stylesheet&apos;, string $type = &apos;text/css&apos;, string $title = &apos;&apos;, string $media = &apos;&apos;, bool $indexPage = false, string $hreflang = &apos;&apos;): string&#10;&#10;Description&#10;     Link&#10;&#10;Parameters:&#10;    mixed $href - Stylesheet href or an array&#10;    string $rel&#10;    string $type&#10;    string $title&#10;    string $media&#10;    boolean $indexPage - should indexPage be added to the CSS path&#10;    string $hreflang;;d1,279;;b0,0;;m0;;emixed $href;;pstring $rel;;pstring $type;;pstring $title;;pstring $media;;pboolean $indexPage;;pstring $hreflang;;p">
</treenode>
<treenode node="log_message;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;741;2;757;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    log_message(string $level, string $message, array $context = [])&#10;&#10;Description&#10;     A convenience/compatibility method for logging events through the Log system.&#10;&#10;Parameters:&#10;    string $level&#10;    string $message&#10;    array|null $context;;d1,742;;b0,0;;m0;;estring $level;;pstring $message;;parray|null $context;;p">
</treenode>
<treenode node="logged_in;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Helpers\auth_helper.php;f1;11;2;14;;;;vpos;;v;;abool;;r&#10;Definition&#10;    logged_in()&#10;&#10;Description&#10;     Checks to see if the user is logged in.;;d1,12;;b0,0;;m0;;e">
</treenode>
<treenode node="mailto;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;363;2;371;;;;vpos;;v;;astring;;r&#10;Definition&#10;    mailto(string $email, string $title = &apos;&apos;, $attributes = &apos;&apos;): string&#10;&#10;Description&#10;     Mailto Link&#10;&#10;Parameters:&#10;    string $email - the email address&#10;    string $title - the link title&#10;    mixed $attributes - any attributes;;d1,364;;b0,0;;m0;;estring $email;;pstring $title;;pmixed $attributes;;p">
</treenode>
<treenode node="mb_url_title;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;627;2;632;;;;vpos;;v;;astring;;r&#10;Definition&#10;    mb_url_title(string $str, string $separator = &apos;-&apos;, bool $lowercase = false): string&#10;&#10;Description&#10;     Create URL Title that takes into account accented characters&#10;&#10;Parameters:&#10;    string $str - Input string&#10;    string $separator - Word separator (usually &apos;-&apos; or &apos;_&apos;)&#10;    boolean $lowercase - Whether to transform the output string to lowercase;;d1,628;;b0,0;;m0;;estring $str;;pstring $separator;;pboolean $lowercase;;p">
</treenode>
<treenode node="model;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;771;2;774;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    model(string $name, bool $getShared = true, ConnectionInterface &amp;$conn = null)&#10;&#10;Description&#10;     More simple way of getting model instances&#10;&#10;Parameters:&#10;    string $name&#10;    boolean $getShared&#10;    ConnectionInterface|null $conn;;d1,772;;b0,0;;m0;;estring $name;;pboolean $getShared;;pConnectionInterface|null $conn;;p">
</treenode>
<treenode node="now;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\date_helper.php;f1;57;2;70;;;;vpos;;v;;ainteger;;r&#10;Definition&#10;    now(string $timezone = null): int&#10;&#10;Description&#10;     Get &quot;now&quot; time&#10;&#10;Parameters:&#10;    string $timezone;;d1,58;;b0,0;;m0;;estring $timezone;;p">
</treenode>
<treenode node="number_to_amount;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\number_helper.php;f1;125;2;173;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    number_to_amount($num, int $precision = 0, string $locale = null)&#10;&#10;Description&#10;     Converts numbers to a more readable representation when dealing with very large numbers (in the thousands or above), up to the quadrillions, because you won&apos;t often deal with numbers larger than that.&#10;&#10;Parameters:&#10;    string $num&#10;    integer $precision&#10;    string|null $locale&#10;&#10;Return:&#10;   |string;;d1,126;;b0,0;;m0;;estring $num;;pinteger $precision;;pstring|null $locale;;p">
</treenode>
<treenode node="number_to_currency;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\number_helper.php;f1;188;2;195;;;;vpos;;v;;astring;;r&#10;Definition&#10;    number_to_currency(float $num, string $currency, string $locale = null, int $fraction = null): string&#10;&#10;Description&#10;     &#10;&#10;Parameters:&#10;    float $num&#10;    string $currency&#10;    string $locale&#10;    integer $fraction;;d1,189;;b0,0;;m0;;efloat $num;;pstring $currency;;pstring $locale;;pinteger $fraction;;p">
</treenode>
<treenode node="number_to_roman;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\number_helper.php;f1;273;39;273;;;;vpos;;v;;astring;;r&#10;Description&#10;     Convert a number to a roman numeral.&#10;&#10;Parameters:&#10;    string $num - it will convert to int&#10;&#10;Return:&#10;   |null;;d-1,-1;;b0,0;;m0;;estring $num;;p">
</treenode>
<treenode node="number_to_size;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\number_helper.php;f1;56;2;101;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    number_to_size($num, int $precision = 1, string $locale = null)&#10;&#10;Description&#10;     Formats a numbers as bytes, based on size, and adds the appropriate suffix&#10;&#10;Parameters:&#10;    mixed $num - Will be cast as int&#10;    integer $precision&#10;    string $locale&#10;&#10;Return:&#10;   |string;;d1,57;;b0,0;;m0;;emixed $num;;pinteger $precision;;pstring $locale;;p">
</treenode>
<treenode node="object;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;603;2;631;;;;vpos;;v;;astring;;r&#10;Definition&#10;    object(string $data, string $type = &apos;unknown&apos;, string $attributes = &apos;&apos;, array $params = [], bool $indexPage = false): string&#10;&#10;Description&#10;     Object&#10;&#10;Parameters:&#10;    string $data - A resource URL&#10;    string $type - Content-type of the resource&#10;    string $attributes - HTML attributes&#10;    array $params&#10;    boolean $indexPage;;d1,604;;b0,0;;m0;;estring $data;;pstring $type;;pstring $attributes;;parray $params;;pboolean $indexPage;;p">
</treenode>
<treenode node="octal_permissions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\filesystem_helper.php;f1;472;2;475;;;;vpos;;v;;astring;;r&#10;Definition&#10;    octal_permissions(int $perms): string&#10;&#10;Description&#10;     Octal Permissions&#10;&#10;Parameters:&#10;    integer $perms - Permissions;;d1,473;;b0,0;;m0;;einteger $perms;;p">
</treenode>
<treenode node="ol;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;76;2;79;;;;vpos;;v;;astring;;r&#10;Definition&#10;    ol(array $list, $attributes = &apos;&apos;): string&#10;&#10;Description&#10;     Ordered List&#10;&#10;Parameters:&#10;    array $list&#10;    mixed $attributes - HTML attributes string, array, object;;d1,77;;b0,0;;m0;;earray $list;;pmixed $attributes;;p">
</treenode>
<treenode node="old;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;789;2;820;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    old(string $key, $default = null, $escape = &apos;html&apos;)&#10;&#10;Description&#10;     Provides access to &quot;old input&quot; that was set in the session during a redirect()-&gt;withInput().&#10;&#10;Parameters:&#10;    string $key&#10;    null $default&#10;    string|boolean $escape&#10;&#10;Return:&#10;   |null;;d1,790;;b0,0;;m0;;estring $key;;pnull $default;;pstring|boolean $escape;;p">
</treenode>
<treenode node="ordinal;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;368;2;384;;;;vpos;;v;;astring;;r&#10;Definition&#10;    ordinal(int $integer): string&#10;&#10;Description&#10;     Returns the suffix that should be added to a number to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.&#10;&#10;Parameters:&#10;    integer $integer - The integer to determine;;d1,369;;b0,0;;m0;;einteger $integer;;p">
</treenode>
<treenode node="ordinalize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;399;2;402;;;;vpos;;v;;astring;;r&#10;Definition&#10;    ordinalize(int $integer): string&#10;&#10;Description&#10;     Turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.&#10;&#10;Parameters:&#10;    integer $integer - The integer to ordinalize;;d1,400;;b0,0;;m0;;einteger $integer;;p">
</treenode>
<treenode node="param;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;650;2;656;;;;vpos;;v;;astring;;r&#10;Definition&#10;    param(string $name, string $value, string $type = &apos;ref&apos;, string $attributes = &apos;&apos;): string&#10;&#10;Description&#10;     Param&#10;&#10;Parameters:&#10;    string $name - The name of the parameter&#10;    string $value - The value of the parameter&#10;    string $type - The MIME-type&#10;    string $attributes - HTML attributes;;d1,651;;b0,0;;m0;;estring $name;;pstring $value;;pstring $type;;pstring $attributes;;p">
</treenode>
<treenode node="parse_form_attributes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;924;2;965;;;;vpos;;v;;astring;;r&#10;Definition&#10;    parse_form_attributes($attributes, array $default): string&#10;&#10;Description&#10;     Parse the form attributes&#10;&#10;Parameters:&#10;    string|array $attributes - List of attributes&#10;    array $default - Default values;;d1,925;;b0,0;;m0;;estring|array $attributes;;parray $default;;p">
</treenode>
<treenode node="pascalize;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;221;2;224;;;;vpos;;v;;astring;;r&#10;Definition&#10;    pascalize(string $string): string&#10;&#10;Description&#10;     Pascalize&#10;&#10;Parameters:&#10;    string $string - Input string;;d1,222;;b0,0;;m0;;estring $string;;p">
</treenode>
<treenode node="plural;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;121;2;163;;;;vpos;;v;;astring;;r&#10;Definition&#10;    plural(string $string): string&#10;&#10;Description&#10;     Plural&#10;&#10;Parameters:&#10;    string $string - Input string;;d1,122;;b0,0;;m0;;estring $string;;p">
</treenode>
<treenode node="prep_url;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;551;2;566;;;;vpos;;v;;astring;;r&#10;Definition&#10;    prep_url(string $str = &apos;&apos;): string&#10;&#10;Description&#10;     Prep URL - Simply adds the http:// part if no scheme is included.&#10;&#10;Parameters:&#10;    string $str - the URL;;d1,552;;b0,0;;m0;;estring $str;;p">
</treenode>
<treenode node="previous_url;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;194;2;204;;;;vpos;;v;;a;;r&#10;Definition&#10;    previous_url(bool $returnObject = false)&#10;&#10;Description&#10;     Returns the previous URL the current visitor was on. For security reasons we first check in a saved session variable, if it exists, and use that. If that&apos;s not available, however, we&apos;ll use a sanitized url from $_SERVER[&apos;HTTP_REFERER&apos;] which can be set by the user so is untrusted and not set by certain browsers/servers.&#10;&#10;Parameters:&#10;    boolean $returnObject;;d1,195;;b0,0;;m0;;eboolean $returnObject;;p">
</treenode>
<treenode node="quotes_to_entities;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;654;2;657;;;;vpos;;v;;astring;;r&#10;Definition&#10;    quotes_to_entities(string $str): string&#10;&#10;Description&#10;     Quotes to Entities&#10;&#10;Parameters:&#10;    string $str;;d1,655;;b0,0;;m0;;estring $str;;p">
</treenode>
<treenode node="random_string;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;729;2;763;;;;vpos;;v;;astring;;r&#10;Definition&#10;    random_string(string $type = &apos;alnum&apos;, int $len = 8): string&#10;&#10;Description&#10;     Create a Random String&#10;&#10;Parameters:&#10;    string $type - Type of random string&#10;    integer $len - Number of characters;;d1,730;;b0,0;;m0;;estring $type;;pinteger $len;;p">
</treenode>
<treenode node="redirect;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;838;2;848;;;;vpos;;v;;a;;r&#10;Definition&#10;    redirect(string $uri = null): RedirectResponse&#10;&#10;Description&#10;     Convenience method that works with the current global $request and $router instances to redirect using named/reverse-routed routes to determine the URL to go to. If nothing is found, will treat as a traditional redirect and pass the string in, letting $response-&gt;redirect() determine the correct method and code.&#10;&#10;Parameters:&#10;    string $uri;;d1,839;;b0,0;;m0;;estring $uri;;p">
</treenode>
<treenode node="reduce_double_slashes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;680;2;683;;;;vpos;;v;;astring;;r&#10;Definition&#10;    reduce_double_slashes(string $str): string&#10;&#10;Description&#10;     Reduce Double Slashes&#10;&#10;Parameters:&#10;    string $str;;d1,681;;b0,0;;m0;;estring $str;;p">
</treenode>
<treenode node="reduce_multiples;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;707;2;712;;;;vpos;;v;;astring;;r&#10;Definition&#10;    reduce_multiples(string $str, string $character = &apos;,&apos;, bool $trim = false): string&#10;&#10;Description&#10;     Reduce Multiples&#10;&#10;Parameters:&#10;    string $str&#10;    string $character - the character you wish to reduce&#10;    boolean $trim - TRUE/FALSE - whether to trim the character from the beginning/end;;d1,708;;b0,0;;m0;;estring $str;;pstring $character;;pboolean $trim;;p">
</treenode>
<treenode node="remove_invisible_characters;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;864;2;885;;;;vpos;;v;;astring;;r&#10;Definition&#10;    remove_invisible_characters(string $str, bool $urlEncoded = true): string&#10;&#10;Description&#10;     Remove Invisible Characters&#10;&#10;Parameters:&#10;    string $str&#10;    boolean $urlEncoded;;d1,865;;b0,0;;m0;;estring $str;;pboolean $urlEncoded;;p">
</treenode>
<treenode node="route_to;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;903;2;906;;;;vpos;;v;;afalse;;r&#10;Definition&#10;    route_to(string $method, ...$params)&#10;&#10;Description&#10;     Given a controller/method string and any params, will attempt to build the relative URL to the matching route.&#10;&#10;Parameters:&#10;    string $method&#10;    array - ...$params&#10;&#10;Return:&#10;   |string;;d1,904;;b0,0;;m0;;estring $method;;parray;;p">
</treenode>
<treenode node="s;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\ThirdParty\Kint\init_helpers.php;f4;59;5;80;;;;vpos;;v;;aint;;r&#10;Definition&#10;    s()&#10;&#10;Description&#10;     Alias of Kint::dump(), however the output is in plain text.&#10;&#10;Return:&#10;   |string;;d4,60;;b0,0;;m0;;e">
</treenode>
<treenode node="safe_mailto;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;389;2;478;;;;vpos;;v;;astring;;r&#10;Definition&#10;    safe_mailto(string $email, string $title = &apos;&apos;, $attributes = &apos;&apos;): string&#10;&#10;Description&#10;     Encoded Mailto Link&#10;&#10;Parameters:&#10;    string $email - the email address&#10;    string $title - the link title&#10;    mixed $attributes - any attributes;;d1,390;;b0,0;;m0;;estring $email;;pstring $title;;pmixed $attributes;;p">
</treenode>
<treenode node="sanitize_filename;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\security_helper.php;f1;56;2;59;;;;vpos;;v;;astring;;r&#10;Definition&#10;    sanitize_filename(string $filename): string&#10;&#10;Description&#10;     Sanitize a filename to use in a URI.&#10;&#10;Parameters:&#10;    string $filename;;d1,57;;b0,0;;m0;;estring $filename;;p">
</treenode>
<treenode node="script_tag;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;229;2;257;;;;vpos;;v;;astring;;r&#10;Definition&#10;    script_tag($src = &apos;&apos;, bool $indexPage = false): string&#10;&#10;Description&#10;     Script&#10;&#10;Parameters:&#10;    mixed $src - Script source or an array&#10;    boolean $indexPage - Should indexPage be added to the JS path;;d1,230;;b0,0;;m0;;emixed $src;;pboolean $indexPage;;p">
</treenode>
<treenode node="service;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;954;2;957;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    service(string $name, ...$params)&#10;&#10;Description&#10;     Allows cleaner access to the Services Config file. Always returns a SHARED instance of the class, so calling the function multiple times should always return the same instance.&#10;&#10;Parameters:&#10;    string $name&#10;    array - ...$params;;d1,955;;b0,0;;m0;;estring $name;;parray;;p">
</treenode>
<treenode node="session;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;923;2;934;;;;vpos;;v;;a;;r&#10;Definition&#10;    session(string $val = null)&#10;&#10;Description&#10;     A convenience method for accessing the session instance, or an item that has been set in the session.&#10;&#10;Parameters:&#10;    string $val;;d1,924;;b0,0;;m0;;estring $val;;p">
</treenode>
<treenode node="set_checkbox;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;818;2;851;;;;vpos;;v;;astring;;r&#10;Definition&#10;    set_checkbox(string $field, string $value = &apos;&apos;, bool $default = false): string&#10;&#10;Description&#10;     Set Checkbox&#10;&#10;Parameters:&#10;    string $field&#10;    string $value&#10;    boolean $default;;d1,819;;b0,0;;m0;;estring $field;;pstring $value;;pboolean $default;;p">
</treenode>
<treenode node="set_cookie;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\cookie_helper.php;f1;67;2;73;;;;vpos;;v;;a;;r&#10;Definition&#10;    set_cookie($name, string $value = &apos;&apos;, string $expire = &apos;&apos;, string $domain = &apos;&apos;, string $path = &apos;/&apos;, string $prefix = &apos;&apos;, bool $secure = false, bool $httpOnly = false)&#10;&#10;Description&#10;     Set cookie&#10;&#10;Parameters:&#10;    string|array $name - Cookie name or array containing binds&#10;    string $value - The value of the cookie&#10;    string $expire - The number of seconds until expiration&#10;    string $domain - For site-wide cookie&#10;    string $path - The cookie path&#10;    string $prefix - The cookie prefix&#10;    boolean $secure - True makes the cookie secure&#10;    boolean $httpOnly - True makes the cookie accessible via;;d1,68;;b0,0;;m0;;estring|array $name;;pstring $value;;pstring $expire;;pstring $domain;;pstring $path;;pstring $prefix;;pboolean $secure;;pboolean $httpOnly;;p">
</treenode>
<treenode node="set_radio;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;870;2;907;;;;vpos;;v;;astring;;r&#10;Definition&#10;    set_radio(string $field, string $value = &apos;&apos;, bool $default = false): string&#10;&#10;Description&#10;     Set Radio&#10;&#10;Parameters:&#10;    string $field&#10;    string $value&#10;    boolean $default;;d1,871;;b0,0;;m0;;estring $field;;pstring $value;;pboolean $default;;p">
</treenode>
<treenode node="set_realpath;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\filesystem_helper.php;f1;490;2;510;;;;vpos;;v;;astring;;r&#10;Definition&#10;    set_realpath(string $path, bool $check_existence = false): string&#10;&#10;Description&#10;     Set Realpath&#10;&#10;Parameters:&#10;    string $path&#10;    boolean $check_existence - Checks to see if the path exists;;d1,491;;b0,0;;m0;;estring $path;;pboolean $check_existence;;p">
</treenode>
<treenode node="set_select;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;767;2;799;;;;vpos;;v;;astring;;r&#10;Definition&#10;    set_select(string $field, string $value = &apos;&apos;, bool $default = false): string&#10;&#10;Description&#10;     Set Select&#10;&#10;Parameters:&#10;    string $field&#10;    string $value&#10;    boolean $default;;d1,768;;b0,0;;m0;;estring $field;;pstring $value;;pboolean $default;;p">
</treenode>
<treenode node="set_value;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\form_helper.php;f1;735;2;748;;;;vpos;;v;;astring;;r&#10;Definition&#10;    set_value(string $field, string $default = &apos;&apos;, bool $html_escape = true): string&#10;&#10;Description&#10;     Form Value&#10;&#10;Parameters:&#10;    string $field - Field name&#10;    string $default - Default value&#10;    boolean $html_escape - Whether to escape HTML special characters or not;;d1,736;;b0,0;;m0;;estring $field;;pstring $default;;pboolean $html_escape;;p">
</treenode>
<treenode node="single_service;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;971;2;977;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    single_service(string $name, ...$params)&#10;&#10;Description&#10;     Allow cleaner access to a Service. Always returns a new instance of the class.&#10;&#10;Parameters:&#10;    string $name&#10;    array|null $params;;d1,972;;b0,0;;m0;;estring $name;;parray|null $params;;p">
</treenode>
<treenode node="singular;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;55;2;106;;;;vpos;;v;;astring;;r&#10;Definition&#10;    singular(string $string): string&#10;&#10;Description&#10;     Singular&#10;&#10;Parameters:&#10;    string $string - Input string;;d1,56;;b0,0;;m0;;estring $string;;p">
</treenode>
<treenode node="site_url;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;55;2;87;;;;vpos;;v;;astring;;r&#10;Definition&#10;    site_url($uri = &apos;&apos;, string $protocol = null, \Config\App $altConfig = null): string&#10;&#10;Description&#10;     Return a site URL to use in views&#10;&#10;Parameters:&#10;    mixed $uri - URI string or array of URI segments&#10;    string|null $protocol&#10;    \Config\App|null $altConfig - Alternate configuration to use;;d1,56;;b0,0;;m0;;emixed $uri;;pstring|null $protocol;;p\Config\App|null $altConfig;;p">
</treenode>
<treenode node="slash_item;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;992;35;992;;;;vpos;;v;;astring;;r&#10;Description&#10;     Fetch a config file item with slash appended (if not empty)&#10;&#10;Parameters:&#10;    string $item - Config item name&#10;&#10;Return:&#10;   |null The configuration item or NULL if;;d-1,-1;;b0,0;;m0;;estring $item;;p">
</treenode>
<treenode node="source;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;532;2;555;;;;vpos;;v;;astring;;r&#10;Definition&#10;    source(string $src, string $type = &apos;unknown&apos;, string $attributes = &apos;&apos;, bool $indexPage = false): string&#10;&#10;Description&#10;     Source&#10;&#10;Parameters:&#10;    string $src - The path of the media resource&#10;    string $type - The MIME-type of the resource with optional codecs parameters&#10;    string $attributes - HTML attributes&#10;    boolean $indexPage;;d1,533;;b0,0;;m0;;estring $src;;pstring $type;;pstring $attributes;;pboolean $indexPage;;p">
</treenode>
<treenode node="stringify_attributes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;1019;2;1041;;;;vpos;;v;;astring;;r&#10;Definition&#10;    stringify_attributes($attributes, bool $js = false): string&#10;&#10;Description&#10;     Stringify attributes for use in HTML tags.&#10;&#10;Parameters:&#10;    mixed $attributes - string, array, object&#10;    boolean $js;;d1,1020;;b0,0;;m0;;emixed $attributes;;pboolean $js;;p">
</treenode>
<treenode node="strip_image_tags;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\security_helper.php;f1;72;2;79;;;;vpos;;v;;astring;;r&#10;Definition&#10;    strip_image_tags(string $str): string&#10;&#10;Description&#10;     Strip Image Tags&#10;&#10;Parameters:&#10;    string $str;;d1,73;;b0,0;;m0;;estring $str;;p">
</treenode>
<treenode node="strip_quotes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;635;2;638;;;;vpos;;v;;astring;;r&#10;Definition&#10;    strip_quotes(string $str): string&#10;&#10;Description&#10;     Strip Quotes&#10;&#10;Parameters:&#10;    string $str;;d1,636;;b0,0;;m0;;estring $str;;p">
</treenode>
<treenode node="strip_slashes;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;607;2;619;;;;vpos;;v;;amixed;;r&#10;Definition&#10;    strip_slashes($str)&#10;&#10;Description&#10;     Strip Slashes&#10;&#10;Parameters:&#10;    mixed $str - string or array&#10;&#10;Return:&#10;   string or array;;d1,608;;b0,0;;m0;;emixed $str;;p">
</treenode>
<treenode node="symbolic_permissions;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\filesystem_helper.php;f1;405;2;456;;;;vpos;;v;;astring;;r&#10;Definition&#10;    symbolic_permissions(int $perms): string&#10;&#10;Description&#10;     Symbolic Permissions&#10;&#10;Parameters:&#10;    integer $perms - Permissions;;d1,406;;b0,0;;m0;;einteger $perms;;p">
</treenode>
<treenode node="timer;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;1055;2;1070;;;;vpos;;v;;a;;r&#10;Definition&#10;    timer(string $name = null)&#10;&#10;Description&#10;     A convenience method for working with the timer. If no parameter is passed, it will return the timer instance, otherwise will start or stop the timer intelligently.&#10;&#10;Parameters:&#10;    string|null $name;;d1,1056;;b0,0;;m0;;estring|null $name;;p">
</treenode>
<treenode node="timezone_select;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\date_helper.php;f1;88;2;100;;;;vpos;;v;;astring;;r&#10;Definition&#10;    timezone_select(string $class = &apos;&apos;, string $default = &apos;&apos;, int $what = \DateTimeZone::ALL, string $country = null): string&#10;&#10;Description&#10;     Generates a select field of all available timezones&#10;&#10;Parameters:&#10;    string $class - Optional class to apply to the select field&#10;    string $default - Default value for initial selection&#10;    integer $what - One of the DateTimeZone class constants (for listIdentifiers)&#10;    string $country - A two-letter ISO 3166-1 compatible country code (for listIdentifiers);;d1,89;;b0,0;;m0;;estring $class;;pstring $default;;pinteger $what;;pstring $country;;p">
</treenode>
<treenode node="trace;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;1078;2;1082;;;;vpos;;v;;a;;r&#10;Definition&#10;    trace()&#10;&#10;Description&#10;     Provides a backtrace to the current execution point, from Kint.;;d1,1079;;b0,0;;m0;;e">
</treenode>
<treenode node="track;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;574;2;581;;;;vpos;;v;;astring;;r&#10;Definition&#10;    track(string $src, string $kind, string $srcLanguage, string $label): string&#10;&#10;Description&#10;     Track&#10;&#10;Parameters:&#10;    string $src - The path of the &#10;    string $kind&#10;    string $srcLanguage&#10;    string $label;;d1,575;;b0,0;;m0;;estring $src;;pstring $kind;;pstring $srcLanguage;;pstring $label;;p">
</treenode>
<treenode node="ul;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;57;2;60;;;;vpos;;v;;astring;;r&#10;Definition&#10;    ul(array $list, $attributes = &apos;&apos;): string&#10;&#10;Description&#10;     Unordered List&#10;&#10;Parameters:&#10;    array $list&#10;    mixed $attributes - HTML attributes string, array, object;;d1,58;;b0,0;;m0;;earray $list;;pmixed $attributes;;p">
</treenode>
<treenode node="underscore;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\inflector_helper.php;f1;239;2;244;;;;vpos;;v;;astring;;r&#10;Definition&#10;    underscore(string $string): string&#10;&#10;Description&#10;     Underscore&#10;&#10;Parameters:&#10;    string $string - Input string;;d1,240;;b0,0;;m0;;estring $string;;p">
</treenode>
<treenode node="uri_string;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;218;2;221;;;;vpos;;v;;astring;;r&#10;Definition&#10;    uri_string(): string&#10;&#10;Description&#10;     URL String;;d1,219;;b0,0;;m0;;e">
</treenode>
<treenode node="url_title;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\url_helper.php;f1;585;2;608;;;;vpos;;v;;astring;;r&#10;Definition&#10;    url_title(string $str, string $separator = &apos;-&apos;, bool $lowercase = false): string&#10;&#10;Description&#10;     Create URL Title&#10;&#10;Parameters:&#10;    string $str - Input string&#10;    string $separator - Word separator (usually &apos;-&apos; or &apos;_&apos;)&#10;    boolean $lowercase - Whether to transform the output string to lowercase;;d1,586;;b0,0;;m0;;estring $str;;pstring $separator;;pboolean $lowercase;;p">
</treenode>
<treenode node="user;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Helpers\auth_helper.php;f1;24;2;29;;;;vpos;;v;;a;;r&#10;Definition&#10;    user()&#10;&#10;Description&#10;     Returns the User instance for the current logged in user.;;d1,25;;b0,0;;m0;;e">
</treenode>
<treenode node="user_id;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\app\ThirdParty\auth\src\Helpers\auth_helper.php;f1;39;2;44;;;;vpos;;v;;aint;;r&#10;Definition&#10;    user_id()&#10;&#10;Description&#10;     Returns the User ID for the current logged in user.&#10;&#10;Return:&#10;   |null;;d1,40;;b0,0;;m0;;e">
</treenode>
<treenode node="video;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\html_helper.php;f1;353;2;398;;;;vpos;;v;;astring;;r&#10;Definition&#10;    video($src, string $unsupportedMessage = &apos;&apos;, string $attributes = &apos;&apos;, array $tracks = [], bool $indexPage = false): string&#10;&#10;Description&#10;     Video&#10;&#10;Parameters:&#10;    mixed $src - Either a source string or an array of sources&#10;    string $unsupportedMessage - The message to display if the media tag is not supported by the browser&#10;    string $attributes - HTML attributes&#10;    array $tracks&#10;    boolean $indexPage;;d1,354;;b0,0;;m0;;emixed $src;;pstring $unsupportedMessage;;pstring $attributes;;parray $tracks;;pboolean $indexPage;;p">
</treenode>
<treenode node="view;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;1102;2;1119;;;;vpos;;v;;astring;;r&#10;Definition&#10;    view(string $name, array $data = [], array $options = []): string&#10;&#10;Description&#10;     Grabs the current RendererInterface-compatible class and tells it to render the specified view. Simply provides a convenience method that can be used in Controllers, libraries, and routed closures.&#10;&#10;Parameters:&#10;    string $name&#10;    array $data&#10;    array $options - Unused - reserved for third-party extensions;;d1,1103;;b0,0;;m0;;estring $name;;parray $data;;parray $options;;p">
</treenode>
<treenode node="view_cell;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Common.php;f1;1136;2;1140;;;;vpos;;v;;astring;;r&#10;Definition&#10;    view_cell(string $library, $params = null, int $ttl = 0, string $cacheName = null): string&#10;&#10;Description&#10;     View cells are used within views to insert HTML chunks that are managed by other classes.&#10;&#10;Parameters:&#10;    string $library&#10;    null $params&#10;    integer $ttl&#10;    string|null $cacheName;;d1,1137;;b0,0;;m0;;estring $library;;pnull $params;;pinteger $ttl;;pstring|null $cacheName;;p">
</treenode>
<treenode node="word_censor;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;268;2;308;;;;vpos;;v;;astring;;r&#10;Definition&#10;    word_censor(string $str, array $censored, string $replacement = &apos;&apos;): string&#10;&#10;Description&#10;     Word Censoring Function&#10;&#10;Parameters:&#10;    string $str - the text string&#10;    array $censored - the array of censored words&#10;    string $replacement - the optional replacement value;;d1,269;;b0,0;;m0;;estring $str;;parray $censored;;pstring $replacement;;p">
</treenode>
<treenode node="word_limiter;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;60;2;75;;;;vpos;;v;;astring;;r&#10;Definition&#10;    word_limiter(string $str, int $limit = 100, string $end_char = &apos;&amp;#8230;s&apos;): string&#10;&#10;Description&#10;     Word Limiter&#10;&#10;Parameters:&#10;    string $str&#10;    integer $limit&#10;    string $end_char - the end character;;d1,61;;b0,0;;m0;;estring $str;;pinteger $limit;;pstring $end_char;;p">
</treenode>
<treenode node="word_wrap;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\text_helper.php;f1;464;2;548;;;;vpos;;v;;astring;;r&#10;Definition&#10;    word_wrap(string $str, int $charlim = 76): string&#10;&#10;Description&#10;     Word Wrap&#10;&#10;Parameters:&#10;    string $str - the text string&#10;    integer $charlim - = 76    the number of characters to wrap at;;d1,465;;b0,0;;m0;;estring $str;;pinteger $charlim;;p">
</treenode>
<treenode node="write_file;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\filesystem_helper.php;f1;119;2;144;;;;vpos;;v;;aboolean;;r&#10;Definition&#10;    write_file(string $path, string $data, string $mode = &apos;wb&apos;): bool&#10;&#10;Description&#10;     Write File&#10;&#10;Parameters:&#10;    string $path - File path&#10;    string $data - Data to write&#10;    string $mode - fopen() mode (default: &apos;wb&apos;);;d1,120;;b0,0;;m0;;estring $path;;pstring $data;;pstring $mode;;p">
</treenode>
<treenode node="xml_convert;PHP:Function Name;O:\xampp\htdocs\2020\blog-4\system\Helpers\xml_helper.php;f1;53;2;93;;;;vpos;;v;;astring;;r&#10;Definition&#10;    xml_convert(string $str, bool $protect_all = false): string&#10;&#10;Description&#10;     Convert Reserved XML characters to Entities&#10;&#10;Parameters:&#10;    string $str&#10;    boolean $protect_all;;d1,54;;b0,0;;m0;;estring $str;;pboolean $protect_all;;p">
</treenode>
</phptree>
</codestructure>